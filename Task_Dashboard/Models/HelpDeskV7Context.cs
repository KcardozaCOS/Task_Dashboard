using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Task_Dashboard.Models
{
    public partial class HelpDeskV7Context : DbContext
    {
        public HelpDeskV7Context()
        {
        }

        public HelpDeskV7Context(DbContextOptions<HelpDeskV7Context> options)
            : base(options)
        {
        }

        public virtual DbSet<ActiveDirectory> ActiveDirectories { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityAttachmentList> ActivityAttachmentLists { get; set; }
        public virtual DbSet<ActivityList> ActivityLists { get; set; }
        public virtual DbSet<ActivitySummary> ActivitySummaries { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressBilling> AddressBillings { get; set; }
        public virtual DbSet<AddressShipping> AddressShippings { get; set; }
        public virtual DbSet<AllocatedLicenseList> AllocatedLicenseLists { get; set; }
        public virtual DbSet<AllocatedSoftwareProductByObjectSummary> AllocatedSoftwareProductByObjectSummaries { get; set; }
        public virtual DbSet<Announcement> Announcements { get; set; }
        public virtual DbSet<AnnouncementList> AnnouncementLists { get; set; }
        public virtual DbSet<AnnouncementListActive> AnnouncementListActives { get; set; }
        public virtual DbSet<ApprovalRequest> ApprovalRequests { get; set; }
        public virtual DbSet<ApprovalRequestList> ApprovalRequestLists { get; set; }
        public virtual DbSet<ApprovalStage> ApprovalStages { get; set; }
        public virtual DbSet<ApprovalStageList> ApprovalStageLists { get; set; }
        public virtual DbSet<ApprovalStageListActive> ApprovalStageListActives { get; set; }
        public virtual DbSet<ArchivingLog> ArchivingLogs { get; set; }
        public virtual DbSet<AspNetSqlCacheTablesForChangeNotification> AspNetSqlCacheTablesForChangeNotifications { get; set; }
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<AssetIpAddressList> AssetIpAddressLists { get; set; }
        public virtual DbSet<AssetList> AssetLists { get; set; }
        public virtual DbSet<AssetListActive> AssetListActives { get; set; }
        public virtual DbSet<AssetVendor> AssetVendors { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<AttachmentObjectsList> AttachmentObjectsLists { get; set; }
        public virtual DbSet<AttachmentSelectList> AttachmentSelectLists { get; set; }
        public virtual DbSet<AttachmentsSummary> AttachmentsSummaries { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<BrandActiveList> BrandActiveLists { get; set; }
        public virtual DbSet<BrandList> BrandLists { get; set; }
        public virtual DbSet<Budget> Budgets { get; set; }
        public virtual DbSet<BudgetList> BudgetLists { get; set; }
        public virtual DbSet<CfgAdjobOption> CfgAdjobOptions { get; set; }
        public virtual DbSet<CfgArchiveDatabase> CfgArchiveDatabases { get; set; }
        public virtual DbSet<CfgArchivingJobOption> CfgArchivingJobOptions { get; set; }
        public virtual DbSet<CfgAudit> CfgAudits { get; set; }
        public virtual DbSet<CfgCalendarObject> CfgCalendarObjects { get; set; }
        public virtual DbSet<CfgCustDepend> CfgCustDepends { get; set; }
        public virtual DbSet<CfgCustField> CfgCustFields { get; set; }
        public virtual DbSet<CfgCustFieldLocation> CfgCustFieldLocations { get; set; }
        public virtual DbSet<CfgCustFieldValue> CfgCustFieldValues { get; set; }
        public virtual DbSet<CfgCustFieldsLabel> CfgCustFieldsLabels { get; set; }
        public virtual DbSet<CfgCustFieldsList> CfgCustFieldsLists { get; set; }
        public virtual DbSet<CfgCustFieldsView> CfgCustFieldsViews { get; set; }
        public virtual DbSet<CfgCustTable> CfgCustTables { get; set; }
        public virtual DbSet<CfgCustTableField> CfgCustTableFields { get; set; }
        public virtual DbSet<CfgDashboard> CfgDashboards { get; set; }
        public virtual DbSet<CfgDashboardLayout> CfgDashboardLayouts { get; set; }
        public virtual DbSet<CfgDashboardLayoutList> CfgDashboardLayoutLists { get; set; }
        public virtual DbSet<CfgDashboardList> CfgDashboardLists { get; set; }
        public virtual DbSet<CfgDashboardMember> CfgDashboardMembers { get; set; }
        public virtual DbSet<CfgDashboardMembersList> CfgDashboardMembersLists { get; set; }
        public virtual DbSet<CfgDashboardWidget> CfgDashboardWidgets { get; set; }
        public virtual DbSet<CfgDashboardWidgetsList> CfgDashboardWidgetsLists { get; set; }
        public virtual DbSet<CfgDashboardWidgetsView> CfgDashboardWidgetsViews { get; set; }
        public virtual DbSet<CfgDisabledView> CfgDisabledViews { get; set; }
        public virtual DbSet<CfgDscjobOption> CfgDscjobOptions { get; set; }
        public virtual DbSet<CfgEmailAttachment> CfgEmailAttachments { get; set; }
        public virtual DbSet<CfgEmailQueue> CfgEmailQueues { get; set; }
        public virtual DbSet<CfgEmailTemplate> CfgEmailTemplates { get; set; }
        public virtual DbSet<CfgId> CfgIds { get; set; }
        public virtual DbSet<CfgImportObjectRename> CfgImportObjectRenames { get; set; }
        public virtual DbSet<CfgImportOid> CfgImportOids { get; set; }
        public virtual DbSet<CfgInfo> CfgInfos { get; set; }
        public virtual DbSet<CfgInstaller> CfgInstallers { get; set; }
        public virtual DbSet<CfgInvLoadConflict> CfgInvLoadConflicts { get; set; }
        public virtual DbSet<CfgInvLoadConflictField> CfgInvLoadConflictFields { get; set; }
        public virtual DbSet<CfgInvLoadConflictMember> CfgInvLoadConflictMembers { get; set; }
        public virtual DbSet<CfgInvLoadConflictPolicy> CfgInvLoadConflictPolicies { get; set; }
        public virtual DbSet<CfgJob> CfgJobs { get; set; }
        public virtual DbSet<CfgJobHistory> CfgJobHistories { get; set; }
        public virtual DbSet<CfgJobList> CfgJobLists { get; set; }
        public virtual DbSet<CfgJobListView> CfgJobListViews { get; set; }
        public virtual DbSet<CfgKbCategoryLevel> CfgKbCategoryLevels { get; set; }
        public virtual DbSet<CfgKbCategoryParent> CfgKbCategoryParents { get; set; }
        public virtual DbSet<CfgLcactionFormList> CfgLcactionFormLists { get; set; }
        public virtual DbSet<CfgLcactionList> CfgLcactionLists { get; set; }
        public virtual DbSet<CfgLcconditionalCheckList> CfgLcconditionalCheckLists { get; set; }
        public virtual DbSet<CfgLcemail> CfgLcemails { get; set; }
        public virtual DbSet<CfgLcemailList> CfgLcemailLists { get; set; }
        public virtual DbSet<CfgLcemailParam> CfgLcemailParams { get; set; }
        public virtual DbSet<CfgLcemailParamsMap> CfgLcemailParamsMaps { get; set; }
        public virtual DbSet<CfgLcemailSection> CfgLcemailSections { get; set; }
        public virtual DbSet<CfgLcemailTemplate> CfgLcemailTemplates { get; set; }
        public virtual DbSet<CfgLcemailUserList> CfgLcemailUserLists { get; set; }
        public virtual DbSet<CfgLcevent> CfgLcevents { get; set; }
        public virtual DbSet<CfgLceventList> CfgLceventLists { get; set; }
        public virtual DbSet<CfgLceventListToUser> CfgLceventListToUsers { get; set; }
        public virtual DbSet<CfgLceventProcessList> CfgLceventProcessLists { get; set; }
        public virtual DbSet<CfgLceventRole> CfgLceventRoles { get; set; }
        public virtual DbSet<CfgLceventRoleList> CfgLceventRoleLists { get; set; }
        public virtual DbSet<CfgLceventViewList> CfgLceventViewLists { get; set; }
        public virtual DbSet<CfgLcfilter> CfgLcfilters { get; set; }
        public virtual DbSet<CfgLcfilterList> CfgLcfilterLists { get; set; }
        public virtual DbSet<CfgLcfilterParam> CfgLcfilterParams { get; set; }
        public virtual DbSet<CfgLcform> CfgLcforms { get; set; }
        public virtual DbSet<CfgLcformDefinition> CfgLcformDefinitions { get; set; }
        public virtual DbSet<CfgLcformElement> CfgLcformElements { get; set; }
        public virtual DbSet<CfgLcformField> CfgLcformFields { get; set; }
        public virtual DbSet<CfgLcformValidation> CfgLcformValidations { get; set; }
        public virtual DbSet<CfgLcfunction> CfgLcfunctions { get; set; }
        public virtual DbSet<CfgLcfunctionCallerList> CfgLcfunctionCallerLists { get; set; }
        public virtual DbSet<CfgLcfunctionList> CfgLcfunctionLists { get; set; }
        public virtual DbSet<CfgLcfunctionParam> CfgLcfunctionParams { get; set; }
        public virtual DbSet<CfgLcimage> CfgLcimages { get; set; }
        public virtual DbSet<CfgLcnewObjectEventList> CfgLcnewObjectEventLists { get; set; }
        public virtual DbSet<CfgLcobjectHistory> CfgLcobjectHistories { get; set; }
        public virtual DbSet<CfgLcoperation> CfgLcoperations { get; set; }
        public virtual DbSet<CfgLcparamsMap> CfgLcparamsMaps { get; set; }
        public virtual DbSet<CfgLcprocess> CfgLcprocesses { get; set; }
        public virtual DbSet<CfgLcprocessItem> CfgLcprocessItems { get; set; }
        public virtual DbSet<CfgLcprocessItemsList> CfgLcprocessItemsLists { get; set; }
        public virtual DbSet<CfgLcprocessList> CfgLcprocessLists { get; set; }
        public virtual DbSet<CfgLcrecurrentAttachment> CfgLcrecurrentAttachments { get; set; }
        public virtual DbSet<CfgLcrecurrentField> CfgLcrecurrentFields { get; set; }
        public virtual DbSet<CfgLcrecurrentObject> CfgLcrecurrentObjects { get; set; }
        public virtual DbSet<CfgLcserviceActionList> CfgLcserviceActionLists { get; set; }
        public virtual DbSet<CfgLcserviceAttribute> CfgLcserviceAttributes { get; set; }
        public virtual DbSet<CfgLcserviceFieldMapping> CfgLcserviceFieldMappings { get; set; }
        public virtual DbSet<CfgLctaskList> CfgLctaskLists { get; set; }
        public virtual DbSet<CfgLctemplate> CfgLctemplates { get; set; }
        public virtual DbSet<CfgLctemplateDefinition> CfgLctemplateDefinitions { get; set; }
        public virtual DbSet<CfgLctemplateList> CfgLctemplateLists { get; set; }
        public virtual DbSet<CfgLctemplateUserList> CfgLctemplateUserLists { get; set; }
        public virtual DbSet<CfgLctoolbarAction> CfgLctoolbarActions { get; set; }
        public virtual DbSet<CfgLctriggerList> CfgLctriggerLists { get; set; }
        public virtual DbSet<CfgLctriggerOnChangeList> CfgLctriggerOnChangeLists { get; set; }
        public virtual DbSet<CfgLctriggerOnDeleteList> CfgLctriggerOnDeleteLists { get; set; }
        public virtual DbSet<CfgLcvalidationRuleList> CfgLcvalidationRuleLists { get; set; }
        public virtual DbSet<CfgLcviewFormList> CfgLcviewFormLists { get; set; }
        public virtual DbSet<CfgLicenseStaticCompliance> CfgLicenseStaticCompliances { get; set; }
        public virtual DbSet<CfgLocationParent> CfgLocationParents { get; set; }
        public virtual DbSet<CfgLocationsLevel> CfgLocationsLevels { get; set; }
        public virtual DbSet<CfgMcjobOption> CfgMcjobOptions { get; set; }
        public virtual DbSet<CfgObjectCategoryLevel> CfgObjectCategoryLevels { get; set; }
        public virtual DbSet<CfgObjectCategoryParent> CfgObjectCategoryParents { get; set; }
        public virtual DbSet<CfgObjectDependenciesView> CfgObjectDependenciesViews { get; set; }
        public virtual DbSet<CfgObjectsRelationshipActive> CfgObjectsRelationshipActives { get; set; }
        public virtual DbSet<CfgObjectsRelationshipList> CfgObjectsRelationshipLists { get; set; }
        public virtual DbSet<CfgOrganizationalUnitLevel> CfgOrganizationalUnitLevels { get; set; }
        public virtual DbSet<CfgOrganizationalUnitParent> CfgOrganizationalUnitParents { get; set; }
        public virtual DbSet<CfgPendingRegistration> CfgPendingRegistrations { get; set; }
        public virtual DbSet<CfgProjectParent> CfgProjectParents { get; set; }
        public virtual DbSet<CfgProjectsLevel> CfgProjectsLevels { get; set; }
        public virtual DbSet<CfgRecurrentTicketList> CfgRecurrentTicketLists { get; set; }
        public virtual DbSet<CfgReportCategoryLevel> CfgReportCategoryLevels { get; set; }
        public virtual DbSet<CfgReportCategoryParent> CfgReportCategoryParents { get; set; }
        public virtual DbSet<CfgReportList> CfgReportLists { get; set; }
        public virtual DbSet<CfgReportingJobOption> CfgReportingJobOptions { get; set; }
        public virtual DbSet<CfgScCategoryLevel> CfgScCategoryLevels { get; set; }
        public virtual DbSet<CfgScCategoryParent> CfgScCategoryParents { get; set; }
        public virtual DbSet<CfgSecurityDashboardList> CfgSecurityDashboardLists { get; set; }
        public virtual DbSet<CfgSecurityRole> CfgSecurityRoles { get; set; }
        public virtual DbSet<CfgSecurityRoleAction> CfgSecurityRoleActions { get; set; }
        public virtual DbSet<CfgSecurityRoleDashboard> CfgSecurityRoleDashboards { get; set; }
        public virtual DbSet<CfgSecurityRoleList> CfgSecurityRoleLists { get; set; }
        public virtual DbSet<CfgSecurityRoleMember> CfgSecurityRoleMembers { get; set; }
        public virtual DbSet<CfgSecurityRoleOu> CfgSecurityRoleOus { get; set; }
        public virtual DbSet<CfgSecurityRoleView> CfgSecurityRoleViews { get; set; }
        public virtual DbSet<CfgSecurityRolesSummary> CfgSecurityRolesSummaries { get; set; }
        public virtual DbSet<CfgServiceOperation> CfgServiceOperations { get; set; }
        public virtual DbSet<CfgServiceOperationsList> CfgServiceOperationsLists { get; set; }
        public virtual DbSet<CfgSetting> CfgSettings { get; set; }
        public virtual DbSet<CfgSharedViewList> CfgSharedViewLists { get; set; }
        public virtual DbSet<CfgSharedViewName> CfgSharedViewNames { get; set; }
        public virtual DbSet<CfgSnippet> CfgSnippets { get; set; }
        public virtual DbSet<CfgSnippetCategory> CfgSnippetCategories { get; set; }
        public virtual DbSet<CfgSolutionRatingsSummary> CfgSolutionRatingsSummaries { get; set; }
        public virtual DbSet<CfgSpid> CfgSpids { get; set; }
        public virtual DbSet<CfgSystemLog> CfgSystemLogs { get; set; }
        public virtual DbSet<CfgSystemLogCategory> CfgSystemLogCategories { get; set; }
        public virtual DbSet<CfgSystemLogNotification> CfgSystemLogNotifications { get; set; }
        public virtual DbSet<CfgSystemLogNotificationsView> CfgSystemLogNotificationsViews { get; set; }
        public virtual DbSet<CfgSystemLogView> CfgSystemLogViews { get; set; }
        public virtual DbSet<CfgTechnicianAccountList> CfgTechnicianAccountLists { get; set; }
        public virtual DbSet<CfgTicketsAll> CfgTicketsAlls { get; set; }
        public virtual DbSet<CfgTicketsAllActive> CfgTicketsAllActives { get; set; }
        public virtual DbSet<CfgToolLog> CfgToolLogs { get; set; }
        public virtual DbSet<CfgTrackedSoftwareProduct> CfgTrackedSoftwareProducts { get; set; }
        public virtual DbSet<CfgView> CfgViews { get; set; }
        public virtual DbSet<CfgViewSetting> CfgViewSettings { get; set; }
        public virtual DbSet<CfgWflog> CfgWflogs { get; set; }
        public virtual DbSet<CfgWflogDataView> CfgWflogDataViews { get; set; }
        public virtual DbSet<CfgWflogDatum> CfgWflogData { get; set; }
        public virtual DbSet<CfgWflogEmail> CfgWflogEmails { get; set; }
        public virtual DbSet<CfgWflogsView> CfgWflogsViews { get; set; }
        public virtual DbSet<CfgWfmacro> CfgWfmacros { get; set; }
        public virtual DbSet<CfgWfobject> CfgWfobjects { get; set; }
        public virtual DbSet<CfgWfobjectDependsView> CfgWfobjectDependsViews { get; set; }
        public virtual DbSet<CfgWfobjectsView> CfgWfobjectsViews { get; set; }
        public virtual DbSet<CfgWorkOrderParent> CfgWorkOrderParents { get; set; }
        public virtual DbSet<ChangeManagementEvent> ChangeManagementEvents { get; set; }
        public virtual DbSet<ChangeRequest> ChangeRequests { get; set; }
        public virtual DbSet<ChangeRequestApproval> ChangeRequestApprovals { get; set; }
        public virtual DbSet<ChangeRequestApprovalList> ChangeRequestApprovalLists { get; set; }
        public virtual DbSet<ChangeRequestApprovalsSummary> ChangeRequestApprovalsSummaries { get; set; }
        public virtual DbSet<ChangeRequestList> ChangeRequestLists { get; set; }
        public virtual DbSet<ChangeRequestListActive> ChangeRequestListActives { get; set; }
        public virtual DbSet<ChangeRequestListPersonal> ChangeRequestListPersonals { get; set; }
        public virtual DbSet<CiAll> CiAlls { get; set; }
        public virtual DbSet<CiAndTicketObjectClass> CiAndTicketObjectClasses { get; set; }
        public virtual DbSet<CiAssetList> CiAssetLists { get; set; }
        public virtual DbSet<CiIpAddressList> CiIpAddressLists { get; set; }
        public virtual DbSet<CiList> CiLists { get; set; }
        public virtual DbSet<CiListActive> CiListActives { get; set; }
        public virtual DbSet<Computer> Computers { get; set; }
        public virtual DbSet<ComputerList> ComputerLists { get; set; }
        public virtual DbSet<ComputerListActive> ComputerListActives { get; set; }
        public virtual DbSet<ComputerVendor> ComputerVendors { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<ConfigurationList> ConfigurationLists { get; set; }
        public virtual DbSet<ConfigurationListActive> ConfigurationListActives { get; set; }
        public virtual DbSet<Consumable> Consumables { get; set; }
        public virtual DbSet<ConsumableList> ConsumableLists { get; set; }
        public virtual DbSet<ConsumableListActive> ConsumableListActives { get; set; }
        public virtual DbSet<ConsumableMovementList> ConsumableMovementLists { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<ContractList> ContractLists { get; set; }
        public virtual DbSet<ContractListActive> ContractListActives { get; set; }
        public virtual DbSet<CustomerList> CustomerLists { get; set; }
        public virtual DbSet<CustomerListActive> CustomerListActives { get; set; }
        public virtual DbSet<DashboardActivityList> DashboardActivityLists { get; set; }
        public virtual DbSet<DepreciationMethod> DepreciationMethods { get; set; }
        public virtual DbSet<DetectedInstallationList> DetectedInstallationLists { get; set; }
        public virtual DbSet<DetectedProductList> DetectedProductLists { get; set; }
        public virtual DbSet<DetectedSoftwareProduct> DetectedSoftwareProducts { get; set; }
        public virtual DbSet<DetectedSoftwareProductsActual> DetectedSoftwareProductsActuals { get; set; }
        public virtual DbSet<DiscoveredInstallationList> DiscoveredInstallationLists { get; set; }
        public virtual DbSet<DiscoveredLicSoftByObjectSummary> DiscoveredLicSoftByObjectSummaries { get; set; }
        public virtual DbSet<DiscoveredSoftwareProductList> DiscoveredSoftwareProductLists { get; set; }
        public virtual DbSet<DiscoveryConnectorLog> DiscoveryConnectorLogs { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentList> DocumentLists { get; set; }
        public virtual DbSet<DocumentListActive> DocumentListActives { get; set; }
        public virtual DbSet<EmailQueueList> EmailQueueLists { get; set; }
        public virtual DbSet<EmailType> EmailTypes { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<GldetailArchive> GldetailArchives { get; set; }
        public virtual DbSet<GroupMember> GroupMembers { get; set; }
        public virtual DbSet<GroupMemberList> GroupMemberLists { get; set; }
        public virtual DbSet<GroupPersonsList> GroupPersonsLists { get; set; }
        public virtual DbSet<Hardware> Hardwares { get; set; }
        public virtual DbSet<HardwareList> HardwareLists { get; set; }
        public virtual DbSet<HardwareListActive> HardwareListActives { get; set; }
        public virtual DbSet<HardwareVendor> HardwareVendors { get; set; }
        public virtual DbSet<History> Histories { get; set; }
        public virtual DbSet<HistoryList> HistoryLists { get; set; }
        public virtual DbSet<HtmlImage> HtmlImages { get; set; }
        public virtual DbSet<HtmlPreview> HtmlPreviews { get; set; }
        public virtual DbSet<HtmlStyle> HtmlStyles { get; set; }
        public virtual DbSet<ImportContactsLog> ImportContactsLogs { get; set; }
        public virtual DbSet<Incident> Incidents { get; set; }
        public virtual DbSet<IncidentList> IncidentLists { get; set; }
        public virtual DbSet<IncidentListActive> IncidentListActives { get; set; }
        public virtual DbSet<IncidentsByCrSummary> IncidentsByCrSummaries { get; set; }
        public virtual DbSet<IncidentsByProblemSummary> IncidentsByProblemSummaries { get; set; }
        public virtual DbSet<IpAddress> IpAddresses { get; set; }
        public virtual DbSet<IpAddressLink> IpAddressLinks { get; set; }
        public virtual DbSet<IpAddressLinkList> IpAddressLinkLists { get; set; }
        public virtual DbSet<IpAddressList> IpAddressLists { get; set; }
        public virtual DbSet<KbArticle> KbArticles { get; set; }
        public virtual DbSet<KbArticleCategoriesList> KbArticleCategoriesLists { get; set; }
        public virtual DbSet<KbArticleCategory> KbArticleCategories { get; set; }
        public virtual DbSet<KbArticleList> KbArticleLists { get; set; }
        public virtual DbSet<KbArticleListActive> KbArticleListActives { get; set; }
        public virtual DbSet<KbArticleListWithCategoryId> KbArticleListWithCategoryIds { get; set; }
        public virtual DbSet<KbArticleOrganization> KbArticleOrganizations { get; set; }
        public virtual DbSet<KbCategory> KbCategories { get; set; }
        public virtual DbSet<KbCategoryArticlesList> KbCategoryArticlesLists { get; set; }
        public virtual DbSet<KbCategoryList> KbCategoryLists { get; set; }
        public virtual DbSet<KbCategoryListAll> KbCategoryListAlls { get; set; }
        public virtual DbSet<LeftObjectRelationClass> LeftObjectRelationClasses { get; set; }
        public virtual DbSet<Library> Libraries { get; set; }
        public virtual DbSet<LibraryHistory> LibraryHistories { get; set; }
        public virtual DbSet<LibraryHistoryList> LibraryHistoryLists { get; set; }
        public virtual DbSet<LibraryItemOrganization> LibraryItemOrganizations { get; set; }
        public virtual DbSet<LibraryList> LibraryLists { get; set; }
        public virtual DbSet<LibraryListActive> LibraryListActives { get; set; }
        public virtual DbSet<LibraryOverdueList> LibraryOverdueLists { get; set; }
        public virtual DbSet<License> Licenses { get; set; }
        public virtual DbSet<LicenseAllocation> LicenseAllocations { get; set; }
        public virtual DbSet<LicenseAllocationList> LicenseAllocationLists { get; set; }
        public virtual DbSet<LicenseAllocationListByObject> LicenseAllocationListByObjects { get; set; }
        public virtual DbSet<LicenseAllocationsActual> LicenseAllocationsActuals { get; set; }
        public virtual DbSet<LicenseTrackingType> LicenseTrackingTypes { get; set; }
        public virtual DbSet<LinkSummary> LinkSummaries { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationList> LocationLists { get; set; }
        public virtual DbSet<LocationListActive> LocationListActives { get; set; }
        public virtual DbSet<LoggedAccountViewSettingsList> LoggedAccountViewSettingsLists { get; set; }
        public virtual DbSet<LoggedPersonViewList> LoggedPersonViewLists { get; set; }
        public virtual DbSet<MailConnectorLog> MailConnectorLogs { get; set; }
        public virtual DbSet<MyRequest> MyRequests { get; set; }
        public virtual DbSet<Network> Networks { get; set; }
        public virtual DbSet<NetworkList> NetworkLists { get; set; }
        public virtual DbSet<NetworkListActive> NetworkListActives { get; set; }
        public virtual DbSet<NotificationLog> NotificationLogs { get; set; }
        public virtual DbSet<ObjectAttachment> ObjectAttachments { get; set; }
        public virtual DbSet<ObjectAttachmentList> ObjectAttachmentLists { get; set; }
        public virtual DbSet<ObjectAttachmentsSummary> ObjectAttachmentsSummaries { get; set; }
        public virtual DbSet<ObjectCategory> ObjectCategories { get; set; }
        public virtual DbSet<ObjectCategoryActive> ObjectCategoryActives { get; set; }
        public virtual DbSet<ObjectCategoryView> ObjectCategoryViews { get; set; }
        public virtual DbSet<ObjectClass> ObjectClasses { get; set; }
        public virtual DbSet<ObjectFlag> ObjectFlags { get; set; }
        public virtual DbSet<ObjectIndex> ObjectIndices { get; set; }
        public virtual DbSet<ObjectList> ObjectLists { get; set; }
        public virtual DbSet<ObjectListAll> ObjectListAlls { get; set; }
        public virtual DbSet<ObjectRelation> ObjectRelations { get; set; }
        public virtual DbSet<ObjectRelationList> ObjectRelationLists { get; set; }
        public virtual DbSet<ObjectRelationListId> ObjectRelationListIds { get; set; }
        public virtual DbSet<ObjectRelationType> ObjectRelationTypes { get; set; }
        public virtual DbSet<ObjectRelationUnion> ObjectRelationUnions { get; set; }
        public virtual DbSet<ObjectRelationUnionActive> ObjectRelationUnionActives { get; set; }
        public virtual DbSet<ObjectRelationUnionSimple> ObjectRelationUnionSimples { get; set; }
        public virtual DbSet<ObjectStatusActive> ObjectStatusActives { get; set; }
        public virtual DbSet<ObjectType> ObjectTypes { get; set; }
        public virtual DbSet<ObjectTypeActive> ObjectTypeActives { get; set; }
        public virtual DbSet<ObjectTypeView> ObjectTypeViews { get; set; }
        public virtual DbSet<OrganizationalUnit> OrganizationalUnits { get; set; }
        public virtual DbSet<OrganizationalUnitList> OrganizationalUnitLists { get; set; }
        public virtual DbSet<OrganizationalUnitListActive> OrganizationalUnitListActives { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<PersonEmail> PersonEmails { get; set; }
        public virtual DbSet<PersonEmailList> PersonEmailLists { get; set; }
        public virtual DbSet<PersonList> PersonLists { get; set; }
        public virtual DbSet<PersonListActive> PersonListActives { get; set; }
        public virtual DbSet<PersonLogin> PersonLogins { get; set; }
        public virtual DbSet<PersonalFlag> PersonalFlags { get; set; }
        public virtual DbSet<PhysicalCiAll> PhysicalCiAlls { get; set; }
        public virtual DbSet<Po> Pos { get; set; }
        public virtual DbSet<PoFreightTerm> PoFreightTerms { get; set; }
        public virtual DbSet<PoFreightTermsActive> PoFreightTermsActives { get; set; }
        public virtual DbSet<PoItem> PoItems { get; set; }
        public virtual DbSet<PoItemList> PoItemLists { get; set; }
        public virtual DbSet<PoItemListAll> PoItemListAlls { get; set; }
        public virtual DbSet<PoItemListAllActive> PoItemListAllActives { get; set; }
        public virtual DbSet<PoItemsSummary> PoItemsSummaries { get; set; }
        public virtual DbSet<PoList> PoLists { get; set; }
        public virtual DbSet<PoListActive> PoListActives { get; set; }
        public virtual DbSet<PoOverdueList> PoOverdueLists { get; set; }
        public virtual DbSet<PoPaymentTerm> PoPaymentTerms { get; set; }
        public virtual DbSet<PoShipping> PoShippings { get; set; }
        public virtual DbSet<PriorityCalculation> PriorityCalculations { get; set; }
        public virtual DbSet<PriorityCalculationList> PriorityCalculationLists { get; set; }
        public virtual DbSet<Problem> Problems { get; set; }
        public virtual DbSet<ProblemList> ProblemLists { get; set; }
        public virtual DbSet<ProblemListActive> ProblemListActives { get; set; }
        public virtual DbSet<ProblemsByCrSummary> ProblemsByCrSummaries { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductList> ProductLists { get; set; }
        public virtual DbSet<ProductListActive> ProductListActives { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectList> ProjectLists { get; set; }
        public virtual DbSet<ProjectListActive> ProjectListActives { get; set; }
        public virtual DbSet<PurchaseHistoryList> PurchaseHistoryLists { get; set; }
        public virtual DbSet<Receiver> Receivers { get; set; }
        public virtual DbSet<ReceiversSlaList> ReceiversSlaLists { get; set; }
        public virtual DbSet<RecurrentObjectList> RecurrentObjectLists { get; set; }
        public virtual DbSet<RecurrentTicketLog> RecurrentTicketLogs { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportCategory> ReportCategories { get; set; }
        public virtual DbSet<ReportCategoryList> ReportCategoryLists { get; set; }
        public virtual DbSet<ReportList> ReportLists { get; set; }
        public virtual DbSet<ReportListCategory> ReportListCategories { get; set; }
        public virtual DbSet<ReportListCategoryAll> ReportListCategoryAlls { get; set; }
        public virtual DbSet<ReportingLog> ReportingLogs { get; set; }
        public virtual DbSet<Reservation> Reservations { get; set; }
        public virtual DbSet<ReservationList> ReservationLists { get; set; }
        public virtual DbSet<ReservationListActive> ReservationListActives { get; set; }
        public virtual DbSet<ResponseTime> ResponseTimes { get; set; }
        public virtual DbSet<ResponseTimeList> ResponseTimeLists { get; set; }
        public virtual DbSet<RightObjectRelationClass> RightObjectRelationClasses { get; set; }
        public virtual DbSet<ScCategory> ScCategories { get; set; }
        public virtual DbSet<ScCategoryItemsList> ScCategoryItemsLists { get; set; }
        public virtual DbSet<ScCategoryList> ScCategoryLists { get; set; }
        public virtual DbSet<ScCategoryListAll> ScCategoryListAlls { get; set; }
        public virtual DbSet<ScItemCategoriesList> ScItemCategoriesLists { get; set; }
        public virtual DbSet<ScItemCategory> ScItemCategories { get; set; }
        public virtual DbSet<ScItemListWithCategoryId> ScItemListWithCategoryIds { get; set; }
        public virtual DbSet<SearchForSolution> SearchForSolutions { get; set; }
        public virtual DbSet<SecApprovalRequest> SecApprovalRequests { get; set; }
        public virtual DbSet<SecApprovalStage> SecApprovalStages { get; set; }
        public virtual DbSet<SecAsset> SecAssets { get; set; }
        public virtual DbSet<SecChangeRequest> SecChangeRequests { get; set; }
        public virtual DbSet<SecCiActive> SecCiActives { get; set; }
        public virtual DbSet<SecCiAll> SecCiAlls { get; set; }
        public virtual DbSet<SecComputer> SecComputers { get; set; }
        public virtual DbSet<SecConfiguration> SecConfigurations { get; set; }
        public virtual DbSet<SecConsumable> SecConsumables { get; set; }
        public virtual DbSet<SecContract> SecContracts { get; set; }
        public virtual DbSet<SecDocument> SecDocuments { get; set; }
        public virtual DbSet<SecHardware> SecHardwares { get; set; }
        public virtual DbSet<SecIncident> SecIncidents { get; set; }
        public virtual DbSet<SecKbArticle> SecKbArticles { get; set; }
        public virtual DbSet<SecLibrary> SecLibraries { get; set; }
        public virtual DbSet<SecNetwork> SecNetworks { get; set; }
        public virtual DbSet<SecOrganizationalUnit> SecOrganizationalUnits { get; set; }
        public virtual DbSet<SecPerson> SecPersons { get; set; }
        public virtual DbSet<SecPo> SecPos { get; set; }
        public virtual DbSet<SecProblem> SecProblems { get; set; }
        public virtual DbSet<SecProduct> SecProducts { get; set; }
        public virtual DbSet<SecProject> SecProjects { get; set; }
        public virtual DbSet<SecReservation> SecReservations { get; set; }
        public virtual DbSet<SecService> SecServices { get; set; }
        public virtual DbSet<SecServiceCatalogItem> SecServiceCatalogItems { get; set; }
        public virtual DbSet<SecServiceRequest> SecServiceRequests { get; set; }
        public virtual DbSet<SecSla> SecSlas { get; set; }
        public virtual DbSet<SecSoftwareLicense> SecSoftwareLicenses { get; set; }
        public virtual DbSet<SecStockRule> SecStockRules { get; set; }
        public virtual DbSet<SecTrackedSoftware> SecTrackedSoftwares { get; set; }
        public virtual DbSet<SecVendor> SecVendors { get; set; }
        public virtual DbSet<SecWorkOrder> SecWorkOrders { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceCatalogItem> ServiceCatalogItems { get; set; }
        public virtual DbSet<ServiceCatalogItemList> ServiceCatalogItemLists { get; set; }
        public virtual DbSet<ServiceCatalogItemListActive> ServiceCatalogItemListActives { get; set; }
        public virtual DbSet<ServiceLevel> ServiceLevels { get; set; }
        public virtual DbSet<ServiceList> ServiceLists { get; set; }
        public virtual DbSet<ServiceListActive> ServiceListActives { get; set; }
        public virtual DbSet<ServiceReceiversList> ServiceReceiversLists { get; set; }
        public virtual DbSet<ServiceRequest> ServiceRequests { get; set; }
        public virtual DbSet<ServiceRequestFulfillment> ServiceRequestFulfillments { get; set; }
        public virtual DbSet<ServiceRequestFulfillmentList> ServiceRequestFulfillmentLists { get; set; }
        public virtual DbSet<ServiceRequestFulfillmentListActive> ServiceRequestFulfillmentListActives { get; set; }
        public virtual DbSet<ServiceRequestList> ServiceRequestLists { get; set; }
        public virtual DbSet<ServiceRequestListActive> ServiceRequestListActives { get; set; }
        public virtual DbSet<SharedViewListSummary> SharedViewListSummaries { get; set; }
        public virtual DbSet<Sla> Slas { get; set; }
        public virtual DbSet<SlaList> SlaLists { get; set; }
        public virtual DbSet<SlaListActive> SlaListActives { get; set; }
        public virtual DbSet<SlaReceiversList> SlaReceiversLists { get; set; }
        public virtual DbSet<SoftPlatform> SoftPlatforms { get; set; }
        public virtual DbSet<SoftProduct> SoftProducts { get; set; }
        public virtual DbSet<SoftProductList> SoftProductLists { get; set; }
        public virtual DbSet<SoftProductListActive> SoftProductListActives { get; set; }
        public virtual DbSet<SoftProductSummary> SoftProductSummaries { get; set; }
        public virtual DbSet<SoftwareLicense> SoftwareLicenses { get; set; }
        public virtual DbSet<SoftwareLicenseComputer> SoftwareLicenseComputers { get; set; }
        public virtual DbSet<SoftwareLicenseList> SoftwareLicenseLists { get; set; }
        public virtual DbSet<SoftwareLicenseListActive> SoftwareLicenseListActives { get; set; }
        public virtual DbSet<SoftwareLicenseLocation> SoftwareLicenseLocations { get; set; }
        public virtual DbSet<SoftwareLicenseOrganization> SoftwareLicenseOrganizations { get; set; }
        public virtual DbSet<SoftwareLicensePolicy> SoftwareLicensePolicies { get; set; }
        public virtual DbSet<SoftwareLicenseRule> SoftwareLicenseRules { get; set; }
        public virtual DbSet<SoftwareProductCategory> SoftwareProductCategories { get; set; }
        public virtual DbSet<SoftwareProductGroup> SoftwareProductGroups { get; set; }
        public virtual DbSet<SoftwareVendor> SoftwareVendors { get; set; }
        public virtual DbSet<SolutionList> SolutionLists { get; set; }
        public virtual DbSet<SolutionListActive> SolutionListActives { get; set; }
        public virtual DbSet<SolutionRating> SolutionRatings { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<StatusView> StatusViews { get; set; }
        public virtual DbSet<StockMovement> StockMovements { get; set; }
        public virtual DbSet<StockMovementList> StockMovementLists { get; set; }
        public virtual DbSet<StockMovementReason> StockMovementReasons { get; set; }
        public virtual DbSet<StockMovementReasonsActive> StockMovementReasonsActives { get; set; }
        public virtual DbSet<StockRoom> StockRooms { get; set; }
        public virtual DbSet<StockRoomList> StockRoomLists { get; set; }
        public virtual DbSet<StockRoomMovementList> StockRoomMovementLists { get; set; }
        public virtual DbSet<StockRule> StockRules { get; set; }
        public virtual DbSet<StockRuleList> StockRuleLists { get; set; }
        public virtual DbSet<StockRuleListActive> StockRuleListActives { get; set; }
        public virtual DbSet<SubWorkOrderSummary> SubWorkOrderSummaries { get; set; }
        public virtual DbSet<SystemImage> SystemImages { get; set; }
        public virtual DbSet<TechnicianList> TechnicianLists { get; set; }
        public virtual DbSet<ThresholdAction> ThresholdActions { get; set; }
        public virtual DbSet<TicketClosureCode> TicketClosureCodes { get; set; }
        public virtual DbSet<TicketClosureCodeActive> TicketClosureCodeActives { get; set; }
        public virtual DbSet<TicketClosureCodeView> TicketClosureCodeViews { get; set; }
        public virtual DbSet<TicketImpact> TicketImpacts { get; set; }
        public virtual DbSet<TicketImpactActive> TicketImpactActives { get; set; }
        public virtual DbSet<TicketList> TicketLists { get; set; }
        public virtual DbSet<TicketListActive> TicketListActives { get; set; }
        public virtual DbSet<TicketMedium> TicketMedia { get; set; }
        public virtual DbSet<TicketMediumActive> TicketMediumActives { get; set; }
        public virtual DbSet<TicketOverdueList> TicketOverdueLists { get; set; }
        public virtual DbSet<TicketPriority> TicketPriorities { get; set; }
        public virtual DbSet<TicketPriorityActive> TicketPriorityActives { get; set; }
        public virtual DbSet<TicketUrgency> TicketUrgencies { get; set; }
        public virtual DbSet<TicketUrgencyActive> TicketUrgencyActives { get; set; }
        public virtual DbSet<TicketsAll> TicketsAlls { get; set; }
        public virtual DbSet<TicketsByRelatedCiSummary> TicketsByRelatedCiSummaries { get; set; }
        public virtual DbSet<TicketsView> TicketsViews { get; set; }
        public virtual DbSet<TicketsViewActive> TicketsViewActives { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<TrackedSoftware> TrackedSoftwares { get; set; }
        public virtual DbSet<TrackedSoftwareList> TrackedSoftwareLists { get; set; }
        public virtual DbSet<TrackedSoftwareListActive> TrackedSoftwareListActives { get; set; }
        public virtual DbSet<TriggerOnConditionLog> TriggerOnConditionLogs { get; set; }
        public virtual DbSet<UnitOfMeasureListActive> UnitOfMeasureListActives { get; set; }
        public virtual DbSet<UnitsOfMeasure> UnitsOfMeasures { get; set; }
        public virtual DbSet<UnitsOfMeasureActive> UnitsOfMeasureActives { get; set; }
        public virtual DbSet<UnitsOfMeasureList> UnitsOfMeasureLists { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<UserAccountList> UserAccountLists { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserGroupList> UserGroupLists { get; set; }
        public virtual DbSet<UserGroupListActive> UserGroupListActives { get; set; }
        public virtual DbSet<UserGroupListTechnician> UserGroupListTechnicians { get; set; }
        public virtual DbSet<UserGroupMemberList> UserGroupMemberLists { get; set; }
        public virtual DbSet<UserSession> UserSessions { get; set; }
        public virtual DbSet<UserSessionLog> UserSessionLogs { get; set; }
        public virtual DbSet<UserSessionLogView> UserSessionLogViews { get; set; }
        public virtual DbSet<UserSessionsView> UserSessionsViews { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorList> VendorLists { get; set; }
        public virtual DbSet<VendorListActive> VendorListActives { get; set; }
        public virtual DbSet<VendorProduct> VendorProducts { get; set; }
        public virtual DbSet<VendorProductList> VendorProductLists { get; set; }
        public virtual DbSet<VendorProductListActive> VendorProductListActives { get; set; }
        public virtual DbSet<VotingMethod> VotingMethods { get; set; }
        public virtual DbSet<WorkCalendar> WorkCalendars { get; set; }
        public virtual DbSet<WorkCalendarExcList> WorkCalendarExcLists { get; set; }
        public virtual DbSet<WorkCalendarExcPersonal> WorkCalendarExcPersonals { get; set; }
        public virtual DbSet<WorkCalendarException> WorkCalendarExceptions { get; set; }
        public virtual DbSet<WorkCalendarExceptionCategory> WorkCalendarExceptionCategories { get; set; }
        public virtual DbSet<WorkCalendarHour> WorkCalendarHours { get; set; }
        public virtual DbSet<WorkCalendarItem> WorkCalendarItems { get; set; }
        public virtual DbSet<WorkCalendarItemList> WorkCalendarItemLists { get; set; }
        public virtual DbSet<WorkCalendarParent> WorkCalendarParents { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkOrderChildList> WorkOrderChildLists { get; set; }
        public virtual DbSet<WorkOrderList> WorkOrderLists { get; set; }
        public virtual DbSet<WorkOrderListActive> WorkOrderListActives { get; set; }
        public virtual DbSet<XxActivityCount> XxActivityCounts { get; set; }
        public virtual DbSet<XxAlloyTimeCheckReport> XxAlloyTimeCheckReports { get; set; }
        public virtual DbSet<XxIncidentWorkorderActivityList> XxIncidentWorkorderActivityLists { get; set; }
        public virtual DbSet<XxIncidentWorkorderActivityListDetails250> XxIncidentWorkorderActivityListDetails250s { get; set; }
        public virtual DbSet<XxIncidentWorkorderActivityListV6> XxIncidentWorkorderActivityListV6s { get; set; }
        public virtual DbSet<XxIncidentWorkorderActivityListV61> XxIncidentWorkorderActivityListV61s { get; set; }
        public virtual DbSet<XxIncidentWorkorderActivityListV62> XxIncidentWorkorderActivityListV62s { get; set; }
        public virtual DbSet<XxIncidentWorkorderActivityListV63> XxIncidentWorkorderActivityListV63s { get; set; }
        public virtual DbSet<XxIncidentWorkorderActivityListV6320170510> XxIncidentWorkorderActivityListV6320170510s { get; set; }
        public virtual DbSet<XxIncidentWorkorderActivityListWithNotesV1> XxIncidentWorkorderActivityListWithNotesV1s { get; set; }
        public virtual DbSet<XxIncidentsWorkOrdersAll> XxIncidentsWorkOrdersAlls { get; set; }
        public virtual DbSet<XxIncidentsWorkOrdersAllV1> XxIncidentsWorkOrdersAllV1s { get; set; }
        public virtual DbSet<XxItDepartmentReport> XxItDepartmentReports { get; set; }
        public virtual DbSet<XxItPersonListActive> XxItPersonListActives { get; set; }
        public virtual DbSet<XxItSpPrReport> XxItSpPrReports { get; set; }
        public virtual DbSet<XxItSpPrReportTest> XxItSpPrReportTests { get; set; }
        public virtual DbSet<XxPeopleList> XxPeopleLists { get; set; }
        public virtual DbSet<XxPoliceTicketLookup> XxPoliceTicketLookups { get; set; }
        public virtual DbSet<XxPoliceTicketsLastActivity> XxPoliceTicketsLastActivities { get; set; }
        public virtual DbSet<XxPoliceTicketsLastActivityWithResolution> XxPoliceTicketsLastActivityWithResolutions { get; set; }
        public virtual DbSet<XxPoliceTicketsLastActivityWithResolutionV6> XxPoliceTicketsLastActivityWithResolutionV6s { get; set; }
        public virtual DbSet<XxPoliceTicketsOlderThan30day> XxPoliceTicketsOlderThan30days { get; set; }
        public virtual DbSet<XxProjectList> XxProjectLists { get; set; }
        public virtual DbSet<XxProjectListDetail> XxProjectListDetails { get; set; }
        public virtual DbSet<XxProjectListOpen> XxProjectListOpens { get; set; }
        public virtual DbSet<XxProjectListOpenDetail> XxProjectListOpenDetails { get; set; }
        public virtual DbSet<XxProjectListOpenNew> XxProjectListOpenNews { get; set; }
        public virtual DbSet<XxTest> XxTests { get; set; }
        public virtual DbSet<XxTicketLookup> XxTicketLookups { get; set; }
        public virtual DbSet<XxTicketSummaryNoActivity> XxTicketSummaryNoActivities { get; set; }
        public virtual DbSet<XxTicketSummaryWithActivity> XxTicketSummaryWithActivities { get; set; }
        public virtual DbSet<XxUltimateTicketLookup> XxUltimateTicketLookups { get; set; }
        public virtual DbSet<XxUltimateTicketLookupV6> XxUltimateTicketLookupV6s { get; set; }
        public virtual DbSet<XxsaActivityList> XxsaActivityLists { get; set; }
        public virtual DbSet<XxsaAllTicketList> XxsaAllTicketLists { get; set; }
        public virtual DbSet<XxsaCfgSecurityAction> XxsaCfgSecurityActions { get; set; }
        public virtual DbSet<XxsaCfgTicketsAllActiveNoSec> XxsaCfgTicketsAllActiveNoSecs { get; set; }
        public virtual DbSet<XxsaHistory> XxsaHistories { get; set; }
        public virtual DbSet<XxsaHistory3> XxsaHistory3s { get; set; }
        public virtual DbSet<XxsaObjectCategoryDescendent> XxsaObjectCategoryDescendents { get; set; }
        public virtual DbSet<XxsaObjectCategoryDescendentsActive> XxsaObjectCategoryDescendentsActives { get; set; }
        public virtual DbSet<XxsaOrigRequester> XxsaOrigRequesters { get; set; }
        public virtual DbSet<XxsaPersonHolidays3yrWindow> XxsaPersonHolidays3yrWindows { get; set; }
        public virtual DbSet<XxsaPersonLeaveList3yrWindow> XxsaPersonLeaveList3yrWindows { get; set; }
        public virtual DbSet<XxsaProjectListNoSec> XxsaProjectListNoSecs { get; set; }
        public virtual DbSet<XxsaTcData2> XxsaTcData2s { get; set; }
        public virtual DbSet<XxsaTcDatum> XxsaTcData { get; set; }
        public virtual DbSet<XxsaTcDetail> XxsaTcDetails { get; set; }
        public virtual DbSet<XxsaTdxTimeDatum> XxsaTdxTimeData { get; set; }
        public virtual DbSet<XxsaTicketDetail> XxsaTicketDetails { get; set; }
        public virtual DbSet<XxsaTicketList> XxsaTicketLists { get; set; }
        public virtual DbSet<XxsaTicketListActive> XxsaTicketListActives { get; set; }
        public virtual DbSet<XxsaTicketListWithResolution> XxsaTicketListWithResolutions { get; set; }
        public virtual DbSet<XxsaTicketLookupWithActivity> XxsaTicketLookupWithActivities { get; set; }
        public virtual DbSet<XxsaTicketOverdueList> XxsaTicketOverdueLists { get; set; }
        public virtual DbSet<XxsaTicketsAll> XxsaTicketsAlls { get; set; }
        public virtual DbSet<XxsaTicketsAllWithResolution> XxsaTicketsAllWithResolutions { get; set; }
        public virtual DbSet<XxsaTicketsByRelatedCiSummary> XxsaTicketsByRelatedCiSummaries { get; set; }
        public virtual DbSet<XxsaTicketsView> XxsaTicketsViews { get; set; }
        public virtual DbSet<XxsaTicketsViewActive> XxsaTicketsViewActives { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=ProdSql1;Initial Catalog=HelpDeskV7;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<ActiveDirectory>(entity =>
            {
                entity.ToTable("Active_Directories");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DomainName)
                    .HasMaxLength(256)
                    .HasColumnName("Domain_Name");

                entity.Property(e => e.Password).HasMaxLength(255);

                entity.Property(e => e.ServerName)
                    .HasMaxLength(256)
                    .HasColumnName("Server_Name");

                entity.Property(e => e.UseForSsp).HasColumnName("Use_for_SSP");

                entity.Property(e => e.UseSsl).HasColumnName("Use_SSL");

                entity.Property(e => e.UserName)
                    .HasMaxLength(256)
                    .HasColumnName("User_Name");
            });

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("Activity_PK")
                    .IsClustered(false);

                entity.ToTable("Activity");

                entity.HasIndex(e => e.ObjectId, "IDX_Activity_Object");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Activity1).HasColumnName("Activity");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.NewStatus)
                    .HasMaxLength(50)
                    .HasColumnName("New_Status");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.OldStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Old_Status");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.UdfActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Activity_Date");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(60)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.WfActionNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Action_Num");

                entity.Property(e => e.WfItemNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Item_Num");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Activity_FK1");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_Activity_FK1");
            });

            modelBuilder.Entity<ActivityAttachmentList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Activity_Attachment_List");

                entity.Property(e => e.ActivityId).HasColumnName("Activity_ID");

                entity.Property(e => e.AttachmentId).HasColumnName("Attachment_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("File_Name");

                entity.Property(e => e.FileSize).HasColumnName("File_Size");

                entity.Property(e => e.FileType)
                    .HasMaxLength(10)
                    .HasColumnName("File_Type");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFile).HasColumnName("Is_File");

                entity.Property(e => e.LinkCount).HasColumnName("Link_Count");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Activity_List");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NewStatus)
                    .HasMaxLength(50)
                    .HasColumnName("New_Status");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.OldStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Old_Status");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.UdfActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Activity_Date");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(60)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.WfActionNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Action_Num");

                entity.Property(e => e.WfItemNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Item_Num");
            });

            modelBuilder.Entity<ActivitySummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Activity_Summary");

                entity.Property(e => e.LastActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Activity");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");
            });

            modelBuilder.Entity<Address>(entity =>
            {
                entity.ToTable("Address");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Address1).HasColumnName("Address");

                entity.Property(e => e.Contact).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<AddressBilling>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Address_Billing");

                entity.Property(e => e.Contact).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<AddressShipping>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Address_Shipping");

                entity.Property(e => e.Contact).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<AllocatedLicenseList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Allocated_License_List");

                entity.Property(e => e.AllocatedTo)
                    .HasMaxLength(100)
                    .HasColumnName("Allocated_to");

                entity.Property(e => e.AllocationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Allocation_Date");

                entity.Property(e => e.AutoAdded).HasColumnName("Auto_Added");

                entity.Property(e => e.AutoDeallocate).HasColumnName("Auto_Deallocate");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Conformance)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LicenseQty).HasColumnName("License_Qty");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.MasterLicense).HasColumnName("Master_License");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.Reconciled)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");
            });

            modelBuilder.Entity<AllocatedSoftwareProductByObjectSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Allocated_Software_Product_By_Object_Summary");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");
            });

            modelBuilder.Entity<Announcement>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.HighPriority).HasColumnName("High_Priority");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SelfServiceUsers).HasColumnName("Self_Service_Users");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TechnicianUsers).HasColumnName("Technician_Users");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Announcements)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Announcements_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Announcements)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Announcements_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Announcements)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Announcements_FK1");
            });

            modelBuilder.Entity<AnnouncementList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Announcement_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Audience)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.HighPriority).HasColumnName("High_Priority");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SelfServiceUsers).HasColumnName("Self_Service_Users");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TechnicianUsers).HasColumnName("Technician_Users");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<AnnouncementListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Announcement_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Audience)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.HighPriority).HasColumnName("High_Priority");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SelfServiceUsers).HasColumnName("Self_Service_Users");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TechnicianUsers).HasColumnName("Technician_Users");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ApprovalRequest>(entity =>
            {
                entity.ToTable("Approval_Requests");

                entity.HasIndex(e => e.ApprovalStageId, "IDX_Approval_Requests_Stage");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ApprovalStageId).HasColumnName("Approval_Stage_ID");

                entity.Property(e => e.ApproverId).HasColumnName("Approver_ID");

                entity.Property(e => e.DecisionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Decision_Date");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.ApprovalStage)
                    .WithMany(p => p.ApprovalRequests)
                    .HasForeignKey(d => d.ApprovalStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Approval_Stages_Approval_Requests_FK1");

                entity.HasOne(d => d.Approver)
                    .WithMany(p => p.ApprovalRequests)
                    .HasForeignKey(d => d.ApproverId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_Approval_Requests_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ApprovalRequests)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Approval_Requests_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ApprovalRequests)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Approval_Requests_FK1");
            });

            modelBuilder.Entity<ApprovalRequestList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Approval_Request_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AppliesTo)
                    .HasMaxLength(606)
                    .HasColumnName("Applies_to");

                entity.Property(e => e.ApprovalStageId).HasColumnName("Approval_Stage_ID");

                entity.Property(e => e.Approver).HasMaxLength(276);

                entity.Property(e => e.ApproverId).HasColumnName("Approver_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Class).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.DecisionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Decision_Date");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.Stage).HasMaxLength(100);

                entity.Property(e => e.StageStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Stage_Status");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ApprovalStage>(entity =>
            {
                entity.ToTable("Approval_Stages");

                entity.HasIndex(e => e.ObjectId, "IDX_Approval_Stages_Object");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ApprovalDeadline)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Deadline");

                entity.Property(e => e.ApprovalGroupId).HasColumnName("Approval_Group_ID");

                entity.Property(e => e.ApprovalStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Start_Time");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.MinimumVotePercentage).HasColumnName("Minimum_Vote_Percentage");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.SingleVoteTimeframe).HasColumnName("Single_Vote_Timeframe");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.ApprovalGroup)
                    .WithMany(p => p.ApprovalStages)
                    .HasForeignKey(d => d.ApprovalGroupId)
                    .HasConstraintName("User_Groups_Approval_Stages_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ApprovalStages)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Approval_Stages_FK1");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.ApprovalStages)
                    .HasForeignKey(d => d.ObjectId)
                    .HasConstraintName("Object_Index_Approval_Stages_FK1");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.ApprovalStages)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("Persons_Approval_Stages_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ApprovalStages)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Approval_Stages_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ApprovalStages)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Approval_Stages_FK1");
            });

            modelBuilder.Entity<ApprovalStageList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Approval_Stage_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ApprovalDeadline)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Deadline");

                entity.Property(e => e.ApprovalGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Approval_Group");

                entity.Property(e => e.ApprovalGroupId).HasColumnName("Approval_Group_ID");

                entity.Property(e => e.ApprovalStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Start_Time");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.MinimumVotePercentage).HasColumnName("Minimum_Vote_Percentage");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Object).HasMaxLength(606);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.SingleVoteTimeframe).HasColumnName("Single_Vote_Timeframe");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ApprovalStageListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Approval_Stage_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ApprovalDeadline)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Deadline");

                entity.Property(e => e.ApprovalGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Approval_Group");

                entity.Property(e => e.ApprovalGroupId).HasColumnName("Approval_Group_ID");

                entity.Property(e => e.ApprovalStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Start_Time");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.MinimumVotePercentage).HasColumnName("Minimum_Vote_Percentage");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Object).HasMaxLength(606);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.SingleVoteTimeframe).HasColumnName("Single_Vote_Timeframe");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ArchivingLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Archiving_Log");

                entity.Property(e => e.ArchiveDatabase)
                    .HasMaxLength(256)
                    .HasColumnName("Archive_Database");

                entity.Property(e => e.Comments).HasMaxLength(1024);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.JobName)
                    .HasMaxLength(310)
                    .HasColumnName("Job_Name");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Upload_Date");
            });

            modelBuilder.Entity<AspNetSqlCacheTablesForChangeNotification>(entity =>
            {
                entity.ToTable("AspNet_SqlCacheTablesForChangeNotification");

                entity.HasIndex(e => e.TableName, "IDX_AspNet_SqlCacheTablesForChangeNotification_TableName")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ChangeId).HasColumnName("changeId");

                entity.Property(e => e.NotificationCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("notificationCreated");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasColumnName("tableName");
            });

            modelBuilder.Entity<Asset>(entity =>
            {
                entity.HasIndex(e => e.AssociatedCiId, "IDX_Assets_Associated_CI_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AssociatedCiId).HasColumnName("Associated_CI_ID");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethodId).HasColumnName("Depreciation_Method_ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoItemId).HasColumnName("PO_Item_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");

                entity.HasOne(d => d.AssociatedCi)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.AssociatedCiId)
                    .HasConstraintName("Object_Index_Assets_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Assets_FK1");

                entity.HasOne(d => d.DepreciationMethod)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.DepreciationMethodId)
                    .HasConstraintName("Depreciation_Methods_Assets_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Assets_FK1");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("Brands_Assets_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Assets_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Assets_FK1");

                entity.HasOne(d => d.PoItem)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.PoItemId)
                    .HasConstraintName("PO_Items_Assets_FK1");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("Products_Assets_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Assets_FK1");

                entity.HasOne(d => d.StockRoom)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.StockRoomId)
                    .HasConstraintName("Stock_Rooms_Assets_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Assets_FK1");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("Vendors_Assets_FK1");
            });

            modelBuilder.Entity<AssetIpAddressList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Asset_IP_Address_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(100);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.IpAddressId).HasColumnName("IP_Address_ID");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<AssetList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Asset_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AssociatedCi)
                    .HasMaxLength(276)
                    .HasColumnName("Associated_CI");

                entity.Property(e => e.AssociatedCiClassId).HasColumnName("Associated_CI_Class_ID");

                entity.Property(e => e.AssociatedCiId).HasColumnName("Associated_CI_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.DepreciationMethodId).HasColumnName("Depreciation_Method_ID");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoItemId).HasColumnName("PO_Item_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<AssetListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Asset_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AssociatedCi)
                    .HasMaxLength(276)
                    .HasColumnName("Associated_CI");

                entity.Property(e => e.AssociatedCiClassId).HasColumnName("Associated_CI_Class_ID");

                entity.Property(e => e.AssociatedCiId).HasColumnName("Associated_CI_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.DepreciationMethodId).HasColumnName("Depreciation_Method_ID");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoItemId).HasColumnName("PO_Item_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<AssetVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Asset_Vendors");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");
            });

            modelBuilder.Entity<Attachment>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("Attachments_PK")
                    .IsClustered(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("File_Name");

                entity.Property(e => e.FileSize).HasColumnName("File_Size");

                entity.Property(e => e.FileType)
                    .HasMaxLength(10)
                    .HasColumnName("File_Type");

                entity.Property(e => e.IsFile).HasColumnName("Is_File");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedById).HasColumnName("Modified_by_ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");
            });

            modelBuilder.Entity<AttachmentObjectsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Attachment_Objects_List");

                entity.Property(e => e.ActivityNum).HasColumnName("Activity_Num");

                entity.Property(e => e.AttachmentId).HasColumnName("Attachment_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FileType)
                    .HasMaxLength(10)
                    .HasColumnName("File_Type");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFile).HasColumnName("Is_File");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");
            });

            modelBuilder.Entity<AttachmentSelectList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Attachment_Select_List");

                entity.Property(e => e.AttachmentType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Attachment_Type");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("File_Name");

                entity.Property(e => e.FileSize).HasColumnName("File_Size");

                entity.Property(e => e.FileType)
                    .HasMaxLength(10)
                    .HasColumnName("File_Type");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFile).HasColumnName("Is_File");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedById).HasColumnName("Modified_by_ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.ObjectClass)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Object_Class");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.ObjectStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Object_Status");

                entity.Property(e => e.ObjectType)
                    .HasMaxLength(50)
                    .HasColumnName("Object_Type");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<AttachmentsSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Attachments_Summary");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.TotalSize).HasColumnName("Total_Size");
            });

            modelBuilder.Entity<Brand>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Brand1)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("Brand");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Brands)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Brands_FK1");
            });

            modelBuilder.Entity<BrandActiveList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Brand_Active_List");

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<BrandList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Brand_List");

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<Budget>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Budget1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Budget");

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<BudgetList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Budget_List");

                entity.Property(e => e.Budget)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<CfgAdjobOption>(entity =>
            {
                entity.ToTable("cfgADJobOptions");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActiveDirectoryId).HasColumnName("Active_Directory_ID");

                entity.Property(e => e.CheckDisabledAccounts).HasColumnName("Check_Disabled_Accounts");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.EmptyEmail).HasColumnName("Empty_EMail");

                entity.Property(e => e.EmptyOffice).HasColumnName("Empty_Office");

                entity.Property(e => e.LdapPath)
                    .HasMaxLength(500)
                    .HasColumnName("LDAP_Path");

                entity.Property(e => e.LocationConstructorId).HasColumnName("Location_Constructor_ID");

                entity.Property(e => e.OuConstructorId).HasColumnName("OU_Constructor_ID");

                entity.Property(e => e.PersonConstructorId).HasColumnName("Person_Constructor_ID");

                entity.Property(e => e.PersonTaskId).HasColumnName("Person_Task_ID");

                entity.Property(e => e.RunAsLogin).HasMaxLength(255);

                entity.Property(e => e.RunAsPassword).HasMaxLength(255);

                entity.Property(e => e.UpperCaseName).HasColumnName("UpperCase_Name");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.HasOne(d => d.ActiveDirectory)
                    .WithMany(p => p.CfgAdjobOptions)
                    .HasForeignKey(d => d.ActiveDirectoryId)
                    .HasConstraintName("cfgADJobOptions_Active_Directories_FK1");

                entity.HasOne(d => d.LocationConstructor)
                    .WithMany(p => p.CfgAdjobOptionLocationConstructors)
                    .HasForeignKey(d => d.LocationConstructorId)
                    .HasConstraintName("cfgLCEvents_cfgADJobOptions_FK3");

                entity.HasOne(d => d.OuConstructor)
                    .WithMany(p => p.CfgAdjobOptionOuConstructors)
                    .HasForeignKey(d => d.OuConstructorId)
                    .HasConstraintName("cfgLCEvents_cfgADJobOptions_FK2");

                entity.HasOne(d => d.PersonConstructor)
                    .WithMany(p => p.CfgAdjobOptionPersonConstructors)
                    .HasForeignKey(d => d.PersonConstructorId)
                    .HasConstraintName("cfgLCEvents_cfgADJobOptions_FK1");

                entity.HasOne(d => d.PersonTask)
                    .WithMany(p => p.CfgAdjobOptionPersonTasks)
                    .HasForeignKey(d => d.PersonTaskId)
                    .HasConstraintName("cfgLCEvents_cfgADJobOptions_FK4");
            });

            modelBuilder.Entity<CfgArchiveDatabase>(entity =>
            {
                entity.ToTable("cfgArchiveDatabases");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.DatabaseName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Database_Name");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.HasOne(d => d.Log)
                    .WithMany(p => p.CfgArchiveDatabases)
                    .HasForeignKey(d => d.LogId)
                    .HasConstraintName("cfgToolLogs_cfgArchiveDatabases_FK1");
            });

            modelBuilder.Entity<CfgArchivingJobOption>(entity =>
            {
                entity.ToTable("cfgArchivingJobOptions");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DataBase)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Login).HasMaxLength(256);

                entity.Property(e => e.Ntauth).HasColumnName("NTAuth");

                entity.Property(e => e.Password).HasMaxLength(255);

                entity.Property(e => e.Server)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<CfgAudit>(entity =>
            {
                entity.ToTable("cfgAudit");

                entity.HasIndex(e => e.ComputerId, "cfgAudit_Computer_ID_Unique")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Audit_Date");

                entity.Property(e => e.ComputerId).HasColumnName("Computer_ID");
            });

            modelBuilder.Entity<CfgCalendarObject>(entity =>
            {
                entity.ToTable("cfgCalendarObjects");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.EndDateField)
                    .HasMaxLength(50)
                    .HasColumnName("End_Date_Field");

                entity.Property(e => e.FilterMode).HasColumnName("Filter_Mode");

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.StartDateField)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Start_Date_Field");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.CfgCalendarObjects)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Class_cfgCalendarObjects_FK1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CfgCalendarObjects)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("Persons_cfgCalendarObjects_FK1");
            });

            modelBuilder.Entity<CfgCustDepend>(entity =>
            {
                entity.ToTable("cfgCustDepends");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ParentName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Parent_Name");

                entity.Property(e => e.ViewName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("View_Name");
            });

            modelBuilder.Entity<CfgCustField>(entity =>
            {
                entity.ToTable("cfgCustFields");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DecimalDigits).HasColumnName("Decimal_Digits");

                entity.Property(e => e.DefaultLabel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Default_Label");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.FieldOrder).HasColumnName("Field_Order");

                entity.Property(e => e.FieldType)
                    .HasMaxLength(1)
                    .HasColumnName("Field_Type");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.LocationIndex).HasColumnName("Location_Index");

                entity.Property(e => e.RefType).HasColumnName("Ref_Type");

                entity.Property(e => e.UserField).HasColumnName("User_Field");
            });

            modelBuilder.Entity<CfgCustFieldLocation>(entity =>
            {
                entity.ToTable("cfgCustFieldLocations");

                entity.HasIndex(e => new { e.LocationIndex, e.TableId }, "IX_CustFieldLocationIndex_Unique")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LocationIndex).HasColumnName("Location_Index");

                entity.Property(e => e.LocationName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Location_Name");

                entity.Property(e => e.TableId).HasColumnName("Table_ID");

                entity.HasOne(d => d.Table)
                    .WithMany(p => p.CfgCustFieldLocations)
                    .HasForeignKey(d => d.TableId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgCustTables_cfgCustFieldLocations_FK1");
            });

            modelBuilder.Entity<CfgCustFieldValue>(entity =>
            {
                entity.ToTable("cfgCustFieldValues");

                entity.HasIndex(e => e.FieldId, "IX_cfgCustFieldValues_Field");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FieldId).HasColumnName("Field_ID");

                entity.Property(e => e.FieldValue)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("Field_Value");

                entity.Property(e => e.Tags).IsRequired();

                entity.HasOne(d => d.Field)
                    .WithMany(p => p.CfgCustFieldValues)
                    .HasForeignKey(d => d.FieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgCustFields_cfgCustFieldValues_FK1");
            });

            modelBuilder.Entity<CfgCustFieldsLabel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgCustFieldsLabels");

                entity.Property(e => e.FieldLabel)
                    .HasMaxLength(50)
                    .HasColumnName("Field_Label");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");
            });

            modelBuilder.Entity<CfgCustFieldsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgCustFieldsList");

                entity.Property(e => e.CustomLabel)
                    .HasMaxLength(50)
                    .HasColumnName("Custom_Label");

                entity.Property(e => e.DecimalDigits).HasColumnName("Decimal_Digits");

                entity.Property(e => e.DefaultLabel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Default_Label");

                entity.Property(e => e.FieldId).HasColumnName("Field_ID");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.FieldNameOriginal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name_Original");

                entity.Property(e => e.FieldOrder).HasColumnName("Field_Order");

                entity.Property(e => e.FieldSize).HasColumnName("Field_Size");

                entity.Property(e => e.FieldType)
                    .HasMaxLength(1)
                    .HasColumnName("Field_Type");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationIndex).HasColumnName("Location_Index");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.Property(e => e.RefCondition)
                    .HasMaxLength(1024)
                    .HasColumnName("Ref_Condition");

                entity.Property(e => e.RefTableName)
                    .HasMaxLength(50)
                    .HasColumnName("Ref_Table_Name");

                entity.Property(e => e.RefType).HasColumnName("Ref_Type");

                entity.Property(e => e.TableId).HasColumnName("Table_ID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");

                entity.Property(e => e.TableXType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Table_xType");

                entity.Property(e => e.UserField).HasColumnName("User_Field");
            });

            modelBuilder.Entity<CfgCustFieldsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgCustFieldsView");

                entity.Property(e => e.CustomLabel)
                    .HasMaxLength(50)
                    .HasColumnName("Custom_Label");

                entity.Property(e => e.DecimalDigits).HasColumnName("Decimal_Digits");

                entity.Property(e => e.DefaultLabel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Default_Label");

                entity.Property(e => e.FieldId).HasColumnName("Field_ID");

                entity.Property(e => e.FieldLabel)
                    .HasMaxLength(50)
                    .HasColumnName("Field_Label");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.FieldOrder).HasColumnName("Field_Order");

                entity.Property(e => e.FieldType)
                    .HasMaxLength(1)
                    .HasColumnName("Field_Type");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationIndex).HasColumnName("Location_Index");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.Property(e => e.RefCondition)
                    .HasMaxLength(1024)
                    .HasColumnName("Ref_Condition");

                entity.Property(e => e.RefDisplayFields)
                    .HasMaxLength(1024)
                    .HasColumnName("Ref_Display_Fields");

                entity.Property(e => e.RefTableId).HasColumnName("Ref_Table_ID");

                entity.Property(e => e.RefTableName)
                    .HasMaxLength(50)
                    .HasColumnName("Ref_Table_Name");

                entity.Property(e => e.RefType).HasColumnName("Ref_Type");

                entity.Property(e => e.TableId).HasColumnName("Table_ID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");

                entity.Property(e => e.TableXType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Table_xType")
                    .IsFixedLength(true);

                entity.Property(e => e.UserField).HasColumnName("User_Field");
            });

            modelBuilder.Entity<CfgCustTable>(entity =>
            {
                entity.ToTable("cfgCustTables");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DisplayFields)
                    .HasMaxLength(1024)
                    .HasColumnName("Display_Fields");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");

                entity.Property(e => e.TableXType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Table_xType")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CfgCustTableField>(entity =>
            {
                entity.ToTable("cfgCustTableFields");

                entity.HasIndex(e => e.FieldId, "IX_cfgCustTableFields_Field");

                entity.HasIndex(e => e.TableId, "IX_cfgCustTableFields_Table");

                entity.HasIndex(e => new { e.FieldId, e.TableId }, "cfgCustTableFields_UC1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CustomLabel)
                    .HasMaxLength(50)
                    .HasColumnName("Custom_Label");

                entity.Property(e => e.FieldId).HasColumnName("Field_ID");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.Property(e => e.RefCondition)
                    .HasMaxLength(1024)
                    .HasColumnName("Ref_Condition");

                entity.Property(e => e.RefTableId).HasColumnName("Ref_Table_ID");

                entity.Property(e => e.TableId).HasColumnName("Table_ID");

                entity.HasOne(d => d.Field)
                    .WithMany(p => p.CfgCustTableFields)
                    .HasForeignKey(d => d.FieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgCustFields_cfgCustTableFields_FK1");

                entity.HasOne(d => d.RefTable)
                    .WithMany(p => p.CfgCustTableFieldRefTables)
                    .HasForeignKey(d => d.RefTableId)
                    .HasConstraintName("cfgCustTables_cfgCustTableFields_FK2");

                entity.HasOne(d => d.Table)
                    .WithMany(p => p.CfgCustTableFieldTables)
                    .HasForeignKey(d => d.TableId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgCustTables_cfgCustTableFields_FK1");
            });

            modelBuilder.Entity<CfgDashboard>(entity =>
            {
                entity.ToTable("cfgDashboards");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.BaseDashboardId).HasColumnName("Base_Dashboard_ID");

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.BaseDashboard)
                    .WithMany(p => p.InverseBaseDashboard)
                    .HasForeignKey(d => d.BaseDashboardId)
                    .HasConstraintName("cfgDashboards_cfgDashboards_FK1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CfgDashboards)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("Persons_cfgDashboards_FK1");
            });

            modelBuilder.Entity<CfgDashboardLayout>(entity =>
            {
                entity.ToTable("cfgDashboardLayouts");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.LayoutImage)
                    .HasColumnType("xml")
                    .HasColumnName("Layout_Image");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CfgDashboardLayoutList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgDashboardLayout_List");

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LayoutImage)
                    .HasColumnType("xml")
                    .HasColumnName("Layout_Image");

                entity.Property(e => e.LayoutName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Layout_Name");
            });

            modelBuilder.Entity<CfgDashboardList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgDashboard_List");

                entity.Property(e => e.DashboardName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Dashboard_Name");

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RoleCount).HasColumnName("Role_Count");
            });

            modelBuilder.Entity<CfgDashboardMember>(entity =>
            {
                entity.ToTable("cfgDashboardMembers");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DashboardId).HasColumnName("Dashboard_ID");

                entity.Property(e => e.PanelId).HasColumnName("Panel_ID");

                entity.Property(e => e.WidgetId).HasColumnName("Widget_ID");

                entity.HasOne(d => d.Dashboard)
                    .WithMany(p => p.CfgDashboardMembers)
                    .HasForeignKey(d => d.DashboardId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgDashboards_cfgDashboardMembers_FK1");

                entity.HasOne(d => d.Widget)
                    .WithMany(p => p.CfgDashboardMembers)
                    .HasForeignKey(d => d.WidgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgDashboardWidgets_cfgDashboardMembers_FK1");
            });

            modelBuilder.Entity<CfgDashboardMembersList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgDashboardMembers_List");

                entity.Property(e => e.DashboardId).HasColumnName("Dashboard_ID");

                entity.Property(e => e.DashboardName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Dashboard_Name");

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(276);

                entity.Property(e => e.PanelId).HasColumnName("Panel_ID");

                entity.Property(e => e.Title).HasMaxLength(600);

                entity.Property(e => e.Type)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.WidgetId).HasColumnName("Widget_ID");
            });

            modelBuilder.Entity<CfgDashboardWidget>(entity =>
            {
                entity.ToTable("cfgDashboardWidgets");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(276);
            });

            modelBuilder.Entity<CfgDashboardWidgetsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgDashboardWidgets_List");

                entity.Property(e => e.DashboardsCount).HasColumnName("Dashboards_Count");

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(276);

                entity.Property(e => e.Title).HasMaxLength(600);

                entity.Property(e => e.Type)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<CfgDashboardWidgetsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgDashboardWidgets_View");

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(276);

                entity.Property(e => e.Title).HasMaxLength(600);

                entity.Property(e => e.Type)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<CfgDisabledView>(entity =>
            {
                entity.ToTable("cfgDisabledViews");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.ViewId).HasColumnName("View_ID");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CfgDisabledViews)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_cfgDisabledViews_FK1");

                entity.HasOne(d => d.View)
                    .WithMany(p => p.CfgDisabledViews)
                    .HasForeignKey(d => d.ViewId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgViews_cfgDisabledViews_FK1");
            });

            modelBuilder.Entity<CfgDscjobOption>(entity =>
            {
                entity.ToTable("cfgDSCJobOptions");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ComputerConstructorId).HasColumnName("Computer_Constructor_ID");

                entity.Property(e => e.ComputerTaskId).HasColumnName("Computer_Task_ID");

                entity.Property(e => e.DataBase)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.HardwareConstructorId).HasColumnName("Hardware_Constructor_ID");

                entity.Property(e => e.HardwareTaskId).HasColumnName("Hardware_Task_ID");

                entity.Property(e => e.LocationConstructorId).HasColumnName("Location_Constructor_ID");

                entity.Property(e => e.Login).HasMaxLength(256);

                entity.Property(e => e.Ntauth).HasColumnName("NTAuth");

                entity.Property(e => e.OuConstructorId).HasColumnName("OU_Constructor_ID");

                entity.Property(e => e.Password).HasMaxLength(255);

                entity.Property(e => e.PersonConstructorId).HasColumnName("Person_Constructor_ID");

                entity.Property(e => e.ProductsLastSync)
                    .HasColumnType("datetime")
                    .HasColumnName("Products_Last_Sync");

                entity.Property(e => e.RetiredAction).HasColumnName("Retired_Action");

                entity.Property(e => e.Server)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.ComputerConstructor)
                    .WithMany(p => p.CfgDscjobOptionComputerConstructors)
                    .HasForeignKey(d => d.ComputerConstructorId)
                    .HasConstraintName("cfgLCEvents_cfgDSCJobOptions_FK1");

                entity.HasOne(d => d.ComputerTask)
                    .WithMany(p => p.CfgDscjobOptionComputerTasks)
                    .HasForeignKey(d => d.ComputerTaskId)
                    .HasConstraintName("cfgLCEvents_cfgDSCJobOptions_FK5");

                entity.HasOne(d => d.HardwareConstructor)
                    .WithMany(p => p.CfgDscjobOptionHardwareConstructors)
                    .HasForeignKey(d => d.HardwareConstructorId)
                    .HasConstraintName("cfgLCEvents_cfgDSCJobOptions_FK6");

                entity.HasOne(d => d.HardwareTask)
                    .WithMany(p => p.CfgDscjobOptionHardwareTasks)
                    .HasForeignKey(d => d.HardwareTaskId)
                    .HasConstraintName("cfgLCEvents_cfgDSCJobOptions_FK7");

                entity.HasOne(d => d.LocationConstructor)
                    .WithMany(p => p.CfgDscjobOptionLocationConstructors)
                    .HasForeignKey(d => d.LocationConstructorId)
                    .HasConstraintName("cfgLCEvents_cfgDSCJobOptions_FK4");

                entity.HasOne(d => d.OuConstructor)
                    .WithMany(p => p.CfgDscjobOptionOuConstructors)
                    .HasForeignKey(d => d.OuConstructorId)
                    .HasConstraintName("cfgLCEvents_cfgDSCJobOptions_FK3");

                entity.HasOne(d => d.PersonConstructor)
                    .WithMany(p => p.CfgDscjobOptionPersonConstructors)
                    .HasForeignKey(d => d.PersonConstructorId)
                    .HasConstraintName("cfgLCEvents_cfgDSCJobOptions_FK2");
            });

            modelBuilder.Entity<CfgEmailAttachment>(entity =>
            {
                entity.ToTable("cfgEmailAttachments");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AttachmentId).HasColumnName("Attachment_ID");

                entity.Property(e => e.EmailId).HasColumnName("Email_ID");

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.CfgEmailAttachments)
                    .HasForeignKey(d => d.AttachmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Attachments_cfgEmailAttachments_FK1");

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.CfgEmailAttachments)
                    .HasForeignKey(d => d.EmailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgEmailQueue_cfgEmailAttachments_FK1");
            });

            modelBuilder.Entity<CfgEmailQueue>(entity =>
            {
                entity.ToTable("cfgEmailQueue");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ContentType).HasColumnName("Content_Type");

                entity.Property(e => e.ExecutorId)
                    .HasMaxLength(100)
                    .HasColumnName("ExecutorID");

                entity.Property(e => e.Host).HasMaxLength(255);

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.QueueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Queue_Date");

                entity.Property(e => e.SendBcc).HasColumnName("SendBCC");

                entity.Property(e => e.SendCc).HasColumnName("SendCC");

                entity.Property(e => e.SendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Send_Date");

                entity.Property(e => e.SendError).HasColumnName("Send_Error");
            });

            modelBuilder.Entity<CfgEmailTemplate>(entity =>
            {
                entity.ToTable("cfgEmailTemplates");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CfgId>(entity =>
            {
                entity.ToTable("cfgID");

                entity.HasIndex(e => e.Name, "cfgIds_Name_Unq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LastId).HasColumnName("Last_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CfgImportObjectRename>(entity =>
            {
                entity.ToTable("cfgImportObjectRename");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.NewId).HasColumnName("New_ID");

                entity.Property(e => e.OldId).HasColumnName("Old_ID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<CfgImportOid>(entity =>
            {
                entity.ToTable("cfgImportOID");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Oid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OID");

                entity.Property(e => e.OldId).HasColumnName("Old_ID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<CfgInfo>(entity =>
            {
                entity.ToTable("cfgInfo");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CfgInstaller>(entity =>
            {
                entity.ToTable("cfgInstaller");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Data).IsRequired();
            });

            modelBuilder.Entity<CfgInvLoadConflict>(entity =>
            {
                entity.ToTable("cfgInvLoadConflicts");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AdtComputerName)
                    .HasMaxLength(50)
                    .HasColumnName("ADT_Computer_Name");

                entity.Property(e => e.AuditId).HasColumnName("Audit_ID");

                entity.Property(e => e.ConflictStatus).HasColumnName("Conflict_Status");

                entity.Property(e => e.ResolutionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Resolution_Date");

                entity.Property(e => e.SessionId).HasColumnName("Session_ID");
            });

            modelBuilder.Entity<CfgInvLoadConflictField>(entity =>
            {
                entity.ToTable("cfgInvLoadConflictFields");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AdtFieldValue)
                    .HasMaxLength(50)
                    .HasColumnName("ADT_Field_Value");

                entity.Property(e => e.ConflictMemberId).HasColumnName("Conflict_Member_ID");

                entity.Property(e => e.DbFieldValue)
                    .HasMaxLength(50)
                    .HasColumnName("DB_Field_Value");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name");

                entity.HasOne(d => d.ConflictMember)
                    .WithMany(p => p.CfgInvLoadConflictFields)
                    .HasForeignKey(d => d.ConflictMemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgInvLoadConflictMembers_cfgInvLoadConflictFields_FK1");
            });

            modelBuilder.Entity<CfgInvLoadConflictMember>(entity =>
            {
                entity.ToTable("cfgInvLoadConflictMembers");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ComputerId).HasColumnName("Computer_ID");

                entity.Property(e => e.ConflictId).HasColumnName("Conflict_ID");

                entity.Property(e => e.DbComputerName)
                    .HasMaxLength(50)
                    .HasColumnName("DB_Computer_Name");

                entity.Property(e => e.DetectedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Detected_Date");

                entity.Property(e => e.NewComputer).HasColumnName("New_Computer");

                entity.Property(e => e.SchedulingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduling_Date");

                entity.HasOne(d => d.Conflict)
                    .WithMany(p => p.CfgInvLoadConflictMembers)
                    .HasForeignKey(d => d.ConflictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgInvLoadConflicts_cfgInvLoadConflictMembers_FK1");
            });

            modelBuilder.Entity<CfgInvLoadConflictPolicy>(entity =>
            {
                entity.ToTable("cfgInvLoadConflictPolicies");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Caption).HasMaxLength(200);

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("cfgInvLoadConflictPolicies_cfgInvLoadConflictPolicies_FK1");
            });

            modelBuilder.Entity<CfgJob>(entity =>
            {
                entity.ToTable("cfgJobs");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.JobType).HasColumnName("Job_Type");

                entity.Property(e => e.LastRunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Run_Date");

                entity.Property(e => e.LastRunStatus).HasColumnName("Last_Run_Status");

                entity.Property(e => e.LogLevel).HasColumnName("Log_Level");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(310);

                entity.Property(e => e.NextRunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Next_Run_Date");

                entity.Property(e => e.RunAsap).HasColumnName("Run_ASAP");

                entity.Property(e => e.Schedule)
                    .IsRequired()
                    .HasMaxLength(1024);

                entity.Property(e => e.ScheduleText)
                    .HasMaxLength(1024)
                    .HasColumnName("Schedule_Text");
            });

            modelBuilder.Entity<CfgJobHistory>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("cfgJobHistory_PK")
                    .IsClustered(false);

                entity.ToTable("cfgJobHistory");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.LastRunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Run_Date");

                entity.Property(e => e.LastRunStatus).HasColumnName("Last_Run_Status");

                entity.Property(e => e.ObjectCount).HasColumnName("Object_Count");

                entity.Property(e => e.RunDuration).HasColumnName("Run_Duration");

                entity.Property(e => e.RunRemark)
                    .HasMaxLength(1024)
                    .HasColumnName("Run_Remark");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.CfgJobHistories)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgJobs_cfgJobHistory_FK1");
            });

            modelBuilder.Entity<CfgJobList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgJobList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobType).HasColumnName("Job_Type");

                entity.Property(e => e.LogLevel).HasColumnName("Log_Level");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(310);

                entity.Property(e => e.RunAsLogin).HasMaxLength(255);

                entity.Property(e => e.RunAsPassword).HasMaxLength(255);

                entity.Property(e => e.RunAsap).HasColumnName("Run_ASAP");
            });

            modelBuilder.Entity<CfgJobListView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgJobListView");

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobType).HasColumnName("Job_Type");

                entity.Property(e => e.LastRunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Run_Date");

                entity.Property(e => e.LastRunStatus).HasColumnName("Last_Run_Status");

                entity.Property(e => e.LogLevel).HasColumnName("Log_Level");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(310);

                entity.Property(e => e.Name2).HasMaxLength(613);

                entity.Property(e => e.NextRunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Next_Run_Date");

                entity.Property(e => e.RunAsap).HasColumnName("Run_ASAP");

                entity.Property(e => e.Schedule)
                    .IsRequired()
                    .HasMaxLength(1024);

                entity.Property(e => e.ScheduleText)
                    .HasMaxLength(1024)
                    .HasColumnName("Schedule_Text");
            });

            modelBuilder.Entity<CfgKbCategoryLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgKB_Category_Level");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");
            });

            modelBuilder.Entity<CfgKbCategoryParent>(entity =>
            {
                entity.ToTable("cfgKB_Category_Parents");

                entity.HasIndex(e => e.ChildId, "IX_cfgKB_Category_Parents_Child");

                entity.HasIndex(e => e.ParentId, "IX_cfgKB_Category_Parents_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.CfgKbCategoryParentChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("KB_Category_cfgKB_Category_Parents_FK2");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.CfgKbCategoryParentParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("KB_Category_cfgKB_Category_Parents_FK1");
            });

            modelBuilder.Entity<CfgLcactionFormList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCActionFormList");

                entity.Property(e => e.FieldCount).HasColumnName("Field_Count");

                entity.Property(e => e.FormCaption)
                    .HasMaxLength(200)
                    .HasColumnName("Form_Caption");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.UsageCount).HasColumnName("Usage_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");

                entity.Property(e => e.WindowStyle)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Window_Style");
            });

            modelBuilder.Entity<CfgLcactionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCActionList");

                entity.Property(e => e.Caption).HasMaxLength(200);

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.FormName)
                    .HasMaxLength(200)
                    .HasColumnName("Form_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kind)
                    .HasMaxLength(27)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcconditionalCheckList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCConditionalCheckList");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LastRun)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Run");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessCount).HasColumnName("Process_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcemail>(entity =>
            {
                entity.ToTable("cfgLCEmails");

                entity.HasIndex(e => e.MessageId, "IDX_cfgLCEmails_MessageID");

                entity.HasIndex(e => e.WfobjectId, "IDX_cfgLCEmails_Object");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Bcc).HasColumnName("BCC");

                entity.Property(e => e.Cc).HasColumnName("CC");

                entity.Property(e => e.ContentType).HasColumnName("Content_Type");

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.TemplateId).HasColumnName("Template_ID");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.CfgLcemails)
                    .HasForeignKey(d => d.TemplateId)
                    .HasConstraintName("cfgLCEmailTemplates_cfgLCEmails_FK1");
            });

            modelBuilder.Entity<CfgLcemailList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCEmailList");

                entity.Property(e => e.Bcc).HasColumnName("BCC");

                entity.Property(e => e.Cc).HasColumnName("CC");

                entity.Property(e => e.ContentType)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("Content_Type");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.ParameterCount).HasColumnName("Parameter_Count");

                entity.Property(e => e.Template).HasMaxLength(200);

                entity.Property(e => e.UsageCount).HasColumnName("Usage_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcemailParam>(entity =>
            {
                entity.ToTable("cfgLCEmailParams");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DefaultValue).HasColumnName("Default_Value");

                entity.Property(e => e.EmailId).HasColumnName("Email_ID");

                entity.Property(e => e.LookupId).HasColumnName("Lookup_ID");

                entity.Property(e => e.ParamName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Param_Name");

                entity.Property(e => e.ParamNum).HasColumnName("Param_Num");

                entity.Property(e => e.ParamType).HasColumnName("Param_Type");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.CfgLcemailParams)
                    .HasForeignKey(d => d.EmailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEmails_cfgLCEmailParams_FK1");
            });

            modelBuilder.Entity<CfgLcemailParamsMap>(entity =>
            {
                entity.ToTable("cfgLCEmailParamsMap");

                entity.HasIndex(e => new { e.CallerId, e.ParamId }, "IDX_cfgLCEmailParamsMap")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CallerId).HasColumnName("Caller_ID");

                entity.Property(e => e.ParamId).HasColumnName("Param_ID");

                entity.HasOne(d => d.Param)
                    .WithMany(p => p.CfgLcemailParamsMaps)
                    .HasForeignKey(d => d.ParamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEmailParams_cfgLCEmailParamsMap_FK1");
            });

            modelBuilder.Entity<CfgLcemailSection>(entity =>
            {
                entity.ToTable("cfgLCEmailSections");

                entity.HasIndex(e => new { e.SectionId, e.EmailId }, "IDX_cfgLCEmailSections_Unique")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EmailId).HasColumnName("Email_ID");

                entity.Property(e => e.IsHtml).HasColumnName("IsHTML");

                entity.Property(e => e.SectionId).HasColumnName("Section_ID");

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.CfgLcemailSections)
                    .HasForeignKey(d => d.EmailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEmails_cfgLCEmailSections_FK1");
            });

            modelBuilder.Entity<CfgLcemailTemplate>(entity =>
            {
                entity.ToTable("cfgLCEmailTemplates");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CfgLcemailUserList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCEmailUserList");

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kind).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcevent>(entity =>
            {
                entity.ToTable("cfgLCEvents");

                entity.HasIndex(e => e.EventId, "IDX_cfgLCEvents_EventID");

                entity.HasIndex(e => e.WfobjectId, "IDX_cfgLCEvents_Object");

                entity.HasIndex(e => e.FormId, "IX_cfgLCEvents_Form");

                entity.HasIndex(e => e.FunctionId, "IX_cfgLCEvents_Function");

                entity.HasIndex(e => e.TemplateId, "IX_cfgLCEvents_Template");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AnyRole).HasColumnName("Any_Role");

                entity.Property(e => e.Caption).HasMaxLength(200);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventKind).HasColumnName("Event_Kind");

                entity.Property(e => e.FormId).HasColumnName("Form_ID");

                entity.Property(e => e.FunctionId).HasColumnName("Function_ID");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.Hint).HasMaxLength(512);

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Params).HasColumnType("xml");

                entity.Property(e => e.TemplateId).HasColumnName("Template_ID");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CfgLcevents)
                    .HasForeignKey(d => d.FormId)
                    .HasConstraintName("cfgLCForms_cfgLCEvents_FK1");

                entity.HasOne(d => d.Function)
                    .WithMany(p => p.CfgLcevents)
                    .HasForeignKey(d => d.FunctionId)
                    .HasConstraintName("cfgLCFunctions_cfgLCEvents_FK1");

                entity.HasOne(d => d.Image)
                    .WithMany(p => p.CfgLcevents)
                    .HasForeignKey(d => d.ImageId)
                    .HasConstraintName("cfgLCImages_cfgLCEvents_FK1");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.CfgLcevents)
                    .HasForeignKey(d => d.TemplateId)
                    .HasConstraintName("cfgLCTemplates_cfgLCEvents_FK1");

                entity.HasOne(d => d.Wfobject)
                    .WithMany(p => p.CfgLcevents)
                    .HasForeignKey(d => d.WfobjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgWFObjects_cfgLCEvents_FK1");
            });

            modelBuilder.Entity<CfgLceventList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCEventList");

                entity.Property(e => e.AnyRole).HasColumnName("Any_Role");

                entity.Property(e => e.Caption).HasMaxLength(200);

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.FormId).HasColumnName("Form_ID");

                entity.Property(e => e.FormName)
                    .HasMaxLength(200)
                    .HasColumnName("Form_Name");

                entity.Property(e => e.FunctionId).HasColumnName("Function_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kind)
                    .HasMaxLength(27)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessCount).HasColumnName("Process_Count");

                entity.Property(e => e.TemplateId).HasColumnName("Template_ID");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLceventListToUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCEventListToUser");

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.Class).HasMaxLength(276);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kind)
                    .HasMaxLength(27)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.UserId).HasColumnName("User_ID");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLceventProcessList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCEventProcessList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessId).HasColumnName("Process_ID");
            });

            modelBuilder.Entity<CfgLceventRole>(entity =>
            {
                entity.ToTable("cfgLCEventRoles");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.SecurityRoleId).HasColumnName("SecurityRole_ID");

                entity.HasOne(d => d.Lcevent)
                    .WithMany(p => p.CfgLceventRoles)
                    .HasForeignKey(d => d.LceventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEvents_cfgLCEventRoles_FK1");

                entity.HasOne(d => d.SecurityRole)
                    .WithMany(p => p.CfgLceventRoles)
                    .HasForeignKey(d => d.SecurityRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgSecurityRoles_cfgLCEventRoles_FK1");
            });

            modelBuilder.Entity<CfgLceventRoleList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCEventRoleList");

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.Class).HasMaxLength(276);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kind)
                    .HasMaxLength(27)
                    .IsUnicode(false);

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SecurityRoleId).HasColumnName("SecurityRole_ID");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLceventViewList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCEventViewList");

                entity.Property(e => e.AnyRole).HasColumnName("Any_Role");

                entity.Property(e => e.Caption).HasMaxLength(200);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventKind).HasColumnName("Event_Kind");

                entity.Property(e => e.FormId).HasColumnName("Form_ID");

                entity.Property(e => e.FunctionId).HasColumnName("Function_ID");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.Hint).HasMaxLength(512);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Params).HasColumnType("xml");

                entity.Property(e => e.ProcessCount).HasColumnName("Process_Count");

                entity.Property(e => e.TemplateId).HasColumnName("Template_ID");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcfilter>(entity =>
            {
                entity.ToTable("cfgLCFilters");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Expression).IsRequired();

                entity.Property(e => e.LookupId).HasColumnName("Lookup_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CfgLcfilterList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCFilter_List");

                entity.Property(e => e.Expression).IsRequired();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LookupId).HasColumnName("Lookup_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CfgLcfilterParam>(entity =>
            {
                entity.ToTable("cfgLCFilterParams");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FilterId).HasColumnName("Filter_ID");

                entity.Property(e => e.LookupId).HasColumnName("Lookup_ID");

                entity.Property(e => e.ParamName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Param_Name");

                entity.Property(e => e.ParamType).HasColumnName("Param_Type");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");

                entity.HasOne(d => d.Filter)
                    .WithMany(p => p.CfgLcfilterParams)
                    .HasForeignKey(d => d.FilterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCFilters_cfgLCFilterParams_FK1");
            });

            modelBuilder.Entity<CfgLcform>(entity =>
            {
                entity.ToTable("cfgLCForms");

                entity.HasIndex(e => e.WfobjectId, "IDX_cfgLCForms_Object");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FormCaption)
                    .HasMaxLength(200)
                    .HasColumnName("Form_Caption");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");

                entity.HasOne(d => d.Wfobject)
                    .WithMany(p => p.CfgLcforms)
                    .HasForeignKey(d => d.WfobjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgWFObjects_cfgLCForms_FK1");
            });

            modelBuilder.Entity<CfgLcformDefinition>(entity =>
            {
                entity.ToTable("cfgLCFormDefinition");

                entity.HasIndex(e => e.FormId, "IX_cfgLCFormDefinition_Form");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FieldLabel)
                    .HasMaxLength(50)
                    .HasColumnName("Field_Label");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.FieldNum).HasColumnName("Field_Num");

                entity.Property(e => e.FieldValue).HasColumnName("Field_Value");

                entity.Property(e => e.FormId).HasColumnName("Form_ID");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CfgLcformDefinitions)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCForms_cfgLCFormDefinition_FK1");
            });

            modelBuilder.Entity<CfgLcformElement>(entity =>
            {
                entity.ToTable("cfgLCFormElements");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FieldId).HasColumnName("Field_ID");

                entity.Property(e => e.FormId).HasColumnName("Form_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.Field)
                    .WithMany(p => p.CfgLcformElements)
                    .HasForeignKey(d => d.FieldId)
                    .HasConstraintName("cfgLCFormDefinition_cfgLCFormElements_FK1");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CfgLcformElements)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCForms_cfgLCFormElements_FK1");
            });

            modelBuilder.Entity<CfgLcformField>(entity =>
            {
                entity.ToTable("cfgLCFormFields");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FieldCaption)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Caption");

                entity.Property(e => e.FieldType).HasColumnName("Field_Type");

                entity.Property(e => e.FormId).HasColumnName("Form_ID");

                entity.Property(e => e.LookupId).HasColumnName("Lookup_ID");

                entity.Property(e => e.LookupValues).HasColumnName("Lookup_Values");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CfgLcformFields)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCForms_cfgLCFormFields_FK1");
            });

            modelBuilder.Entity<CfgLcformValidation>(entity =>
            {
                entity.ToTable("cfgLCFormValidation");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FormId).HasColumnName("Form_ID");

                entity.Property(e => e.SectionId).HasColumnName("Section_ID");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CfgLcformValidations)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCForms_cfgLCFormValidation_FK1");
            });

            modelBuilder.Entity<CfgLcfunction>(entity =>
            {
                entity.ToTable("cfgLCFunctions");

                entity.HasIndex(e => e.FunctionId, "IDX_cfgLCFunctions_FunctionID");

                entity.HasIndex(e => e.WfobjectId, "IDX_cfgLCFunctions_Object");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ContextVariable)
                    .HasMaxLength(50)
                    .HasColumnName("Context_Variable");

                entity.Property(e => e.FunctionId).HasColumnName("FunctionID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");

                entity.HasOne(d => d.Wfobject)
                    .WithMany(p => p.CfgLcfunctions)
                    .HasForeignKey(d => d.WfobjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgWFObjects_cfgLCFunctions_FK1");
            });

            modelBuilder.Entity<CfgLcfunctionCallerList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCFunctionCallerList");

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kind).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcfunctionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCFunctionList");

                entity.Property(e => e.FunctionId).HasColumnName("FunctionID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ParameterCount).HasColumnName("Parameter_Count");

                entity.Property(e => e.UsageCount).HasColumnName("Usage_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcfunctionParam>(entity =>
            {
                entity.ToTable("cfgLCFunctionParams");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DefaultValue).HasColumnName("Default_Value");

                entity.Property(e => e.FunctionId).HasColumnName("Function_ID");

                entity.Property(e => e.LookupId).HasColumnName("Lookup_ID");

                entity.Property(e => e.ParamName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Param_Name");

                entity.Property(e => e.ParamNum).HasColumnName("Param_Num");

                entity.Property(e => e.ParamType).HasColumnName("Param_Type");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");

                entity.HasOne(d => d.Function)
                    .WithMany(p => p.CfgLcfunctionParams)
                    .HasForeignKey(d => d.FunctionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCFunctions_cfgLCFunctionParams_FK1");
            });

            modelBuilder.Entity<CfgLcimage>(entity =>
            {
                entity.ToTable("cfgLCImages");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<CfgLcnewObjectEventList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCNewObjectEventList");

                entity.Property(e => e.Caption).HasMaxLength(200);

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.FormName)
                    .HasMaxLength(200)
                    .HasColumnName("Form_Name");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.ProcessCount).HasColumnName("Process_Count");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(200)
                    .HasColumnName("Template_Name");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcobjectHistory>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("cfgLCObjectHistory_PK")
                    .IsClustered(false);

                entity.ToTable("cfgLCObjectHistory");

                entity.HasIndex(e => e.ObjectId, "IX_cfgLCObjectHistory_Object");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.RunCount).HasColumnName("Run_Count");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.HasOne(d => d.Lcevent)
                    .WithMany(p => p.CfgLcobjectHistories)
                    .HasForeignKey(d => d.LceventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEvents_cfgLCObjectHistory_FK1");
            });

            modelBuilder.Entity<CfgLcoperation>(entity =>
            {
                entity.ToTable("cfgLCOperations");

                entity.HasIndex(e => e.FunctionId, "IDX_cfgLCOperations_Function");

                entity.HasIndex(e => e.SubFunctionId, "IX_cfgLCOperations_Sub_Function");

                entity.HasIndex(e => e.TemplateId, "IX_cfgLCOperations_Template");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Definition).IsRequired();

                entity.Property(e => e.EmailId).HasColumnName("Email_ID");

                entity.Property(e => e.FunctionId).HasColumnName("Function_ID");

                entity.Property(e => e.GroupNum).HasColumnName("Group_Num");

                entity.Property(e => e.OperationKind).HasColumnName("Operation_Kind");

                entity.Property(e => e.OperationNum).HasColumnName("Operation_Num");

                entity.Property(e => e.SubFunctionId).HasColumnName("Sub_Function_ID");

                entity.Property(e => e.TemplateId).HasColumnName("Template_ID");

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.CfgLcoperations)
                    .HasForeignKey(d => d.EmailId)
                    .HasConstraintName("cfgLCEmails_cfgLCOperations_FK1");

                entity.HasOne(d => d.Function)
                    .WithMany(p => p.CfgLcoperationFunctions)
                    .HasForeignKey(d => d.FunctionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCFunctions_cfgLCOperations_FK1");

                entity.HasOne(d => d.SubFunction)
                    .WithMany(p => p.CfgLcoperationSubFunctions)
                    .HasForeignKey(d => d.SubFunctionId)
                    .HasConstraintName("cfgLCFunctions_cfgLCOperations_FK2");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.CfgLcoperations)
                    .HasForeignKey(d => d.TemplateId)
                    .HasConstraintName("cfgLCTemplates_cfgLCOperations_FK1");
            });

            modelBuilder.Entity<CfgLcparamsMap>(entity =>
            {
                entity.ToTable("cfgLCParamsMap");

                entity.HasIndex(e => new { e.CallerId, e.ParamId }, "IDX_cfgLCParamsMap")
                    .IsUnique();

                entity.HasIndex(e => e.ParamId, "IX_cfgLCParamsMap_Param");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CallerId).HasColumnName("Caller_ID");

                entity.Property(e => e.ParamId).HasColumnName("Param_ID");

                entity.HasOne(d => d.Param)
                    .WithMany(p => p.CfgLcparamsMaps)
                    .HasForeignKey(d => d.ParamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCFunctionParams_cfgLCParamsMap_FK1");
            });

            modelBuilder.Entity<CfgLcprocess>(entity =>
            {
                entity.ToTable("cfgLCProcesses");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CfgLcprocessItem>(entity =>
            {
                entity.ToTable("cfgLCProcessItems");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.ProcessId).HasColumnName("Process_ID");

                entity.HasOne(d => d.Lcevent)
                    .WithMany(p => p.CfgLcprocessItems)
                    .HasForeignKey(d => d.LceventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEvents_cfgLCProcessItems_FK1");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.CfgLcprocessItems)
                    .HasForeignKey(d => d.ProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCProcesses_cfgLCProcessItems_FK1");
            });

            modelBuilder.Entity<CfgLcprocessItemsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCProcessItemsList");

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.Class).HasMaxLength(276);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kind)
                    .HasMaxLength(27)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessId).HasColumnName("Process_ID");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcprocessList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCProcessList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ItemCount).HasColumnName("Item_Count");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CfgLcrecurrentAttachment>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("cfgLCRecurrentAttachments_PK")
                    .IsClustered(false);

                entity.ToTable("cfgLCRecurrentAttachments");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AttachmentId).HasColumnName("Attachment_ID");

                entity.Property(e => e.FileName).HasColumnName("File_Name");

                entity.Property(e => e.FileSize).HasColumnName("File_Size");

                entity.Property(e => e.FormElementId).HasColumnName("FormElement_ID");

                entity.Property(e => e.IsFile).HasColumnName("Is_File");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.CfgLcrecurrentAttachments)
                    .HasForeignKey(d => d.AttachmentId)
                    .HasConstraintName("Attachments_cfgLCRecurrentAttachments_FK1");

                entity.HasOne(d => d.FormElement)
                    .WithMany(p => p.CfgLcrecurrentAttachments)
                    .HasForeignKey(d => d.FormElementId)
                    .HasConstraintName("cfgLCFormElements_cfgLCRecurrentAttachments_FK1");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.CfgLcrecurrentAttachments)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCRecurrentObjects_cfgLCRecurrentAttachments_FK1");
            });

            modelBuilder.Entity<CfgLcrecurrentField>(entity =>
            {
                entity.ToTable("cfgLCRecurrentFields");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FieldId).HasColumnName("Field_ID");

                entity.Property(e => e.FieldValue).HasColumnName("Field_Value");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.HasOne(d => d.Field)
                    .WithMany(p => p.CfgLcrecurrentFields)
                    .HasForeignKey(d => d.FieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCFormDefinition_cfgLCRecurrentFields_FK1");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.CfgLcrecurrentFields)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCRecurrentObjects_cfgLCRecurrentFields_FK1");
            });

            modelBuilder.Entity<CfgLcrecurrentObject>(entity =>
            {
                entity.ToTable("cfgLCRecurrentObjects");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.HasOne(d => d.CreatedBy)
                    .WithMany(p => p.CfgLcrecurrentObjects)
                    .HasForeignKey(d => d.CreatedById)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_cfgLCRecurrentObjects_FK1");

                entity.HasOne(d => d.Lcevent)
                    .WithMany(p => p.CfgLcrecurrentObjects)
                    .HasForeignKey(d => d.LceventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEvents_cfgLCRecurrentObjects_FK1");
            });

            modelBuilder.Entity<CfgLcserviceActionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCServiceActionList");

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kind)
                    .HasMaxLength(34)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessCount).HasColumnName("Process_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcserviceAttribute>(entity =>
            {
                entity.ToTable("cfgLCServiceAttributes");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Expression).IsRequired();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ServiceKind).HasColumnName("Service_Kind");
            });

            modelBuilder.Entity<CfgLcserviceFieldMapping>(entity =>
            {
                entity.ToTable("cfgLCServiceFieldMapping");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.FieldType).HasColumnName("Field_Type");

                entity.Property(e => e.FieldValue).HasColumnName("Field_Value");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.LookupId).HasColumnName("Lookup_ID");

                entity.Property(e => e.ReplacementMode).HasColumnName("Replacement_Mode");

                entity.HasOne(d => d.Lcevent)
                    .WithMany(p => p.CfgLcserviceFieldMappings)
                    .HasForeignKey(d => d.LceventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEvents_cfgLCServiceFieldMapping_FK1");
            });

            modelBuilder.Entity<CfgLctaskList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCTaskList");

                entity.Property(e => e.Caption).HasMaxLength(200);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.FormName)
                    .HasMaxLength(200)
                    .HasColumnName("Form_Name");

                entity.Property(e => e.FunctionId).HasColumnName("Function_ID");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessCount).HasColumnName("Process_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLctemplate>(entity =>
            {
                entity.ToTable("cfgLCTemplates");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");

                entity.HasOne(d => d.Wfobject)
                    .WithMany(p => p.CfgLctemplates)
                    .HasForeignKey(d => d.WfobjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgWFObjects_cfgLCTemplates_FK1");
            });

            modelBuilder.Entity<CfgLctemplateDefinition>(entity =>
            {
                entity.ToTable("cfgLCTemplateDefinition");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.FieldValue)
                    .IsRequired()
                    .HasColumnName("Field_Value");

                entity.Property(e => e.TemplateId).HasColumnName("Template_ID");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.CfgLctemplateDefinitions)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCTemplates_cfgLCTemplateDefinition_FK1");
            });

            modelBuilder.Entity<CfgLctemplateList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCTemplateList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.UsageCount).HasColumnName("Usage_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLctemplateUserList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCTemplateUserList");

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Kind).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLctoolbarAction>(entity =>
            {
                entity.ToTable("cfgLCToolbarActions");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EventId).HasColumnName("Event_ID");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.ToolbarId).HasColumnName("Toolbar_ID");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.CfgLctoolbarActions)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("cfgLCEvents_cfgLCToolbarActions_FK1");
            });

            modelBuilder.Entity<CfgLctriggerList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCTriggerList");

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.TriggerKind)
                    .HasMaxLength(27)
                    .IsUnicode(false)
                    .HasColumnName("Trigger_Kind");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLctriggerOnChangeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCTriggerOnChangeList");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessCount).HasColumnName("Process_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLctriggerOnDeleteList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCTriggerOnDeleteList");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessCount).HasColumnName("Process_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcvalidationRuleList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCValidationRuleList");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessCount).HasColumnName("Process_Count");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLcviewFormList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLCViewFormList");

                entity.Property(e => e.FormCaption)
                    .HasMaxLength(200)
                    .HasColumnName("Form_Caption");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgLicenseStaticCompliance>(entity =>
            {
                entity.ToTable("cfgLicenseStaticCompliance");

                entity.HasIndex(e => e.SoftwareLicenseId, "IDX_cfgLicenseStaticCompliance_Unique")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");

                entity.Property(e => e.UnreconciledAllocations).HasColumnName("Unreconciled_Allocations");

                entity.HasOne(d => d.SoftwareLicense)
                    .WithOne(p => p.CfgLicenseStaticCompliance)
                    .HasForeignKey<CfgLicenseStaticCompliance>(d => d.SoftwareLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Software_Licenses_cfgLicenseStaticCompliance_FK1");
            });

            modelBuilder.Entity<CfgLocationParent>(entity =>
            {
                entity.ToTable("cfgLocation_Parents");

                entity.HasIndex(e => e.ChildId, "IX_cfgLocation_Parents_Child");

                entity.HasIndex(e => e.ParentId, "IX_cfgLocation_Parents_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.CfgLocationParentChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Locations_cfgLocation_Parents_FK2");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.CfgLocationParentParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Locations_cfgLocation_Parents_FK1");
            });

            modelBuilder.Entity<CfgLocationsLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgLocations_Level");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");
            });

            modelBuilder.Entity<CfgMcjobOption>(entity =>
            {
                entity.ToTable("cfgMCJobOptions");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AddEmailAsAttachment).HasColumnName("Add_Email_As_Attachment");

                entity.Property(e => e.CertificateReject).HasColumnName("Certificate_Reject");

                entity.Property(e => e.DeleteCompleted).HasColumnName("Delete_Completed");

                entity.Property(e => e.DeleteRejected).HasColumnName("Delete_Rejected");

                entity.Property(e => e.EwsAddress)
                    .HasMaxLength(200)
                    .HasColumnName("EWS_Address");

                entity.Property(e => e.EwsAutodiscover).HasColumnName("EWS_Autodiscover");

                entity.Property(e => e.EwsUrl)
                    .HasMaxLength(200)
                    .HasColumnName("EWS_URL");

                entity.Property(e => e.EwsVersion).HasColumnName("EWS_Version");

                entity.Property(e => e.IsDefaultMailProfile).HasColumnName("Is_Default_Mail_Profile");

                entity.Property(e => e.MailPassword)
                    .HasMaxLength(200)
                    .HasColumnName("Mail_Password");

                entity.Property(e => e.MailPort).HasColumnName("Mail_Port");

                entity.Property(e => e.MailProfile)
                    .HasMaxLength(255)
                    .HasColumnName("Mail_Profile");

                entity.Property(e => e.MailServer)
                    .HasMaxLength(200)
                    .HasColumnName("Mail_Server");

                entity.Property(e => e.MailType)
                    .HasMaxLength(20)
                    .HasColumnName("Mail_Type");

                entity.Property(e => e.MailUser)
                    .HasMaxLength(200)
                    .HasColumnName("Mail_User");

                entity.Property(e => e.Mailbox).HasMaxLength(200);

                entity.Property(e => e.MarkReadCompleted).HasColumnName("Mark_Read_Completed");

                entity.Property(e => e.MarkReadRejected).HasColumnName("Mark_Read_Rejected");

                entity.Property(e => e.OperationGroups).HasColumnName("Operation_Groups");

                entity.Property(e => e.PersonConstructorId).HasColumnName("Person_Constructor_ID");

                entity.Property(e => e.PurgeDeleted).HasColumnName("Purge_Deleted");

                entity.Property(e => e.RunAsLogin).HasMaxLength(255);

                entity.Property(e => e.RunAsPassword).HasMaxLength(255);

                entity.Property(e => e.SslFlags).HasColumnName("SSL_Flags");

                entity.Property(e => e.UseSpa).HasColumnName("Use_SPA");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.HasOne(d => d.PersonConstructor)
                    .WithMany(p => p.CfgMcjobOptions)
                    .HasForeignKey(d => d.PersonConstructorId)
                    .HasConstraintName("cfgLCEvents_cfgMCJobOptions_FK1");
            });

            modelBuilder.Entity<CfgObjectCategoryLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgObject_Category_Level");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");
            });

            modelBuilder.Entity<CfgObjectCategoryParent>(entity =>
            {
                entity.ToTable("cfgObject_Category_Parents");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.CfgObjectCategoryParentChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Category_cfgObject_Category_Parents_FK2");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.CfgObjectCategoryParentParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Category_cfgObject_Category_Parents_FK1");
            });

            modelBuilder.Entity<CfgObjectDependenciesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgObjectDependenciesView");

                entity.Property(e => e.DbtableId).HasColumnName("DBTable_ID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(128)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.RefFieldName)
                    .HasMaxLength(128)
                    .HasColumnName("Ref_Field_Name");

                entity.Property(e => e.RefTableName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("Ref_Table_Name");

                entity.Property(e => e.ReferenceName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("Reference_Name");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("Table_Name");
            });

            modelBuilder.Entity<CfgObjectsRelationshipActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgObjects_Relationship_Active");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.RelatedObjectId).HasColumnName("Related_Object_ID");
            });

            modelBuilder.Entity<CfgObjectsRelationshipList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgObjects_Relationship_List");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.RelatedObjectId).HasColumnName("Related_Object_ID");
            });

            modelBuilder.Entity<CfgOrganizationalUnitLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgOrganizational_Unit_Level");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");
            });

            modelBuilder.Entity<CfgOrganizationalUnitParent>(entity =>
            {
                entity.ToTable("cfgOrganizational_Unit_Parents");

                entity.HasIndex(e => e.ChildId, "IX_cfgOrganizational_Unit_Parents_Child");

                entity.HasIndex(e => e.ParentId, "IX_cfgOrganizational_Unit_Parents_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.CfgOrganizationalUnitParentChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organizational_Units_cfgOrganizational_Unit_Parents_FK2");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.CfgOrganizationalUnitParentParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organizational_Units_cfgOrganizational_Unit_Parents_FK1");
            });

            modelBuilder.Entity<CfgPendingRegistration>(entity =>
            {
                entity.ToTable("cfgPendingRegistrations");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActionData)
                    .HasColumnType("xml")
                    .HasColumnName("Action_Data");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Login).HasMaxLength(256);

                entity.Property(e => e.Password).HasMaxLength(255);

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("Primary_Email");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");
            });

            modelBuilder.Entity<CfgProjectParent>(entity =>
            {
                entity.ToTable("cfgProject_Parents");

                entity.HasIndex(e => e.ChildId, "IX_cfgProject_Parents_Child");

                entity.HasIndex(e => e.ParentId, "IX_cfgProject_Parents_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.CfgProjectParentChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Projects_cfgProject_Parents_FK2");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.CfgProjectParentParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Projects_cfgProject_Parents_FK1");
            });

            modelBuilder.Entity<CfgProjectsLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgProjects_Level");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");
            });

            modelBuilder.Entity<CfgRecurrentTicketList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgRecurrentTicketList");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LceventsId).HasColumnName("LCEvents_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(310);

                entity.Property(e => e.Schedule)
                    .IsRequired()
                    .HasMaxLength(1024);
            });

            modelBuilder.Entity<CfgReportCategoryLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgReport_Category_Level");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");
            });

            modelBuilder.Entity<CfgReportCategoryParent>(entity =>
            {
                entity.ToTable("cfgReport_Category_Parents");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<CfgReportList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgReportList");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ReportEngine)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Report_Engine");
            });

            modelBuilder.Entity<CfgReportingJobOption>(entity =>
            {
                entity.ToTable("cfgReportingJobOptions");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AdditionalParams).HasColumnName("Additional_Params");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("File_Name");

                entity.Property(e => e.FileType).HasColumnName("File_Type");

                entity.Property(e => e.ReportName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Report_Name");

                entity.Property(e => e.SendTo)
                    .HasMaxLength(255)
                    .HasColumnName("Send_To");
            });

            modelBuilder.Entity<CfgScCategoryLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgSC_Category_Level");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");
            });

            modelBuilder.Entity<CfgScCategoryParent>(entity =>
            {
                entity.ToTable("cfgSC_Category_Parents");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<CfgSecurityDashboardList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgSecurityDashboardList");

                entity.Property(e => e.BaseDashboardId).HasColumnName("Base_Dashboard_ID");

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");
            });

            modelBuilder.Entity<CfgSecurityRole>(entity =>
            {
                entity.ToTable("cfgSecurityRoles");

                entity.HasIndex(e => e.Name, "cfgSecurityRoles_Name_unq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OuRestricted).HasColumnName("OU_Restricted");

                entity.Property(e => e.UserOuRestricted).HasColumnName("User_OU_Restricted");
            });

            modelBuilder.Entity<CfgSecurityRoleAction>(entity =>
            {
                entity.ToTable("cfgSecurityRoleActions");

                entity.HasIndex(e => e.ActionId, "IX_cfgSecurityRoleActions_Action");

                entity.HasIndex(e => e.SecurityRoleId, "IX_cfgSecurityRoleActions_Role");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActionId).HasColumnName("Action_ID");

                entity.Property(e => e.SecurityRoleId).HasColumnName("SecurityRole_ID");

                entity.HasOne(d => d.SecurityRole)
                    .WithMany(p => p.CfgSecurityRoleActions)
                    .HasForeignKey(d => d.SecurityRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgSecurityRoles_cfgSecurityRoleActions_FK1");
            });

            modelBuilder.Entity<CfgSecurityRoleDashboard>(entity =>
            {
                entity.ToTable("cfgSecurityRoleDashboards");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DashboardId).HasColumnName("Dashboard_ID");

                entity.Property(e => e.SecurityRoleId).HasColumnName("SecurityRole_ID");

                entity.HasOne(d => d.Dashboard)
                    .WithMany(p => p.CfgSecurityRoleDashboards)
                    .HasForeignKey(d => d.DashboardId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgDashboards_cfgSecurityRoleDashboards_FK1");

                entity.HasOne(d => d.SecurityRole)
                    .WithMany(p => p.CfgSecurityRoleDashboards)
                    .HasForeignKey(d => d.SecurityRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgSecurityRoles_cfgSecurityRoleDashboards_FK1");
            });

            modelBuilder.Entity<CfgSecurityRoleList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgSecurityRole_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MemberCount).HasColumnName("Member_Count");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OuRestricted).HasColumnName("OU_Restricted");

                entity.Property(e => e.UserOuRestricted).HasColumnName("User_OU_Restricted");
            });

            modelBuilder.Entity<CfgSecurityRoleMember>(entity =>
            {
                entity.ToTable("cfgSecurityRoleMembers");

                entity.HasIndex(e => e.OwnerId, "IX_cfgSecurityRoleMembers_Owner");

                entity.HasIndex(e => e.SecurityRoleId, "IX_cfgSecurityRoleMembers_Role");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SecurityRoleId).HasColumnName("SecurityRole_ID");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.CfgSecurityRoleMembers)
                    .HasForeignKey(d => d.OwnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("User_Accounts_cfgSecurityRoleMembers_FK1");

                entity.HasOne(d => d.SecurityRole)
                    .WithMany(p => p.CfgSecurityRoleMembers)
                    .HasForeignKey(d => d.SecurityRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgSecurityRoles_cfgSecurityRoleMembers_FK1");
            });

            modelBuilder.Entity<CfgSecurityRoleOu>(entity =>
            {
                entity.ToTable("cfgSecurityRoleOUs");

                entity.HasIndex(e => e.OrganizationId, "IX_cfgSecurityRoleOUs_OU");

                entity.HasIndex(e => e.SecurityRoleId, "IX_cfgSecurityRoleOUs_Role");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.SecurityRoleId).HasColumnName("SecurityRole_ID");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.CfgSecurityRoleOus)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organizational_Units_cfgSecurityRoleOUs_FK1");

                entity.HasOne(d => d.SecurityRole)
                    .WithMany(p => p.CfgSecurityRoleOus)
                    .HasForeignKey(d => d.SecurityRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgSecurityRoles_cfgSecurityRoleOUs_FK1");
            });

            modelBuilder.Entity<CfgSecurityRoleView>(entity =>
            {
                entity.ToTable("cfgSecurityRoleViews");

                entity.HasIndex(e => e.SecurityRoleId, "IX_cfgSecurityRoleViews_Role");

                entity.HasIndex(e => e.ViewId, "IX_cfgSecurityRoleViews_View");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.SecurityRoleId).HasColumnName("SecurityRole_ID");

                entity.Property(e => e.ViewId).HasColumnName("View_ID");

                entity.HasOne(d => d.SecurityRole)
                    .WithMany(p => p.CfgSecurityRoleViews)
                    .HasForeignKey(d => d.SecurityRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgSecurityRoles_cfgSecurityRoleViews_FK1");

                entity.HasOne(d => d.View)
                    .WithMany(p => p.CfgSecurityRoleViews)
                    .HasForeignKey(d => d.ViewId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgViews_cfgSecurityRoleViews_FK1");
            });

            modelBuilder.Entity<CfgSecurityRolesSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgSecurityRoles_Summary");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MemberCount).HasColumnName("Member_Count");
            });

            modelBuilder.Entity<CfgServiceOperation>(entity =>
            {
                entity.ToTable("cfgServiceOperations");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.GroupNum).HasColumnName("Group_Num");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.Operation).IsRequired();

                entity.Property(e => e.OperationNum).HasColumnName("Operation_Num");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.CfgServiceOperations)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgJobs_cfgLCServiceOperations_FK1");

                entity.HasOne(d => d.Lcevent)
                    .WithMany(p => p.CfgServiceOperations)
                    .HasForeignKey(d => d.LceventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEvents_cfgLCServiceOperations_FK1");
            });

            modelBuilder.Entity<CfgServiceOperationsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgServiceOperations_List");

                entity.Property(e => e.GroupNum).HasColumnName("Group_Num");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.LceventName)
                    .HasMaxLength(200)
                    .HasColumnName("LCEvent_Name");

                entity.Property(e => e.Operation).IsRequired();

                entity.Property(e => e.OperationNum).HasColumnName("Operation_Num");
            });

            modelBuilder.Entity<CfgSetting>(entity =>
            {
                entity.ToTable("cfgSettings");

                entity.HasIndex(e => new { e.Name, e.GroupName }, "IX_cfgSettings_Name");

                entity.HasIndex(e => e.PersonId, "IX_cfgSettings_Persons");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CfgSettings)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("Persons_cfgSettings_FK1");
            });

            modelBuilder.Entity<CfgSharedViewList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgSharedViewList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectBrowser)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Object_Browser");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.ObjectTable)
                    .IsRequired()
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("Object_Table");
            });

            modelBuilder.Entity<CfgSharedViewName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgSharedViewNames");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.ObjectTable)
                    .IsRequired()
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("Object_Table");

                entity.Property(e => e.ViewKeyName)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("View_Key_Name");
            });

            modelBuilder.Entity<CfgSnippet>(entity =>
            {
                entity.ToTable("cfgSnippets");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.CfgSnippets)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("cfgSnippetCategory_cfgSnippets_FK1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CfgSnippets)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("Persons_cfgSnippets_FK1");
            });

            modelBuilder.Entity<CfgSnippetCategory>(entity =>
            {
                entity.ToTable("cfgSnippetCategory");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CfgSnippetCategories)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("Persons_cfgSnippetCategory_FK1");
            });

            modelBuilder.Entity<CfgSolutionRatingsSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgSolution_Ratings_Summary");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.RatingAverage).HasColumnName("Rating_Average");

                entity.Property(e => e.TotalVotes).HasColumnName("Total_Votes");
            });

            modelBuilder.Entity<CfgSpid>(entity =>
            {
                entity.ToTable("cfgSPID");

                entity.HasIndex(e => e.Spid, "cfgSPID_UC1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Action).HasMaxLength(50);

                entity.Property(e => e.Author).HasMaxLength(276);

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.Fields).HasMaxLength(1024);

                entity.Property(e => e.OperationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Operation_Date");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.WfItem)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Item");
            });

            modelBuilder.Entity<CfgSystemLog>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("cfgSystemLog_PK")
                    .IsClustered(false);

                entity.ToTable("cfgSystemLog");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AccountId).HasColumnName("Account_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Details).IsRequired();

                entity.Property(e => e.FirstOccurrence)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Occurrence");

                entity.Property(e => e.InitiatorId).HasColumnName("Initiator_ID");

                entity.Property(e => e.LastNotification)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Notification");

                entity.Property(e => e.LastOccurrence)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Occurrence");

                entity.Property(e => e.Lid).HasColumnName("LID");

                entity.Property(e => e.SinceNotification).HasColumnName("Since_Notification");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.CfgSystemLogs)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgSystemLogCategories_cfgSystemLog_FK1");
            });

            modelBuilder.Entity<CfgSystemLogCategory>(entity =>
            {
                entity.ToTable("cfgSystemLogCategories");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CfgSystemLogNotification>(entity =>
            {
                entity.ToTable("cfgSystemLogNotifications");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AddressType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("Address_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.CfgSystemLogNotifications)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgSystemLogCategories_cfgSystemLogNotifications_FK1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CfgSystemLogNotifications)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("Persons_cfgSystemLogNotifications_FK1");
            });

            modelBuilder.Entity<CfgSystemLogNotificationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgSystemLogNotificationsView");

                entity.Property(e => e.Address).HasMaxLength(535);

                entity.Property(e => e.AddressType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("Address_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<CfgSystemLogView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgSystemLogView");

                entity.Property(e => e.Account).HasMaxLength(276);

                entity.Property(e => e.AccountId).HasColumnName("Account_ID");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Details).IsRequired();

                entity.Property(e => e.FirstOccurrence)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Occurrence");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LastNotification)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Notification");

                entity.Property(e => e.LastOccurrence)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Occurrence");

                entity.Property(e => e.Lid).HasColumnName("LID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Log_Date");

                entity.Property(e => e.SinceNotification).HasColumnName("Since_Notification");

                entity.Property(e => e.SourceName)
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Source_Name");
            });

            modelBuilder.Entity<CfgTechnicianAccountList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgTechnicianAccount_List");

                entity.Property(e => e.AccountType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Person)
                    .IsRequired()
                    .HasMaxLength(276);
            });

            modelBuilder.Entity<CfgTicketsAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgTickets_All");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedProblemId).HasColumnName("Related_Problem_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.TicketKind).HasColumnName("Ticket_Kind");
            });

            modelBuilder.Entity<CfgTicketsAllActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgTickets_All_Active");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedProblemId).HasColumnName("Related_Problem_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.TicketKind).HasColumnName("Ticket_Kind");
            });

            modelBuilder.Entity<CfgToolLog>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("cfgToolLogs_PK")
                    .IsClustered(false);

                entity.ToTable("cfgToolLogs");

                entity.HasIndex(e => e.LogName, "IX_cfgToolLogs_Name");

                entity.HasIndex(e => e.ToolId, "IX_cfgToolLogs_Tool");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.LogDirectory)
                    .HasMaxLength(256)
                    .HasColumnName("Log_Directory");

                entity.Property(e => e.LogName)
                    .HasMaxLength(256)
                    .HasColumnName("Log_Name");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.RunDuration).HasColumnName("Run_Duration");

                entity.Property(e => e.RunParams)
                    .HasMaxLength(256)
                    .HasColumnName("Run_Params");

                entity.Property(e => e.RunRemark)
                    .HasMaxLength(1024)
                    .HasColumnName("Run_Remark");

                entity.Property(e => e.Stat1).HasMaxLength(256);

                entity.Property(e => e.Stat2).HasMaxLength(256);

                entity.Property(e => e.Stat3).HasMaxLength(256);

                entity.Property(e => e.Stat4).HasMaxLength(256);

                entity.Property(e => e.Stat5).HasMaxLength(256);

                entity.Property(e => e.Stat6).HasMaxLength(256);

                entity.Property(e => e.Stat7).HasMaxLength(256);

                entity.Property(e => e.ToolId).HasColumnName("Tool_ID");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Upload_Date");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.CfgToolLogs)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("cfgJobs_cfgToolLogs_FK1");
            });

            modelBuilder.Entity<CfgTrackedSoftwareProduct>(entity =>
            {
                entity.ToTable("cfgTracked_Software_Products");

                entity.HasIndex(e => e.SoftwareProductId, "IDX_cfgTracked_Software_Product_Unique")
                    .IsUnique();

                entity.HasIndex(e => e.TrackedSoftwareId, "IDX_cfgTracked_Software_Software_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.SoftwareProductId).HasColumnName("Software_Product_ID");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");

                entity.HasOne(d => d.SoftwareProduct)
                    .WithOne(p => p.CfgTrackedSoftwareProduct)
                    .HasForeignKey<CfgTrackedSoftwareProduct>(d => d.SoftwareProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Soft_Products_cfgTracked_Software_Products_FK1");

                entity.HasOne(d => d.TrackedSoftware)
                    .WithMany(p => p.CfgTrackedSoftwareProducts)
                    .HasForeignKey(d => d.TrackedSoftwareId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Tracked_Software_cfgTracked_Software_Products_FK1");
            });

            modelBuilder.Entity<CfgView>(entity =>
            {
                entity.ToTable("cfgViews");

                entity.HasIndex(e => e.PersonId, "IDX_cfgViews_Person");

                entity.HasIndex(e => e.ObjectName, "IX_cfgViews_Name");

                entity.HasIndex(e => e.Shared, "IX_cfgViews_Shared");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.View).IsRequired();

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.CfgViews)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("Persons_cfgViews_FK1");
            });

            modelBuilder.Entity<CfgViewSetting>(entity =>
            {
                entity.ToTable("cfgViewSettings");

                entity.HasIndex(e => e.AccountId, "IDX_cfgViewSettings_Account");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AccountId).HasColumnName("Account_ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.CurrentId).HasColumnName("Current_ID");

                entity.Property(e => e.ObjectKind).HasColumnName("Object_Kind");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CfgViewSettings)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("User_Accounts_cfgViewSettings_FK1");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.CfgViewSettings)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("Obejct_Class_cfgViewSettings_FK1");

                entity.HasOne(d => d.Current)
                    .WithMany(p => p.CfgViewSettings)
                    .HasForeignKey(d => d.CurrentId)
                    .HasConstraintName("cfgViews_cfgViewSettings_FK1");
            });

            modelBuilder.Entity<CfgWflog>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("cfgWFLogs_PK")
                    .IsClustered(false);

                entity.ToTable("cfgWFLogs");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DataEvent).HasColumnName("Data_Event");

                entity.Property(e => e.Host).HasMaxLength(255);

                entity.Property(e => e.LcactionId).HasColumnName("LCAction_ID");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ResultCode).HasColumnName("Result_Code");

                entity.Property(e => e.ResultMessage).HasColumnName("Result_Message");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.UserId).HasColumnName("User_ID");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");

                entity.HasOne(d => d.Lcevent)
                    .WithMany(p => p.CfgWflogs)
                    .HasForeignKey(d => d.LceventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCEvents_cfgWFLogs_FK1");

                entity.HasOne(d => d.Wfobject)
                    .WithMany(p => p.CfgWflogs)
                    .HasForeignKey(d => d.WfobjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgWFObjects_cfgWFLogs_FK1");
            });

            modelBuilder.Entity<CfgWflogDataView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgWFLogDataView");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.OperationId).HasColumnName("Operation_ID");

                entity.Property(e => e.OperationKind).HasColumnName("Operation_Kind");

                entity.Property(e => e.OperationParams).HasColumnName("Operation_Params");

                entity.Property(e => e.OrderIndex).HasColumnName("Order_Index");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<CfgWflogDatum>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("cfgWFLogData_PK")
                    .IsClustered(false);

                entity.ToTable("cfgWFLogData");

                entity.HasIndex(e => e.LogId, "IX_cfgWFLogData_Log");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.OperationId).HasColumnName("Operation_ID");

                entity.Property(e => e.OperationKind).HasColumnName("Operation_Kind");

                entity.Property(e => e.OperationParams).HasColumnName("Operation_Params");

                entity.Property(e => e.OrderIndex).HasColumnName("Order_Index");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.HasOne(d => d.Log)
                    .WithMany(p => p.CfgWflogData)
                    .HasForeignKey(d => d.LogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgWFLogs_cfgWFLogData_FK1");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.CfgWflogData)
                    .HasForeignKey(d => d.OperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgLCOperations_cfgWFLogData_FK1");
            });

            modelBuilder.Entity<CfgWflogEmail>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("cfgWFLogEmails_PK")
                    .IsClustered(false);

                entity.ToTable("cfgWFLogEmails");

                entity.HasIndex(e => e.LogId, "IX_cfgWFLogEmails_Log");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Bcc).HasColumnName("BCC");

                entity.Property(e => e.Cc).HasColumnName("CC");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.OrderIndex).HasColumnName("Order_Index");

                entity.HasOne(d => d.Log)
                    .WithMany(p => p.CfgWflogEmails)
                    .HasForeignKey(d => d.LogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgWFLogs_cfgWFLogEmails_FK1");
            });

            modelBuilder.Entity<CfgWflogsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgWFLogsView");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.ActionName)
                    .HasMaxLength(200)
                    .HasColumnName("Action_Name");

                entity.Property(e => e.Class).HasMaxLength(276);

                entity.Property(e => e.DataEvent).HasColumnName("Data_Event");

                entity.Property(e => e.Event)
                    .HasMaxLength(27)
                    .IsUnicode(false);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventKind).HasColumnName("Event_Kind");

                entity.Property(e => e.EventName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Event_Name");

                entity.Property(e => e.Host).HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InitiatorName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Initiator_Name");

                entity.Property(e => e.InitiatorType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Initiator_Type");

                entity.Property(e => e.Oid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("OID");

                entity.Property(e => e.ResultCode).HasColumnName("Result_Code");

                entity.Property(e => e.ResultMessage).HasColumnName("Result_Message");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.Status).HasMaxLength(10);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<CfgWfmacro>(entity =>
            {
                entity.ToTable("cfgWFMacros");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");

                entity.HasOne(d => d.Wfobject)
                    .WithMany(p => p.CfgWfmacros)
                    .HasForeignKey(d => d.WfobjectId)
                    .HasConstraintName("cfgWFObjects_cfgWFMacros_FK1");
            });

            modelBuilder.Entity<CfgWfobject>(entity =>
            {
                entity.ToTable("cfgWFObjects");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.ViewName)
                    .HasMaxLength(100)
                    .HasColumnName("View_Name");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.CfgWfobjects)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Class_cfgWFObjects_FK1");
            });

            modelBuilder.Entity<CfgWfobjectDependsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgWFObjectDependsView");

                entity.Property(e => e.RefField)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Ref_Field");

                entity.Property(e => e.RefName)
                    .HasMaxLength(276)
                    .HasColumnName("Ref_Name");

                entity.Property(e => e.RefObjectId).HasColumnName("Ref_Object_ID");

                entity.Property(e => e.RefTable)
                    .HasMaxLength(100)
                    .HasColumnName("Ref_Table");

                entity.Property(e => e.RefType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Ref_Type");

                entity.Property(e => e.RefWhere)
                    .HasMaxLength(50)
                    .HasColumnName("Ref_Where");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");
            });

            modelBuilder.Entity<CfgWfobjectsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cfgWFObjectsView");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CoreTable)
                    .HasMaxLength(50)
                    .HasColumnName("Core_Table");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.ObjectTable)
                    .HasMaxLength(100)
                    .HasColumnName("Object_Table");
            });

            modelBuilder.Entity<CfgWorkOrderParent>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("cfgWork_Order_Parents_PK")
                    .IsClustered(false);

                entity.ToTable("cfgWork_Order_Parents");

                entity.HasIndex(e => e.ParentId, "IX_cfgWork_Orders_Parents_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ChildId).HasColumnName("Child_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.CfgWorkOrderParentChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_cfgWork_Order_Parents_FK2");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.CfgWorkOrderParentParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_cfgWork_Order_Parents_FK1");
            });

            modelBuilder.Entity<ChangeManagementEvent>(entity =>
            {
                entity.ToTable("Change_Management_Events");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ManagementProcessId).HasColumnName("Management_Process_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Time");

                entity.Property(e => e.StopTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Stop_Time");
            });

            modelBuilder.Entity<ChangeRequest>(entity =>
            {
                entity.ToTable("Change_Requests");

                entity.HasIndex(e => e.RelatedCiId, "IX_Change_Requests_Related_CI");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.ApprovalDeadline)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Deadline");

                entity.Property(e => e.ApprovalStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Start_Time");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.MinimumVotePercentage).HasColumnName("Minimum_Vote_Percentage");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.SingleVoteTimeframe).HasColumnName("Single_Vote_Timeframe");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.VotingMethodId).HasColumnName("Voting_Method_ID");

                entity.HasOne(d => d.AssigneeGroup)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.AssigneeGroupId)
                    .HasConstraintName("User_Groups_Change_Requests_FK1");

                entity.HasOne(d => d.Assignee)
                    .WithMany(p => p.ChangeRequestAssignees)
                    .HasForeignKey(d => d.AssigneeId)
                    .HasConstraintName("Persons_Change_Requests_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Change_Requests_FK1");

                entity.HasOne(d => d.ClosureCode)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.ClosureCodeId)
                    .HasConstraintName("Ticket_Closure_Code_Change_Requests_FK1");

                entity.HasOne(d => d.Impact)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.ImpactId)
                    .HasConstraintName("Ticket_Impact_Change_Requests_FK1");

                entity.HasOne(d => d.Medium)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.MediumId)
                    .HasConstraintName("Ticket_Medium_Change_Requests_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Change_Requests_FK1");

                entity.HasOne(d => d.Priority)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.PriorityId)
                    .HasConstraintName("Ticket_Priority_Change_Requests_FK1");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("Projects_Change_Requests_FK1");

                entity.HasOne(d => d.RelatedCi)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.RelatedCiId)
                    .HasConstraintName("Object_Index_Change_Requests_FK1");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.ChangeRequestRequesters)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("Persons_Change_Requests_FK2");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("Services_Change_Requests_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Change_Requests_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Change_Requests_FK1");

                entity.HasOne(d => d.Urgency)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.UrgencyId)
                    .HasConstraintName("Ticket_Urgency_Change_Requests_FK1");

                entity.HasOne(d => d.VotingMethod)
                    .WithMany(p => p.ChangeRequests)
                    .HasForeignKey(d => d.VotingMethodId)
                    .HasConstraintName("Voting_Method_Change_Requests_FK1");
            });

            modelBuilder.Entity<ChangeRequestApproval>(entity =>
            {
                entity.ToTable("Change_Request_Approvals");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ApproverId).HasColumnName("Approver_ID");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.DecisionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Decision_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Approver)
                    .WithMany(p => p.ChangeRequestApprovals)
                    .HasForeignKey(d => d.ApproverId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_Change_Request_Approvals_FK1");

                entity.HasOne(d => d.ChangeRequest)
                    .WithMany(p => p.ChangeRequestApprovals)
                    .HasForeignKey(d => d.ChangeRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Change_Requests_Change_Request_Approvals_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ChangeRequestApprovals)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Change_Request_Approvals_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ChangeRequestApprovals)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Change_Request_Approvals_FK1");
            });

            modelBuilder.Entity<ChangeRequestApprovalList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Change_Request_Approval_List");

                entity.Property(e => e.Approver).HasMaxLength(276);

                entity.Property(e => e.ApproverId).HasColumnName("Approver_ID");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.DecisionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Decision_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ChangeRequestApprovalsSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Change_Request_Approvals_Summary");

                entity.Property(e => e.ApprovalVotes).HasColumnName("Approval_Votes");

                entity.Property(e => e.ApproverCount).HasColumnName("Approver_Count");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.RejectionVotes).HasColumnName("Rejection_Votes");
            });

            modelBuilder.Entity<ChangeRequestList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Change_Request_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.ApprovalDeadline)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Deadline");

                entity.Property(e => e.ApprovalStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Start_Time");

                entity.Property(e => e.ApprovalVotes).HasColumnName("Approval_Votes");

                entity.Property(e => e.ApproverCount).HasColumnName("Approver_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.MinimumVotePercentage).HasColumnName("Minimum_Vote_Percentage");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RejectionVotes).HasColumnName("Rejection_Votes");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedIncidentsCount).HasColumnName("Related_Incidents_Count");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.RelatedProblemsCount).HasColumnName("Related_Problems_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.SingleVoteTimeframe).HasColumnName("Single_Vote_Timeframe");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.VotingMethod)
                    .HasMaxLength(255)
                    .HasColumnName("Voting_Method");

                entity.Property(e => e.VotingMethodId).HasColumnName("Voting_Method_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<ChangeRequestListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Change_Request_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.ApprovalDeadline)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Deadline");

                entity.Property(e => e.ApprovalStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Start_Time");

                entity.Property(e => e.ApprovalVotes).HasColumnName("Approval_Votes");

                entity.Property(e => e.ApproverCount).HasColumnName("Approver_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.MinimumVotePercentage).HasColumnName("Minimum_Vote_Percentage");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RejectionVotes).HasColumnName("Rejection_Votes");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedIncidentsCount).HasColumnName("Related_Incidents_Count");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.RelatedProblemsCount).HasColumnName("Related_Problems_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.SingleVoteTimeframe).HasColumnName("Single_Vote_Timeframe");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.VotingMethod)
                    .HasMaxLength(255)
                    .HasColumnName("Voting_Method");

                entity.Property(e => e.VotingMethodId).HasColumnName("Voting_Method_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<ChangeRequestListPersonal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Change_Request_List_Personal");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.ApprovalDeadline)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Deadline");

                entity.Property(e => e.ApprovalStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Start_Time");

                entity.Property(e => e.ApprovalVotes).HasColumnName("Approval_Votes");

                entity.Property(e => e.ApproverCount).HasColumnName("Approver_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.MinimumVotePercentage).HasColumnName("Minimum_Vote_Percentage");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RejectionVotes).HasColumnName("Rejection_Votes");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedIncidentsCount).HasColumnName("Related_Incidents_Count");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.RelatedProblemsCount).HasColumnName("Related_Problems_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.SingleVoteTimeframe).HasColumnName("Single_Vote_Timeframe");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.VotingMethod)
                    .HasMaxLength(255)
                    .HasColumnName("Voting_Method");

                entity.Property(e => e.VotingMethodId).HasColumnName("Voting_Method_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<CiAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CI_All");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(276);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<CiAndTicketObjectClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CI_And_Ticket_Object_Class");

                entity.Property(e => e.Ci).HasColumnName("CI");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");
            });

            modelBuilder.Entity<CiAssetList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CI_Asset_List");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AssociatedCi)
                    .HasMaxLength(276)
                    .HasColumnName("Associated_CI");

                entity.Property(e => e.AssociatedCiClassId)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("Associated_CI_Class_ID");

                entity.Property(e => e.AssociatedCiId).HasColumnName("Associated_CI_ID");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassId)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("Class_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoItemId).HasColumnName("PO_Item_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<CiIpAddressList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CI_IP_Address_List");

                entity.Property(e => e.CiName)
                    .HasMaxLength(100)
                    .HasColumnName("CI_Name");

                entity.Property(e => e.CiOid)
                    .HasMaxLength(25)
                    .HasColumnName("CI_OID");

                entity.Property(e => e.CiOwner)
                    .HasMaxLength(276)
                    .HasColumnName("CI_Owner");

                entity.Property(e => e.CiType)
                    .HasMaxLength(50)
                    .HasColumnName("CI_Type");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("IP_Address");

                entity.Property(e => e.IpAddressId).HasColumnName("IP_Address_ID");

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.NetworkName)
                    .HasMaxLength(100)
                    .HasColumnName("Network_Name");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");
            });

            modelBuilder.Entity<CiList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CI_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(100);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<CiListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CI_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(100);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<Computer>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("Computers_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.StatusId, "IDX_Computers_Status");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Audit_Date");

                entity.Property(e => e.AuditId)
                    .HasMaxLength(80)
                    .HasColumnName("Audit_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerName)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Name");

                entity.Property(e => e.Cpu)
                    .HasMaxLength(50)
                    .HasColumnName("CPU");

                entity.Property(e => e.CpuCount).HasColumnName("CPU_Count");

                entity.Property(e => e.CpuSpeed).HasColumnName("CPU_Speed");

                entity.Property(e => e.DisplayAdapter)
                    .HasMaxLength(100)
                    .HasColumnName("Display_Adapter");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.Hdd).HasColumnName("HDD");

                entity.Property(e => e.HddFree).HasColumnName("HDD_Free");

                entity.Property(e => e.ImportId).HasColumnName("Import_ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.LanCard)
                    .HasMaxLength(80)
                    .HasColumnName("Lan_Card");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Mac)
                    .HasMaxLength(25)
                    .HasColumnName("MAC");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Monitor).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OsName)
                    .HasMaxLength(255)
                    .HasColumnName("OS_Name");

                entity.Property(e => e.OsServicePack)
                    .HasMaxLength(80)
                    .HasColumnName("OS_ServicePack");

                entity.Property(e => e.OsVersion)
                    .HasMaxLength(30)
                    .HasColumnName("OS_Version");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PrimaryIpAddress)
                    .HasMaxLength(50)
                    .HasColumnName("Primary_IP_Address");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.Ram).HasColumnName("RAM");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0007)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0007");

                entity.Property(e => e.UdfLegacyWarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Legacy_Warranty_Exp");

                entity.Property(e => e.Workgroup).HasMaxLength(25);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Computers)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Computers_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Computers)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Computers_FK1");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.Computers)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("Brands_Computers_FK1");

                entity.HasOne(d => d.Network)
                    .WithMany(p => p.Computers)
                    .HasForeignKey(d => d.NetworkId)
                    .HasConstraintName("Networks_Computers_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Computers)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Computers_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Computers)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Computers_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Computers)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Computers_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Computers)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Computers_FK1");
            });

            modelBuilder.Entity<ComputerList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Computer_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(128);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Audit_Date");

                entity.Property(e => e.AuditId)
                    .HasMaxLength(80)
                    .HasColumnName("Audit_ID");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerName)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Name");

                entity.Property(e => e.Cpu)
                    .HasMaxLength(50)
                    .HasColumnName("CPU");

                entity.Property(e => e.CpuCount).HasColumnName("CPU_Count");

                entity.Property(e => e.CpuSpeed).HasColumnName("CPU_Speed");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.DisplayAdapter)
                    .HasMaxLength(100)
                    .HasColumnName("Display_Adapter");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Hdd).HasColumnName("HDD");

                entity.Property(e => e.HddFree).HasColumnName("HDD_Free");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImportId).HasColumnName("Import_ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LanCard)
                    .HasMaxLength(80)
                    .HasColumnName("Lan_Card");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Mac)
                    .HasMaxLength(25)
                    .HasColumnName("MAC");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Monitor).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.NetworkName)
                    .HasMaxLength(100)
                    .HasColumnName("Network_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OsName)
                    .HasMaxLength(255)
                    .HasColumnName("OS_Name");

                entity.Property(e => e.OsServicePack)
                    .HasMaxLength(80)
                    .HasColumnName("OS_ServicePack");

                entity.Property(e => e.OsVersion)
                    .HasMaxLength(30)
                    .HasColumnName("OS_Version");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PrimaryIpAddress)
                    .HasMaxLength(50)
                    .HasColumnName("Primary_IP_Address");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.Ram).HasColumnName("RAM");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0007)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0007");

                entity.Property(e => e.UdfLegacyWarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Legacy_Warranty_Exp");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");

                entity.Property(e => e.Workgroup).HasMaxLength(25);
            });

            modelBuilder.Entity<ComputerListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Computer_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(128);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Audit_Date");

                entity.Property(e => e.AuditId)
                    .HasMaxLength(80)
                    .HasColumnName("Audit_ID");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerName)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Name");

                entity.Property(e => e.Cpu)
                    .HasMaxLength(50)
                    .HasColumnName("CPU");

                entity.Property(e => e.CpuCount).HasColumnName("CPU_Count");

                entity.Property(e => e.CpuSpeed).HasColumnName("CPU_Speed");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.DisplayAdapter)
                    .HasMaxLength(100)
                    .HasColumnName("Display_Adapter");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Hdd).HasColumnName("HDD");

                entity.Property(e => e.HddFree).HasColumnName("HDD_Free");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImportId).HasColumnName("Import_ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LanCard)
                    .HasMaxLength(80)
                    .HasColumnName("Lan_Card");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Mac)
                    .HasMaxLength(25)
                    .HasColumnName("MAC");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Monitor).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.NetworkName)
                    .HasMaxLength(100)
                    .HasColumnName("Network_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OsName)
                    .HasMaxLength(255)
                    .HasColumnName("OS_Name");

                entity.Property(e => e.OsServicePack)
                    .HasMaxLength(80)
                    .HasColumnName("OS_ServicePack");

                entity.Property(e => e.OsVersion)
                    .HasMaxLength(30)
                    .HasColumnName("OS_Version");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PrimaryIpAddress)
                    .HasMaxLength(50)
                    .HasColumnName("Primary_IP_Address");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.Ram).HasColumnName("RAM");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0007)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0007");

                entity.Property(e => e.UdfLegacyWarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Legacy_Warranty_Exp");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");

                entity.Property(e => e.Workgroup).HasMaxLength(25);
            });

            modelBuilder.Entity<ComputerVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Computer_Vendors");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");
            });

            modelBuilder.Entity<Configuration>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AssociatedCiId).HasColumnName("Associated_CI_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfShortName)
                    .HasMaxLength(15)
                    .HasColumnName("UDF_Short_Name");

                entity.Property(e => e.UdfSupportGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Support_Group");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");

                entity.HasOne(d => d.AssociatedCi)
                    .WithMany(p => p.Configurations)
                    .HasForeignKey(d => d.AssociatedCiId)
                    .HasConstraintName("Object_Index_Configurations_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Configurations)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Configurations_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Configurations)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Configurations_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Configurations)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Configurations_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Configurations)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Configurations_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Configurations)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Configurations_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Configurations)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Configurations_FK1");
            });

            modelBuilder.Entity<ConfigurationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Configuration_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AssociatedCi)
                    .HasMaxLength(352)
                    .HasColumnName("Associated_CI");

                entity.Property(e => e.AssociatedCiId).HasColumnName("Associated_CI_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfShortName)
                    .HasMaxLength(15)
                    .HasColumnName("UDF_Short_Name");

                entity.Property(e => e.UdfSupportGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Support_Group");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");
            });

            modelBuilder.Entity<ConfigurationListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Configuration_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AssociatedCi)
                    .HasMaxLength(352)
                    .HasColumnName("Associated_CI");

                entity.Property(e => e.AssociatedCiId).HasColumnName("Associated_CI_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfShortName)
                    .HasMaxLength(15)
                    .HasColumnName("UDF_Short_Name");

                entity.Property(e => e.UdfSupportGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Support_Group");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");
            });

            modelBuilder.Entity<Consumable>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OriginalCost)
                    .HasColumnType("money")
                    .HasColumnName("Original_Cost");

                entity.Property(e => e.OriginalQty).HasColumnName("Original_Qty");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoItemId).HasColumnName("PO_Item_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Consumables_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Consumables_FK1");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("Brands_Consumables_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Consumables_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Consumables_FK1");

                entity.HasOne(d => d.PoItem)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.PoItemId)
                    .HasConstraintName("PO_Items_Consumables_FK1");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("Products_Consumables_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Consumables_FK1");

                entity.HasOne(d => d.StockRoom)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.StockRoomId)
                    .HasConstraintName("Stock_Rooms_Consumables_FK1");

                entity.HasOne(d => d.StockingUom)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.StockingUomId)
                    .HasConstraintName("Units_of_Measure_Consumables_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Consumables_FK1");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Consumables)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("Vendors_Consumables_FK1");
            });

            modelBuilder.Entity<ConsumableList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Consumable_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OriginalCost)
                    .HasColumnType("money")
                    .HasColumnName("Original_Cost");

                entity.Property(e => e.OriginalQty).HasColumnName("Original_Qty");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoItemId).HasColumnName("PO_Item_ID");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.StockingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Stocking_UOM");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Price");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<ConsumableListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Consumable_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OriginalCost)
                    .HasColumnType("money")
                    .HasColumnName("Original_Cost");

                entity.Property(e => e.OriginalQty).HasColumnName("Original_Qty");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoItemId).HasColumnName("PO_Item_ID");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.StockingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Stocking_UOM");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Price");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<ConsumableMovementList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Consumable_Movement_List");

                entity.Property(e => e.ConsumableId).HasColumnName("Consumable_ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Direction)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PoId).HasColumnName("PO_ID");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(200)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.PurchaseOrderOid)
                    .HasMaxLength(25)
                    .HasColumnName("Purchase_Order_OID");

                entity.Property(e => e.Reason).HasMaxLength(100);

                entity.Property(e => e.SourceAsset)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Asset");

                entity.Property(e => e.SourceAssetId).HasColumnName("Source_Asset_ID");

                entity.Property(e => e.SourceAssetOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Asset_OID");

                entity.Property(e => e.SourceBalance).HasColumnName("Source_Balance");

                entity.Property(e => e.SourceConsumable)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Consumable");

                entity.Property(e => e.SourceConsumableId).HasColumnName("Source_Consumable_ID");

                entity.Property(e => e.SourceConsumableOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Consumable_OID");

                entity.Property(e => e.SourcePerson)
                    .HasMaxLength(276)
                    .HasColumnName("Source_Person");

                entity.Property(e => e.SourcePersonId).HasColumnName("Source_Person_ID");

                entity.Property(e => e.SourcePersonOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Person_OID");

                entity.Property(e => e.SourceStockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Stock_Room");

                entity.Property(e => e.SourceStockRoomId).HasColumnName("Source_Stock_Room_ID");

                entity.Property(e => e.StockManager)
                    .HasMaxLength(276)
                    .HasColumnName("Stock_Manager");

                entity.Property(e => e.StockManagerId).HasColumnName("Stock_Manager_ID");

                entity.Property(e => e.TargetAsset)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Asset");

                entity.Property(e => e.TargetAssetId).HasColumnName("Target_Asset_ID");

                entity.Property(e => e.TargetAssetOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Asset_OID");

                entity.Property(e => e.TargetBalance).HasColumnName("Target_Balance");

                entity.Property(e => e.TargetConsumable)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Consumable");

                entity.Property(e => e.TargetConsumableId).HasColumnName("Target_Consumable_ID");

                entity.Property(e => e.TargetConsumableOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Consumable_OID");

                entity.Property(e => e.TargetPerson)
                    .HasMaxLength(276)
                    .HasColumnName("Target_Person");

                entity.Property(e => e.TargetPersonId).HasColumnName("Target_Person_ID");

                entity.Property(e => e.TargetPersonOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Person_OID");

                entity.Property(e => e.TargetStockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Stock_Room");

                entity.Property(e => e.TargetStockRoomId).HasColumnName("Target_Stock_Room_ID");
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ContractNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contract_Number");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ProviderId).HasColumnName("Provider_ID");

                entity.Property(e => e.ReceiverId).HasColumnName("Receiver_ID");

                entity.Property(e => e.RenewalOption).HasColumnName("Renewal_Option");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfLocation)
                    .HasMaxLength(255)
                    .HasColumnName("UDF_Location");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Contracts_FK1");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.ContractProviders)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("Organizational_Units_Contracts_FK2");

                entity.HasOne(d => d.Receiver)
                    .WithMany(p => p.ContractReceivers)
                    .HasForeignKey(d => d.ReceiverId)
                    .HasConstraintName("Organizational_Units_Contracts_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Contracts_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Contracts_FK1");
            });

            modelBuilder.Entity<ContractList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Contract_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ContractNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contract_Number");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Provider).HasMaxLength(2048);

                entity.Property(e => e.ProviderId).HasColumnName("Provider_ID");

                entity.Property(e => e.Receiver).HasMaxLength(2048);

                entity.Property(e => e.ReceiverId).HasColumnName("Receiver_ID");

                entity.Property(e => e.RenewalOption).HasColumnName("Renewal_Option");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfLocation)
                    .HasMaxLength(255)
                    .HasColumnName("UDF_Location");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");
            });

            modelBuilder.Entity<ContractListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Contract_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ContractNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contract_Number");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Provider).HasMaxLength(2048);

                entity.Property(e => e.ProviderId).HasColumnName("Provider_ID");

                entity.Property(e => e.Receiver).HasMaxLength(2048);

                entity.Property(e => e.ReceiverId).HasColumnName("Receiver_ID");

                entity.Property(e => e.RenewalOption).HasColumnName("Renewal_Option");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfLocation)
                    .HasMaxLength(255)
                    .HasColumnName("UDF_Location");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");
            });

            modelBuilder.Entity<CustomerList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Customer_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.PersonsCount).HasColumnName("Persons_Count");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Placement).HasMaxLength(2048);

                entity.Property(e => e.SlaCount).HasColumnName("SLA_Count");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<CustomerListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Customer_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.PersonsCount).HasColumnName("Persons_Count");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Placement).HasMaxLength(2048);

                entity.Property(e => e.SlaCount).HasColumnName("SLA_Count");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<DashboardActivityList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Dashboard_Activity_List");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NewStatus)
                    .HasMaxLength(50)
                    .HasColumnName("New_Status");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.OldStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Old_Status");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.UdfActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Activity_Date");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(60)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.WfActionNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Action_Num");

                entity.Property(e => e.WfItemNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Item_Num");
            });

            modelBuilder.Entity<DepreciationMethod>(entity =>
            {
                entity.ToTable("Depreciation_Methods");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DepreciationMethod1)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.DepreciationRate).HasColumnName("Depreciation_Rate");

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<DetectedInstallationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Detected_Installation_List");

                entity.Property(e => e.ComputerName)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Name");

                entity.Property(e => e.ComputerOrganization)
                    .HasMaxLength(2048)
                    .HasColumnName("Computer_Organization");

                entity.Property(e => e.ComputerSerialNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Serial_Number");

                entity.Property(e => e.FirstAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Audit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.LastAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Audit");

                entity.Property(e => e.LicenseAllocated)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("License_Allocated");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.SoftProductId).HasColumnName("Soft_Product_ID");
            });

            modelBuilder.Entity<DetectedProductList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Detected_Product_List");

                entity.Property(e => e.FirstAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Audit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.LastAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Audit");

                entity.Property(e => e.LicenseAllocated)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("License_Allocated");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Platform).HasMaxLength(25);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.SoftProductId).HasColumnName("Soft_Product_ID");

                entity.Property(e => e.TrackedSoftware)
                    .HasMaxLength(100)
                    .HasColumnName("Tracked_Software");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<DetectedSoftwareProduct>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("Detected_Software_Products_PK")
                    .IsClustered(false);

                entity.ToTable("Detected_Software_Products");

                entity.HasIndex(e => e.ObjectId, "IX_Detected_Software_Products_Object");

                entity.HasIndex(e => e.SoftProductId, "IX_Detected_Software_Products_Product")
                    .HasFillFactor((byte)93);

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FirstAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Audit");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.LastAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Audit");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.SoftProductId).HasColumnName("Soft_Product_ID");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.DetectedSoftwareProducts)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_Detected_Software_Products_FK1");

                entity.HasOne(d => d.SoftProduct)
                    .WithMany(p => p.DetectedSoftwareProducts)
                    .HasForeignKey(d => d.SoftProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Soft_Products_Detected_Software_Products_FK1");
            });

            modelBuilder.Entity<DetectedSoftwareProductsActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Detected_Software_Products_Actual");

                entity.Property(e => e.FirstAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Audit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.LastAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Audit");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.SoftProductId).HasColumnName("Soft_Product_ID");
            });

            modelBuilder.Entity<DiscoveredInstallationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Discovered_Installation_List");

                entity.Property(e => e.FirstAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Audit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.InstalledOn)
                    .HasMaxLength(100)
                    .HasColumnName("Installed_on");

                entity.Property(e => e.LastAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Audit");

                entity.Property(e => e.LicenseAllocated)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("License_Allocated");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.PartOfSuite)
                    .HasMaxLength(100)
                    .HasColumnName("Part_of_Suite");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.SoftProductId).HasColumnName("Soft_Product_ID");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<DiscoveredLicSoftByObjectSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Discovered_LicSoft_ByObject_Summary");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");
            });

            modelBuilder.Entity<DiscoveredSoftwareProductList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Discovered_Software_Product_List");

                entity.Property(e => e.ComputerName)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Name");

                entity.Property(e => e.ComputerOrganization)
                    .HasMaxLength(2048)
                    .HasColumnName("Computer_Organization");

                entity.Property(e => e.ComputerSerialNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Serial_Number");

                entity.Property(e => e.FirstAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Audit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.LastAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Audit");

                entity.Property(e => e.LicenseAllocated)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("License_Allocated");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.Platform).HasMaxLength(25);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.SoftProductId).HasColumnName("Soft_Product_ID");

                entity.Property(e => e.TrackedSoftware)
                    .HasMaxLength(100)
                    .HasColumnName("Tracked_Software");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<DiscoveryConnectorLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Discovery_Connector_Log");

                entity.Property(e => e.Comments).HasMaxLength(1024);

                entity.Property(e => e.CreatedComputers).HasColumnName("Created_Computers");

                entity.Property(e => e.CreatedConflicts).HasColumnName("Created_Conflicts");

                entity.Property(e => e.CreatedPersons).HasColumnName("Created_Persons");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.JobName)
                    .HasMaxLength(310)
                    .HasColumnName("Job_Name");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Upload_Date");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Keywords).HasMaxLength(100);

                entity.Property(e => e.LastReviewed)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Reviewed");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.HasOne(d => d.Author)
                    .WithMany(p => p.DocumentAuthors)
                    .HasForeignKey(d => d.AuthorId)
                    .HasConstraintName("Persons_Documents_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Documents_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Documents_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Documents_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.DocumentOwners)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Documents_FK2");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Documents_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Documents_FK1");
            });

            modelBuilder.Entity<DocumentList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Document_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Author).HasMaxLength(276);

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keywords).HasMaxLength(100);

                entity.Property(e => e.LastReviewed)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Reviewed");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<DocumentListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Document_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Author).HasMaxLength(276);

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keywords).HasMaxLength(100);

                entity.Property(e => e.LastReviewed)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Reviewed");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<EmailQueueList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EmailQueue_List");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.ContentTextType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Content_Text_Type");

                entity.Property(e => e.ContentType).HasColumnName("Content_Type");

                entity.Property(e => e.ExecutorId)
                    .HasMaxLength(100)
                    .HasColumnName("ExecutorID");

                entity.Property(e => e.ExecutorType)
                    .HasMaxLength(125)
                    .HasColumnName("Executor_Type");

                entity.Property(e => e.Host).HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InitiatorType)
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Initiator_Type");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.QueueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Queue_Date");

                entity.Property(e => e.SendBcc).HasColumnName("SendBCC");

                entity.Property(e => e.SendCc).HasColumnName("SendCC");

                entity.Property(e => e.SendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Send_Date");

                entity.Property(e => e.SendError).HasColumnName("Send_Error");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailType>(entity =>
            {
                entity.ToTable("Email_Types");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.ToTable("Gender");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Gender1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Gender");
            });

            modelBuilder.Entity<GldetailArchive>(entity =>
            {
                entity.HasKey(e => e.GldetailId)
                    .HasName("PK_GLdetailArchiveId");

                entity.ToTable("GLdetailArchive");

                entity.Property(e => e.GldetailId)
                    .ValueGeneratedNever()
                    .HasColumnName("GLdetailId");

                entity.Property(e => e.CreditAmount).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.DebitAmount).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.GlinterfaceDate)
                    .HasColumnType("date")
                    .HasColumnName("GLinterfaceDate");
            });

            modelBuilder.Entity<GroupMember>(entity =>
            {
                entity.ToTable("Group_Members");

                entity.HasIndex(e => e.GroupId, "IX_Group_Members_Group");

                entity.HasIndex(e => e.PersonId, "IX_Group_Members_Person");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.GroupRank).HasColumnName("Group_Rank");

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.GroupMembers)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("User_Groups_Group_Members_FK1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.GroupMembers)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_Group_Members_FK1");
            });

            modelBuilder.Entity<GroupMemberList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Group_Member_List");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Address3).HasColumnName("Address_3");

                entity.Property(e => e.AdimportId).HasColumnName("ADImport_ID");

                entity.Property(e => e.AvailableNow)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Available_Now");

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.BusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Business_Phone");

                entity.Property(e => e.CalendarId).HasColumnName("Calendar_ID");

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.GenderId).HasColumnName("Gender_ID");

                entity.Property(e => e.GroupMemberId).HasColumnName("Group_Member_ID");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Home_Phone");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("money")
                    .HasColumnName("Hourly_Rate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImAddress)
                    .HasMaxLength(50)
                    .HasColumnName("IM_Address");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(64)
                    .HasColumnName("Job_Title");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(64)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Mobile_Phone");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Pager).HasMaxLength(50);

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("Primary_Email");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("Primary_Login");

                entity.Property(e => e.SkillLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Skill_Level");

                entity.Property(e => e.SmsEmail)
                    .HasMaxLength(100)
                    .HasColumnName("SMS_Email");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(64);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0003)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0003");

                entity.Property(e => e.Udf0005).HasColumnName("UDF0005");

                entity.Property(e => e.Udf0006)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF0006");

                entity.Property(e => e.UdfBadgeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Badge_Number");

                entity.Property(e => e.UdfDistinguishedName)
                    .HasMaxLength(500)
                    .HasColumnName("UDF_Distinguished_Name");

                entity.Property(e => e.UdfEmployeeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Employee_Number");

                entity.Property(e => e.UdfLunchPeriod)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Lunch_Period");

                entity.Property(e => e.UdfPrimaryGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Primary_Group");

                entity.Property(e => e.UdfVehicleColor)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Color");

                entity.Property(e => e.UdfVehicleMake)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Make");

                entity.Property(e => e.UdfVehicleModel)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Model");

                entity.Property(e => e.UdfVehicleYear)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Vehicle_Year");

                entity.Property(e => e.UserGroupId).HasColumnName("User_Group_ID");
            });

            modelBuilder.Entity<GroupPersonsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Group_Persons_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Address3).HasColumnName("Address_3");

                entity.Property(e => e.AdimportId).HasColumnName("ADImport_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AvailableNow)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Available_Now");

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.BusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Business_Phone");

                entity.Property(e => e.Calendar).HasMaxLength(100);

                entity.Property(e => e.CalendarId).HasColumnName("Calendar_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.GenderId).HasColumnName("Gender_ID");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.GroupMemberId).HasColumnName("Group_Member_ID");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Home_Phone");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("money")
                    .HasColumnName("Hourly_Rate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImAddress)
                    .HasMaxLength(50)
                    .HasColumnName("IM_Address");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(64)
                    .HasColumnName("Job_Title");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(64)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Mobile_Phone");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Pager).HasMaxLength(50);

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("Primary_Email");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("Primary_Login");

                entity.Property(e => e.SkillLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Skill_Level");

                entity.Property(e => e.SmsEmail)
                    .HasMaxLength(100)
                    .HasColumnName("SMS_Email");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Title).HasMaxLength(64);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0003)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0003");

                entity.Property(e => e.Udf0005).HasColumnName("UDF0005");

                entity.Property(e => e.Udf0006)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF0006");

                entity.Property(e => e.UdfBadgeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Badge_Number");

                entity.Property(e => e.UdfDistinguishedName)
                    .HasMaxLength(500)
                    .HasColumnName("UDF_Distinguished_Name");

                entity.Property(e => e.UdfEmployeeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Employee_Number");

                entity.Property(e => e.UdfLunchPeriod)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Lunch_Period");

                entity.Property(e => e.UdfPrimaryGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Primary_Group");

                entity.Property(e => e.UdfVehicleColor)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Color");

                entity.Property(e => e.UdfVehicleMake)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Make");

                entity.Property(e => e.UdfVehicleModel)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Model");

                entity.Property(e => e.UdfVehicleYear)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Vehicle_Year");
            });

            modelBuilder.Entity<Hardware>(entity =>
            {
                entity.ToTable("Hardware");

                entity.HasIndex(e => e.StatusId, "IDX_Hardware_Status");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Audit_Date");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ImportId).HasColumnName("Import_ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PrimaryIpAddress)
                    .HasMaxLength(50)
                    .HasColumnName("Primary_IP_Address");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0007)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0007");

                entity.Property(e => e.UdfImei)
                    .HasMaxLength(15)
                    .HasColumnName("UDF_IMEI");

                entity.Property(e => e.UdfLegacyWarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Legacy_Warranty_Exp");

                entity.Property(e => e.UdfPhoneNumber)
                    .HasMaxLength(64)
                    .HasColumnName("UDF_Phone_Number");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Hardwares)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Hardware_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Hardwares)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Hardware_FK1");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.Hardwares)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("Brands_Hardware_FK1");

                entity.HasOne(d => d.Network)
                    .WithMany(p => p.Hardwares)
                    .HasForeignKey(d => d.NetworkId)
                    .HasConstraintName("Networks_Hardware_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Hardwares)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Hardware_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Hardwares)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Hardware_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Hardwares)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Hardware_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Hardwares)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Hardware_FK1");
            });

            modelBuilder.Entity<HardwareList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Hardware_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(128);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Audit_Date");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImportId).HasColumnName("Import_ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.NetworkName)
                    .HasMaxLength(100)
                    .HasColumnName("Network_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PrimaryIpAddress)
                    .HasMaxLength(50)
                    .HasColumnName("Primary_IP_Address");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0007)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0007");

                entity.Property(e => e.UdfImei)
                    .HasMaxLength(15)
                    .HasColumnName("UDF_IMEI");

                entity.Property(e => e.UdfLegacyWarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Legacy_Warranty_Exp");

                entity.Property(e => e.UdfPhoneNumber)
                    .HasMaxLength(64)
                    .HasColumnName("UDF_Phone_Number");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<HardwareListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Hardware_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(128);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Audit_Date");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImportId).HasColumnName("Import_ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.NetworkName)
                    .HasMaxLength(100)
                    .HasColumnName("Network_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PrimaryIpAddress)
                    .HasMaxLength(50)
                    .HasColumnName("Primary_IP_Address");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0007)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0007");

                entity.Property(e => e.UdfImei)
                    .HasMaxLength(15)
                    .HasColumnName("UDF_IMEI");

                entity.Property(e => e.UdfLegacyWarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Legacy_Warranty_Exp");

                entity.Property(e => e.UdfPhoneNumber)
                    .HasMaxLength(64)
                    .HasColumnName("UDF_Phone_Number");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<HardwareVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Hardware_Vendors");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");
            });

            modelBuilder.Entity<History>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("History_PK")
                    .IsClustered(false);

                entity.ToTable("History");

                entity.HasIndex(e => e.ObjectId, "IX_History_Object")
                    .HasFillFactor((byte)93);

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Attribute)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ChangeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Change_Date");

                entity.Property(e => e.ChangedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Changed_by");

                entity.Property(e => e.ChangedById).HasColumnName("Changed_by_ID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(100)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.NewValue).HasColumnName("New_Value");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.OldValue).HasColumnName("Old_Value");

                entity.Property(e => e.RefObjectId).HasColumnName("Ref_Object_ID");

                entity.Property(e => e.WfActionNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Action_Num");

                entity.Property(e => e.WfItemNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Item_Num");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.Histories)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_History_FK1");
            });

            modelBuilder.Entity<HistoryList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("History_List");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Attribute)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ChangeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Change_Date");

                entity.Property(e => e.ChangedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Changed_by");

                entity.Property(e => e.ChangedById).HasColumnName("Changed_by_ID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(100)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NewValue).HasColumnName("New_Value");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.OldValue).HasColumnName("Old_Value");

                entity.Property(e => e.RefObjectId).HasColumnName("Ref_Object_ID");

                entity.Property(e => e.WfActionNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Action_Num");

                entity.Property(e => e.WfItemNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Item_Num");
            });

            modelBuilder.Entity<HtmlImage>(entity =>
            {
                entity.ToTable("HTML_Images");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ImageType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Image_Type");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");
            });

            modelBuilder.Entity<HtmlPreview>(entity =>
            {
                entity.ToTable("HTML_Preview");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ObjectClass).HasColumnName("Object_Class");
            });

            modelBuilder.Entity<HtmlStyle>(entity =>
            {
                entity.ToTable("HTML_Style");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AttachmentTemplate).HasColumnName("Attachment_Template");

                entity.Property(e => e.BodyTemplate).HasColumnName("Body_Template");

                entity.Property(e => e.CategoryTemplate).HasColumnName("Category_Template");

                entity.Property(e => e.HtmlStyle1).HasColumnName("HTML_Style");
            });

            modelBuilder.Entity<ImportContactsLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Import_Contacts_Log");

                entity.Property(e => e.Comments).HasMaxLength(1024);

                entity.Property(e => e.CreatedAccounts).HasColumnName("Created_Accounts");

                entity.Property(e => e.CreatedLocations).HasColumnName("Created_Locations");

                entity.Property(e => e.CreatedOrganizations).HasColumnName("Created_Organizations");

                entity.Property(e => e.CreatedPersons).HasColumnName("Created_Persons");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.JobName)
                    .HasMaxLength(310)
                    .HasColumnName("Job_Name");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.TotalUsers).HasColumnName("Total_Users");

                entity.Property(e => e.UpdatedPersons).HasColumnName("Updated_Persons");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Upload_Date");
            });

            modelBuilder.Entity<Incident>(entity =>
            {
                entity.HasIndex(e => e.ChangeRequestId, "IX_Incidents_Change_Request");

                entity.HasIndex(e => e.RelatedCiId, "IX_Incidents_Related_CI");

                entity.HasIndex(e => e.RelatedProblemId, "IX_Incidents_Related_Problem");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FirstTimeResolved).HasColumnName("First_Time_Resolved");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedProblemId).HasColumnName("Related_Problem_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResolutionOverdue).HasColumnName("Resolution_Overdue");

                entity.Property(e => e.ResolutionTime).HasColumnName("Resolution_Time");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ResponseOverdue).HasColumnName("Response_Overdue");

                entity.Property(e => e.ResponseTime).HasColumnName("Response_Time");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002).HasColumnName("UDF0002");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.HasOne(d => d.AssigneeGroup)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.AssigneeGroupId)
                    .HasConstraintName("User_Groups_Incidents_FK1");

                entity.HasOne(d => d.Assignee)
                    .WithMany(p => p.IncidentAssignees)
                    .HasForeignKey(d => d.AssigneeId)
                    .HasConstraintName("Persons_Incidents_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Incidents_FK1");

                entity.HasOne(d => d.ChangeRequest)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.ChangeRequestId)
                    .HasConstraintName("Change_Requests_Incidents_FK1");

                entity.HasOne(d => d.ClosureCode)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.ClosureCodeId)
                    .HasConstraintName("Ticket_Closure_Code_Incidents_FK1");

                entity.HasOne(d => d.Impact)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.ImpactId)
                    .HasConstraintName("Ticket_Impact_Incidents_FK1");

                entity.HasOne(d => d.Medium)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.MediumId)
                    .HasConstraintName("Ticket_Medium_Incidents_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Incidents_FK1");

                entity.HasOne(d => d.Priority)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.PriorityId)
                    .HasConstraintName("Ticket_Priority_Incidents_FK1");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("Projects_Incidents_FK1");

                entity.HasOne(d => d.RelatedCi)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.RelatedCiId)
                    .HasConstraintName("Object_Index_Incidents_FK1");

                entity.HasOne(d => d.RelatedProblem)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.RelatedProblemId)
                    .HasConstraintName("Problems_Incidents_FK1");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.IncidentRequesters)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("Persons_Incidents_FK2");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("Services_Incidents_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Incidents_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Incidents_FK1");

                entity.HasOne(d => d.Urgency)
                    .WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.UrgencyId)
                    .HasConstraintName("Ticket_Urgency_Incidents_FK1");
            });

            modelBuilder.Entity<IncidentList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Incident_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ChangeRequest)
                    .HasMaxLength(25)
                    .HasColumnName("Change_Request");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FirstTimeResolved).HasColumnName("First_Time_Resolved");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingComment).HasColumnName("Rating_Comment");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.RelatedProblemId).HasColumnName("Related_Problem_ID");

                entity.Property(e => e.RelatedProblemTicket)
                    .HasMaxLength(25)
                    .HasColumnName("Related_Problem_Ticket");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResolutionOverdue).HasColumnName("Resolution_Overdue");

                entity.Property(e => e.ResolutionTime).HasColumnName("Resolution_Time");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ResponseOverdue).HasColumnName("Response_Overdue");

                entity.Property(e => e.ResponseTime).HasColumnName("Response_Time");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002).HasColumnName("UDF0002");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<IncidentListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Incident_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ChangeRequest)
                    .HasMaxLength(25)
                    .HasColumnName("Change_Request");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FirstTimeResolved).HasColumnName("First_Time_Resolved");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingComment).HasColumnName("Rating_Comment");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.RelatedProblemId).HasColumnName("Related_Problem_ID");

                entity.Property(e => e.RelatedProblemTicket)
                    .HasMaxLength(25)
                    .HasColumnName("Related_Problem_Ticket");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResolutionOverdue).HasColumnName("Resolution_Overdue");

                entity.Property(e => e.ResolutionTime).HasColumnName("Resolution_Time");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ResponseOverdue).HasColumnName("Response_Overdue");

                entity.Property(e => e.ResponseTime).HasColumnName("Response_Time");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002).HasColumnName("UDF0002");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<IncidentsByCrSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Incidents_By_CR_Summary");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");
            });

            modelBuilder.Entity<IncidentsByProblemSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Incidents_By_Problem_Summary");

                entity.Property(e => e.RelatedProblemId).HasColumnName("Related_Problem_ID");
            });

            modelBuilder.Entity<IpAddress>(entity =>
            {
                entity.ToTable("IP_Addresses");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.IpAddress1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("IP_Address");

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.HasOne(d => d.Network)
                    .WithMany(p => p.IpAddresses)
                    .HasForeignKey(d => d.NetworkId)
                    .HasConstraintName("Networks_IP_Addresses_FK1");
            });

            modelBuilder.Entity<IpAddressLink>(entity =>
            {
                entity.ToTable("IP_Address_Links");

                entity.HasIndex(e => e.IpAddressId, "IX_IP_Address_Links_IP_Address");

                entity.HasIndex(e => e.ObjectId, "IX_IP_Address_Links_Object_index");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.IpAddressId).HasColumnName("IP_Address_ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.HasOne(d => d.IpAddress)
                    .WithMany(p => p.IpAddressLinks)
                    .HasForeignKey(d => d.IpAddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("IP_Addresses_IP_Address_Links_FK1");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.IpAddressLinks)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_IP_Address_Links_FK1");
            });

            modelBuilder.Entity<IpAddressLinkList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IP_Address_Link_List");

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(50)
                    .HasColumnName("Asset_Class");

                entity.Property(e => e.CiOid)
                    .HasMaxLength(276)
                    .HasColumnName("CI_OID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("IP_Address");

                entity.Property(e => e.IpAddressId).HasColumnName("IP_Address_ID");

                entity.Property(e => e.NetworkName)
                    .HasMaxLength(100)
                    .HasColumnName("Network_Name");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");
            });

            modelBuilder.Entity<IpAddressList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IP_Address_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("IP_Address");

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.NetworkName)
                    .HasMaxLength(100)
                    .HasColumnName("Network_Name");
            });

            modelBuilder.Entity<KbArticle>(entity =>
            {
                entity.ToTable("KB_Articles");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ApprovedById).HasColumnName("Approved_by_ID");

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.ContentText).HasColumnName("Content_Text");

                entity.Property(e => e.Oid)
                    .HasMaxLength(50)
                    .HasColumnName("OID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.HasOne(d => d.ApprovedBy)
                    .WithMany(p => p.KbArticleApprovedBies)
                    .HasForeignKey(d => d.ApprovedById)
                    .HasConstraintName("Persons_KB_Articles_FK2");

                entity.HasOne(d => d.Author)
                    .WithMany(p => p.KbArticleAuthors)
                    .HasForeignKey(d => d.AuthorId)
                    .HasConstraintName("Persons_KB_Articles_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.KbArticleOwners)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_KB_Articles_FK3");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.KbArticles)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_KB_Articles_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.KbArticles)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_KB_Articles_FK1");
            });

            modelBuilder.Entity<KbArticleCategoriesList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KB_Article_Categories_List");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.KbArticleId).HasColumnName("KB_Article_ID");

                entity.Property(e => e.KbCategoryId).HasColumnName("KB_Category_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(50)
                    .HasColumnName("OID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<KbArticleCategory>(entity =>
            {
                entity.ToTable("KB_Article_Categories");

                entity.HasIndex(e => e.KbArticleId, "IX_KB_Article_Categories_KB_Article");

                entity.HasIndex(e => e.KbCategoryId, "IX_KB_Article_Categories_KB_Category");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.KbArticleId).HasColumnName("KB_Article_ID");

                entity.Property(e => e.KbCategoryId).HasColumnName("KB_Category_ID");

                entity.HasOne(d => d.KbArticle)
                    .WithMany(p => p.KbArticleCategories)
                    .HasForeignKey(d => d.KbArticleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("KB_Articles_KB_Article_Categories_FK1");

                entity.HasOne(d => d.KbCategory)
                    .WithMany(p => p.KbArticleCategories)
                    .HasForeignKey(d => d.KbCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("KB_Category_KB_Article_Categories_FK1");
            });

            modelBuilder.Entity<KbArticleList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KB_Article_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Approved_by");

                entity.Property(e => e.ApprovedById).HasColumnName("Approved_by_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Author).HasMaxLength(276);

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.ContentText).HasColumnName("Content_Text");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(50)
                    .HasColumnName("OID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<KbArticleListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KB_Article_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Approved_by");

                entity.Property(e => e.ApprovedById).HasColumnName("Approved_by_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Author).HasMaxLength(276);

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.ContentText).HasColumnName("Content_Text");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(50)
                    .HasColumnName("OID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<KbArticleListWithCategoryId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KB_Article_List_With_Category_ID");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Approved_by");

                entity.Property(e => e.ApprovedById).HasColumnName("Approved_by_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Author).HasMaxLength(276);

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.ContentText).HasColumnName("Content_Text");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.KbCategoryId).HasColumnName("KB_Category_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(50)
                    .HasColumnName("OID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<KbArticleOrganization>(entity =>
            {
                entity.ToTable("KB_Article_Organizations");

                entity.HasIndex(e => new { e.OrganizationId, e.KbArticleId }, "IDX_KB_Article_Organizations")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.KbArticleId).HasColumnName("KB_Article_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.HasOne(d => d.KbArticle)
                    .WithMany(p => p.KbArticleOrganizations)
                    .HasForeignKey(d => d.KbArticleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("KB_Articles_KB_Article_Organizations_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.KbArticleOrganizations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organizational_Units_KB_Article_Organizations_FK1");
            });

            modelBuilder.Entity<KbCategory>(entity =>
            {
                entity.ToTable("KB_Category");

                entity.HasIndex(e => e.ParentId, "IX_KB_Category_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("KB_Category_KB_Category_FK1");
            });

            modelBuilder.Entity<KbCategoryArticlesList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KB_Category_Articles_List");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.KbArticleId).HasColumnName("KB_Article_ID");

                entity.Property(e => e.KbCategoryId).HasColumnName("KB_Category_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<KbCategoryList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KB_Category_List");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<KbCategoryListAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KB_Category_List_All");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<LeftObjectRelationClass>(entity =>
            {
                entity.ToTable("Left_Object_Relation_Classes");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.RelationTypeId).HasColumnName("Relation_Type_ID");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.LeftObjectRelationClasses)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Class_Left_Object_Relation_Classes_FK1");

                entity.HasOne(d => d.RelationType)
                    .WithMany(p => p.LeftObjectRelationClasses)
                    .HasForeignKey(d => d.RelationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Relation_Type_Left_Object_Relation_Classes_FK1");
            });

            modelBuilder.Entity<Library>(entity =>
            {
                entity.ToTable("Library");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.CheckOutDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Check_Out_Date");

                entity.Property(e => e.CheckedOutToId).HasColumnName("Checked_Out_to_ID");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.Libraries)
                    .HasForeignKey(d => d.AssetId)
                    .HasConstraintName("Assets_Library_FK1");

                entity.HasOne(d => d.CheckedOutTo)
                    .WithMany(p => p.LibraryCheckedOutTos)
                    .HasForeignKey(d => d.CheckedOutToId)
                    .HasConstraintName("Persons_Library_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.LibraryOwners)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Library_FK2");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Libraries)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Library_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Libraries)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Library_FK1");
            });

            modelBuilder.Entity<LibraryHistory>(entity =>
            {
                entity.ToTable("Library_History");

                entity.HasIndex(e => e.LibraryItemId, "IX_Library_History_Item");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.LibraryItemId).HasColumnName("Library_Item_ID");

                entity.Property(e => e.OutDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Out_Date");

                entity.Property(e => e.ReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Return_Date");

                entity.Property(e => e.UserId).HasColumnName("User_ID");

                entity.HasOne(d => d.LibraryItem)
                    .WithMany(p => p.LibraryHistories)
                    .HasForeignKey(d => d.LibraryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Library_Library_History_FK1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.LibraryHistories)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("Persons_Library_History_FK1");
            });

            modelBuilder.Entity<LibraryHistoryList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Library_History_List");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LibraryItemId).HasColumnName("Library_Item_ID");

                entity.Property(e => e.OutDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Out_Date");

                entity.Property(e => e.ReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Return_Date");

                entity.Property(e => e.User).HasMaxLength(276);

                entity.Property(e => e.UserId).HasColumnName("User_ID");
            });

            modelBuilder.Entity<LibraryItemOrganization>(entity =>
            {
                entity.ToTable("Library_Item_Organizations");

                entity.HasIndex(e => new { e.OrganizationId, e.LibraryItemId }, "IDX_Library_Item_Organizations")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LibraryItemId).HasColumnName("Library_Item_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.HasOne(d => d.LibraryItem)
                    .WithMany(p => p.LibraryItemOrganizations)
                    .HasForeignKey(d => d.LibraryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Library_Library_Item_Organizations_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.LibraryItemOrganizations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organizational_Units_Library_Item_Organizations_FK1");
            });

            modelBuilder.Entity<LibraryList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Library_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(100);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.CheckOutDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Check_Out_Date");

                entity.Property(e => e.CheckedOutTo)
                    .HasMaxLength(276)
                    .HasColumnName("Checked_Out_to");

                entity.Property(e => e.CheckedOutToBusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Checked_Out_to_Business_Phone");

                entity.Property(e => e.CheckedOutToId).HasColumnName("Checked_Out_to_ID");

                entity.Property(e => e.CheckedOutToOrganization)
                    .HasMaxLength(2048)
                    .HasColumnName("Checked_Out_to_Organization");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");
            });

            modelBuilder.Entity<LibraryListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Library_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(100);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.CheckOutDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Check_Out_Date");

                entity.Property(e => e.CheckedOutTo)
                    .HasMaxLength(276)
                    .HasColumnName("Checked_Out_to");

                entity.Property(e => e.CheckedOutToBusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Checked_Out_to_Business_Phone");

                entity.Property(e => e.CheckedOutToId).HasColumnName("Checked_Out_to_ID");

                entity.Property(e => e.CheckedOutToOrganization)
                    .HasMaxLength(2048)
                    .HasColumnName("Checked_Out_to_Organization");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");
            });

            modelBuilder.Entity<LibraryOverdueList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Library_Overdue_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(100);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.CheckOutDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Check_Out_Date");

                entity.Property(e => e.CheckedOutTo)
                    .HasMaxLength(276)
                    .HasColumnName("Checked_Out_to");

                entity.Property(e => e.CheckedOutToBusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Checked_Out_to_Business_Phone");

                entity.Property(e => e.CheckedOutToId).HasColumnName("Checked_Out_to_ID");

                entity.Property(e => e.CheckedOutToOrganization)
                    .HasMaxLength(2048)
                    .HasColumnName("Checked_Out_to_Organization");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");
            });

            modelBuilder.Entity<License>(entity =>
            {
                entity.ToTable("License");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.License1).HasColumnName("License");
            });

            modelBuilder.Entity<LicenseAllocation>(entity =>
            {
                entity.ToTable("License_Allocations");

                entity.HasIndex(e => e.ObjectId, "IX_License_Allocations_Object");

                entity.HasIndex(e => e.SoftwareLicenseId, "IX_License_Allocations_Software");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AllocationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Allocation_Date");

                entity.Property(e => e.AutoAdded).HasColumnName("Auto_Added");

                entity.Property(e => e.AutoDeallocate).HasColumnName("Auto_Deallocate");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.LicenseAllocations)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_License_Allocations_FK1");

                entity.HasOne(d => d.SoftwareLicense)
                    .WithMany(p => p.LicenseAllocations)
                    .HasForeignKey(d => d.SoftwareLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Software_Licenses_License_Allocations_FK1");
            });

            modelBuilder.Entity<LicenseAllocationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("License_Allocation_List");

                entity.Property(e => e.AllocationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Allocation_Date");

                entity.Property(e => e.DeviceName)
                    .HasMaxLength(100)
                    .HasColumnName("Device_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.Reconciled)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");
            });

            modelBuilder.Entity<LicenseAllocationListByObject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("License_Allocation_List_By_Object");

                entity.Property(e => e.AllocationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Allocation_Date");

                entity.Property(e => e.AutoAdded).HasColumnName("Auto_Added");

                entity.Property(e => e.AutoDeallocate).HasColumnName("Auto_Deallocate");

                entity.Property(e => e.Conformance)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.LicenseQty).HasColumnName("License_Qty");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.MasterLicense).HasColumnName("Master_License");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Policy).HasMaxLength(50);

                entity.Property(e => e.Reconciled)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.TrackedSoftware)
                    .HasMaxLength(100)
                    .HasColumnName("Tracked_Software");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<LicenseAllocationsActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("License_Allocations_Actual");

                entity.Property(e => e.AllocationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Allocation_Date");

                entity.Property(e => e.AutoAdded).HasColumnName("Auto_Added");

                entity.Property(e => e.AutoDeallocate).HasColumnName("Auto_Deallocate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");
            });

            modelBuilder.Entity<LicenseTrackingType>(entity =>
            {
                entity.ToTable("License_Tracking_Types");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LinkSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Link_Summary");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasIndex(e => e.ParentId, "IX_Locations_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Location1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Location");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Placement)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TimeZone)
                    .HasMaxLength(255)
                    .HasColumnName("Time_Zone");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("Persons_Locations_FK1");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("Locations_Locations_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Locations_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Locations_FK1");
            });

            modelBuilder.Entity<LocationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Location_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Placement)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TimeZone)
                    .HasMaxLength(255)
                    .HasColumnName("Time_Zone");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<LocationListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Location_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Placement)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TimeZone)
                    .HasMaxLength(255)
                    .HasColumnName("Time_Zone");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<LoggedAccountViewSettingsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Logged_Account_View_Settings_List");

                entity.Property(e => e.AccountId).HasColumnName("Account_ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.CurrentId).HasColumnName("Current_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ObjectKind).HasColumnName("Object_Kind");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");
            });

            modelBuilder.Entity<LoggedPersonViewList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Logged_Person_View_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.View).IsRequired();
            });

            modelBuilder.Entity<MailConnectorLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Mail_Connector_Log");

                entity.Property(e => e.Comments).HasMaxLength(1024);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.JobName)
                    .HasMaxLength(310)
                    .HasColumnName("Job_Name");

                entity.Property(e => e.MessagesInBox).HasColumnName("Messages_In_Box");

                entity.Property(e => e.ReceivedMessages).HasColumnName("Received_Messages");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Upload_Date");
            });

            modelBuilder.Entity<MyRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("My_Requests");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<Network>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.IpFrom)
                    .HasMaxLength(15)
                    .HasColumnName("IP_from");

                entity.Property(e => e.IpTo)
                    .HasMaxLength(15)
                    .HasColumnName("IP_to");

                entity.Property(e => e.Ipv6From)
                    .HasMaxLength(50)
                    .HasColumnName("IPv6_From");

                entity.Property(e => e.Ipv6To)
                    .HasMaxLength(50)
                    .HasColumnName("IPv6_To");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Networks)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Networks_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Networks)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Networks_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Networks)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Networks_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Networks)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Networks_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Networks)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Networks_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Networks)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Networks_FK1");
            });

            modelBuilder.Entity<NetworkList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Network_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IpFrom)
                    .HasMaxLength(15)
                    .HasColumnName("IP_from");

                entity.Property(e => e.IpTo)
                    .HasMaxLength(15)
                    .HasColumnName("IP_to");

                entity.Property(e => e.Ipv6From)
                    .HasMaxLength(50)
                    .HasColumnName("IPv6_From");

                entity.Property(e => e.Ipv6To)
                    .HasMaxLength(50)
                    .HasColumnName("IPv6_To");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<NetworkListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Network_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IpFrom)
                    .HasMaxLength(15)
                    .HasColumnName("IP_from");

                entity.Property(e => e.IpTo)
                    .HasMaxLength(15)
                    .HasColumnName("IP_to");

                entity.Property(e => e.Ipv6From)
                    .HasMaxLength(50)
                    .HasColumnName("IPv6_From");

                entity.Property(e => e.Ipv6To)
                    .HasMaxLength(50)
                    .HasColumnName("IPv6_To");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<NotificationLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Notification_Log");

                entity.Property(e => e.Comments).HasMaxLength(1024);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Upload_Date");
            });

            modelBuilder.Entity<ObjectAttachment>(entity =>
            {
                entity.ToTable("Object_Attachments");

                entity.HasIndex(e => e.AttachmentId, "IDX_Object_Attachments");

                entity.HasIndex(e => e.ActivityId, "IDX_Object_Attachments_Activity");

                entity.HasIndex(e => e.ObjectId, "IDX_Object_Attachments_Object");

                entity.HasIndex(e => new { e.ObjectId, e.ActivityId, e.AttachmentId }, "Object_Attachments_Unique")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActivityId).HasColumnName("Activity_ID");

                entity.Property(e => e.AttachmentId).HasColumnName("Attachment_ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ObjectAttachments)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("Activity_Object_Attachments_FK1");

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.ObjectAttachments)
                    .HasForeignKey(d => d.AttachmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Attachments_Object_Attachments_FK1");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.ObjectAttachments)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_Object_Attachments_FK1");
            });

            modelBuilder.Entity<ObjectAttachmentList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Attachment_List");

                entity.Property(e => e.ActivityNum).HasColumnName("Activity_Num");

                entity.Property(e => e.AttachmentId).HasColumnName("Attachment_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("File_Name");

                entity.Property(e => e.FileSize).HasColumnName("File_Size");

                entity.Property(e => e.FileType)
                    .HasMaxLength(10)
                    .HasColumnName("File_Type");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFile).HasColumnName("Is_File");

                entity.Property(e => e.LinkCount).HasColumnName("Link_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedById).HasColumnName("Modified_by_ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ObjectAttachmentsSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Attachments_Summary");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.TotalSize).HasColumnName("Total_Size");
            });

            modelBuilder.Entity<ObjectCategory>(entity =>
            {
                entity.ToTable("Object_Category");

                entity.HasIndex(e => e.ClassId, "IX_Object_Category_Class");

                entity.HasIndex(e => e.ParentId, "IX_Object_Category_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.Property(e => e.SubClassId).HasColumnName("Sub_Class_ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.ObjectCategoryClasses)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Class_Object_Category_FK1");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("Object_Category_Object_Category_FK1");

                entity.HasOne(d => d.SubClass)
                    .WithMany(p => p.ObjectCategorySubClasses)
                    .HasForeignKey(d => d.SubClassId)
                    .HasConstraintName("Object_Class_Object_Category_FK2");
            });

            modelBuilder.Entity<ObjectCategoryActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Category_Active");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.Property(e => e.SubClassId).HasColumnName("Sub_Class_ID");

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<ObjectCategoryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Category_View");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CategoryFullName)
                    .IsRequired()
                    .HasMaxLength(2101)
                    .HasColumnName("Category_Full_Name");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.Property(e => e.SubClassId).HasColumnName("Sub_Class_ID");

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<ObjectClass>(entity =>
            {
                entity.ToTable("Object_Class");

                entity.HasIndex(e => e.ClassIndex, "Object_Class_Class_Index_Unq")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Ci).HasColumnName("CI");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasColumnName("Table_Name");
            });

            modelBuilder.Entity<ObjectFlag>(entity =>
            {
                entity.ToTable("Object_Flags");

                entity.HasIndex(e => e.PersonId, "IX_Object_Flags_Person");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.ObjectFlags)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_Object_Flags_FK1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.ObjectFlags)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_Object_Flags_FK1");
            });

            modelBuilder.Entity<ObjectIndex>(entity =>
            {
                entity.ToTable("Object_Index");

                entity.HasIndex(e => new { e.ClassId, e.StatusId }, "IDX_Object_Index_Object")
                    .HasFillFactor((byte)93);

                entity.HasIndex(e => e.TypeId, "IDX_Object_Index_Type");

                entity.HasIndex(e => e.Oid, "IX_Object_Index_OID");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.ModifiedById).HasColumnName("Modified_by_ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.ObjectIndices)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgObjectClasses_cfgObjects_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ObjectIndices)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Object_Index_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ObjectIndices)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Object_Index_FK1");
            });

            modelBuilder.Entity<ObjectList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_List");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedById).HasColumnName("Modified_by_ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ObjectListAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_List_All");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedById).HasColumnName("Modified_by_ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ObjectRelation>(entity =>
            {
                entity.ToTable("Object_Relations");

                entity.HasIndex(e => e.LeftObjectId, "IX_Object_Relations_Left");

                entity.HasIndex(e => e.RightObjectId, "IX_Object_Relations_Right");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LeftObjectId).HasColumnName("Left_Object_ID");

                entity.Property(e => e.RightObjectId).HasColumnName("Right_Object_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.LeftObject)
                    .WithMany(p => p.ObjectRelationLeftObjects)
                    .HasForeignKey(d => d.LeftObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgObjects_Relationships_FK1");

                entity.HasOne(d => d.RightObject)
                    .WithMany(p => p.ObjectRelationRightObjects)
                    .HasForeignKey(d => d.RightObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgObjects_Relationships_FK2");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ObjectRelations)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Relationship_Types_Relationships_FK1");
            });

            modelBuilder.Entity<ObjectRelationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Relation_List");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinkedObjectId).HasColumnName("Linked_Object_ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.RelationTypeId).HasColumnName("Relation_Type_ID");

                entity.Property(e => e.RelationshipType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Relationship_Type");
            });

            modelBuilder.Entity<ObjectRelationListId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Relation_List_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinkedObjectId).HasColumnName("Linked_Object_ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.RelationTypeId).HasColumnName("Relation_Type_ID");

                entity.Property(e => e.RelationshipType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Relationship_Type");
            });

            modelBuilder.Entity<ObjectRelationType>(entity =>
            {
                entity.ToTable("Object_Relation_Type");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FieldLink).HasColumnName("Field_Link");

                entity.Property(e => e.InverseName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Inverse_Name");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ObjectRelationUnion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Relation_Union");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinkedObjectId).HasColumnName("Linked_Object_ID");

                entity.Property(e => e.Object).HasMaxLength(554);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.RelationTypeId).HasColumnName("Relation_Type_ID");

                entity.Property(e => e.RelationshipType)
                    .HasMaxLength(100)
                    .HasColumnName("Relationship_Type");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ObjectRelationUnionActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Relation_Union_Active");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinkedObjectId).HasColumnName("Linked_Object_ID");

                entity.Property(e => e.Object).HasMaxLength(554);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.RelationTypeId).HasColumnName("Relation_Type_ID");

                entity.Property(e => e.RelationshipType)
                    .HasMaxLength(100)
                    .HasColumnName("Relationship_Type");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ObjectRelationUnionSimple>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Relation_Union_Simple");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinkedObjectId).HasColumnName("Linked_Object_ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.RelationTypeId).HasColumnName("Relation_Type_ID");

                entity.Property(e => e.RelationshipType)
                    .HasMaxLength(100)
                    .HasColumnName("Relationship_Type");
            });

            modelBuilder.Entity<ObjectStatusActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Status_Active");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<ObjectType>(entity =>
            {
                entity.ToTable("Object_Type");

                entity.HasIndex(e => e.ClassId, "IX_Object_Types_Class");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.ObjectTypes)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cfgObjectClasses_Object_Types_FK1");
            });

            modelBuilder.Entity<ObjectTypeActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Type_Active");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ObjectTypeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Object_Type_View");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeFullName)
                    .IsRequired()
                    .HasMaxLength(103)
                    .HasColumnName("Type_Full_Name");
            });

            modelBuilder.Entity<OrganizationalUnit>(entity =>
            {
                entity.ToTable("Organizational_Units");

                entity.HasIndex(e => e.ParentId, "IX_Organizational_Units_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Placement).HasMaxLength(2048);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.OrganizationalUnits)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Organizational_Units_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.OrganizationalUnits)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Organizational_Units_FK1");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.OrganizationalUnits)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("Persons_Organizational_Units_FK1");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("Organizational_Units_Organizational_Units_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.OrganizationalUnits)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Organizational_Units_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.OrganizationalUnits)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Organizational_Units_FK1");
            });

            modelBuilder.Entity<OrganizationalUnitList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Organizational_Unit_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.PersonsCount).HasColumnName("Persons_Count");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Placement).HasMaxLength(2048);

                entity.Property(e => e.SlaCount).HasColumnName("SLA_Count");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<OrganizationalUnitListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Organizational_Unit_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.PersonsCount).HasColumnName("Persons_Count");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Placement).HasMaxLength(2048);

                entity.Property(e => e.SlaCount).HasColumnName("SLA_Count");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Address3).HasColumnName("Address_3");

                entity.Property(e => e.AdimportId).HasColumnName("ADImport_ID");

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.BusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Business_Phone");

                entity.Property(e => e.CalendarId).HasColumnName("Calendar_ID");

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.GenderId).HasColumnName("Gender_ID");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Home_Phone");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("money")
                    .HasColumnName("Hourly_Rate");

                entity.Property(e => e.ImAddress)
                    .HasMaxLength(50)
                    .HasColumnName("IM_Address");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(64)
                    .HasColumnName("Job_Title");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(64)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Mobile_Phone");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Pager).HasMaxLength(50);

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("Primary_Email");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("Primary_Login");

                entity.Property(e => e.SkillLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Skill_Level");

                entity.Property(e => e.SmsEmail)
                    .HasMaxLength(100)
                    .HasColumnName("SMS_Email");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(64);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0003)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0003");

                entity.Property(e => e.Udf0005).HasColumnName("UDF0005");

                entity.Property(e => e.Udf0006)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF0006");

                entity.Property(e => e.UdfBadgeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Badge_Number");

                entity.Property(e => e.UdfDistinguishedName)
                    .HasMaxLength(500)
                    .HasColumnName("UDF_Distinguished_Name");

                entity.Property(e => e.UdfEmployeeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Employee_Number");

                entity.Property(e => e.UdfLunchPeriod)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Lunch_Period");

                entity.Property(e => e.UdfPrimaryGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Primary_Group");

                entity.Property(e => e.UdfVehicleColor)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Color");

                entity.Property(e => e.UdfVehicleMake)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Make");

                entity.Property(e => e.UdfVehicleModel)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Model");

                entity.Property(e => e.UdfVehicleYear)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Vehicle_Year");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.CalendarId)
                    .HasConstraintName("Work_Calendars_Persons_FK1");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.GenderId)
                    .HasConstraintName("Gender_Persons_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Persons_FK1");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.InverseManager)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("Persons_Persons_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Persons_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Persons_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Persons_FK1");
            });

            modelBuilder.Entity<PersonEmail>(entity =>
            {
                entity.ToTable("Person_Emails");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonEmails)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_Person_Emails_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.PersonEmails)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Email_Types_Person_Emails_FK1");
            });

            modelBuilder.Entity<PersonEmailList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Person_Email_List");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.EmailType)
                    .HasMaxLength(50)
                    .HasColumnName("Email_Type");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<PersonList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Person_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Address3).HasColumnName("Address_3");

                entity.Property(e => e.AdimportId).HasColumnName("ADImport_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AvailableNow)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Available_Now");

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.BusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Business_Phone");

                entity.Property(e => e.Calendar).HasMaxLength(100);

                entity.Property(e => e.CalendarId).HasColumnName("Calendar_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.GenderId).HasColumnName("Gender_ID");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Home_Phone");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("money")
                    .HasColumnName("Hourly_Rate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImAddress)
                    .HasMaxLength(50)
                    .HasColumnName("IM_Address");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(64)
                    .HasColumnName("Job_Title");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(64)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Mobile_Phone");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Pager).HasMaxLength(50);

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("Primary_Email");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("Primary_Login");

                entity.Property(e => e.SkillLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Skill_Level");

                entity.Property(e => e.SmsEmail)
                    .HasMaxLength(100)
                    .HasColumnName("SMS_Email");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Title).HasMaxLength(64);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0003)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0003");

                entity.Property(e => e.Udf0005).HasColumnName("UDF0005");

                entity.Property(e => e.Udf0006)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF0006");

                entity.Property(e => e.UdfBadgeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Badge_Number");

                entity.Property(e => e.UdfDistinguishedName)
                    .HasMaxLength(500)
                    .HasColumnName("UDF_Distinguished_Name");

                entity.Property(e => e.UdfEmployeeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Employee_Number");

                entity.Property(e => e.UdfLunchPeriod)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Lunch_Period");

                entity.Property(e => e.UdfPrimaryGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Primary_Group");

                entity.Property(e => e.UdfVehicleColor)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Color");

                entity.Property(e => e.UdfVehicleMake)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Make");

                entity.Property(e => e.UdfVehicleModel)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Model");

                entity.Property(e => e.UdfVehicleYear)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Vehicle_Year");
            });

            modelBuilder.Entity<PersonListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Person_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Address3).HasColumnName("Address_3");

                entity.Property(e => e.AdimportId).HasColumnName("ADImport_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AvailableNow)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Available_Now");

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.BusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Business_Phone");

                entity.Property(e => e.Calendar).HasMaxLength(100);

                entity.Property(e => e.CalendarId).HasColumnName("Calendar_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.GenderId).HasColumnName("Gender_ID");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Home_Phone");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("money")
                    .HasColumnName("Hourly_Rate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImAddress)
                    .HasMaxLength(50)
                    .HasColumnName("IM_Address");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(64)
                    .HasColumnName("Job_Title");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(64)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Mobile_Phone");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Pager).HasMaxLength(50);

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("Primary_Email");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("Primary_Login");

                entity.Property(e => e.SkillLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Skill_Level");

                entity.Property(e => e.SmsEmail)
                    .HasMaxLength(100)
                    .HasColumnName("SMS_Email");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Title).HasMaxLength(64);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0003)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0003");

                entity.Property(e => e.Udf0005).HasColumnName("UDF0005");

                entity.Property(e => e.Udf0006)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF0006");

                entity.Property(e => e.UdfBadgeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Badge_Number");

                entity.Property(e => e.UdfDistinguishedName)
                    .HasMaxLength(500)
                    .HasColumnName("UDF_Distinguished_Name");

                entity.Property(e => e.UdfEmployeeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Employee_Number");

                entity.Property(e => e.UdfLunchPeriod)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Lunch_Period");

                entity.Property(e => e.UdfPrimaryGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Primary_Group");

                entity.Property(e => e.UdfVehicleColor)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Color");

                entity.Property(e => e.UdfVehicleMake)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Make");

                entity.Property(e => e.UdfVehicleModel)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Model");

                entity.Property(e => e.UdfVehicleYear)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Vehicle_Year");
            });

            modelBuilder.Entity<PersonLogin>(entity =>
            {
                entity.ToTable("Person_Logins");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonLogins)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_Person_Logins_FK1");
            });

            modelBuilder.Entity<PersonalFlag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Personal_Flags");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");
            });

            modelBuilder.Entity<PhysicalCiAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Physical_CI_All");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<Po>(entity =>
            {
                entity.ToTable("PO");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AuthorizedById).HasColumnName("Authorized_by_ID");

                entity.Property(e => e.BillTo)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to");

                entity.Property(e => e.BillToAddress).HasColumnName("Bill_to_Address");

                entity.Property(e => e.BillToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Contact");

                entity.Property(e => e.BillToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Email");

                entity.Property(e => e.BillToFax)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Fax");

                entity.Property(e => e.BillToPhone)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Phone");

                entity.Property(e => e.BudgetId).HasColumnName("Budget_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.DateRequired)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Required");

                entity.Property(e => e.FreightTermsId).HasColumnName("Freight_Terms_ID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PaymentTermsId).HasColumnName("Payment_Terms_ID");

                entity.Property(e => e.PoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Date");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(25)
                    .HasColumnName("PO_Number");

                entity.Property(e => e.PriceAdjustment)
                    .HasColumnType("money")
                    .HasColumnName("Price_Adjustment");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.SalesTax)
                    .HasColumnType("money")
                    .HasColumnName("Sales_Tax");

                entity.Property(e => e.ShipTo)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to");

                entity.Property(e => e.ShipToAddress).HasColumnName("Ship_to_Address");

                entity.Property(e => e.ShipToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Contact");

                entity.Property(e => e.ShipToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Email");

                entity.Property(e => e.ShipToFax)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Fax");

                entity.Property(e => e.ShipToPhone)
                    .HasMaxLength(20)
                    .HasColumnName("Ship_to_Phone");

                entity.Property(e => e.ShippingId).HasColumnName("Shipping_ID");

                entity.Property(e => e.ShippingPrice)
                    .HasColumnType("money")
                    .HasColumnName("Shipping_Price");

                entity.Property(e => e.ShippingTaxRate).HasColumnName("Shipping_Tax_Rate");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");

                entity.Property(e => e.VendorAddress).HasColumnName("Vendor_Address");

                entity.Property(e => e.VendorContact)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Contact");

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(255)
                    .HasColumnName("Vendor_Email");

                entity.Property(e => e.VendorFax)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Fax");

                entity.Property(e => e.VendorFein)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_FEIN");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(100)
                    .HasColumnName("Vendor_Name");

                entity.Property(e => e.VendorPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Phone");

                entity.HasOne(d => d.AuthorizedBy)
                    .WithMany(p => p.PoAuthorizedBies)
                    .HasForeignKey(d => d.AuthorizedById)
                    .HasConstraintName("Persons_PO_FK2");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.Pos)
                    .HasForeignKey(d => d.BudgetId)
                    .HasConstraintName("Budgets_PO_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Pos)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_PO_FK1");

                entity.HasOne(d => d.FreightTerms)
                    .WithMany(p => p.Pos)
                    .HasForeignKey(d => d.FreightTermsId)
                    .HasConstraintName("PO_Freight_Terms_PO_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Pos)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_PO_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.PoOwners)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_PO_FK3");

                entity.HasOne(d => d.PaymentTerms)
                    .WithMany(p => p.Pos)
                    .HasForeignKey(d => d.PaymentTermsId)
                    .HasConstraintName("PO_Payment_Terms_PO_FK1");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.PoRequesters)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("Persons_PO_FK1");

                entity.HasOne(d => d.Shipping)
                    .WithMany(p => p.Pos)
                    .HasForeignKey(d => d.ShippingId)
                    .HasConstraintName("PO_Shipping_PO_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Pos)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_PO_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Pos)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_PO_FK1");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Pos)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("Vendors_PO_FK1");
            });

            modelBuilder.Entity<PoFreightTerm>(entity =>
            {
                entity.ToTable("PO_Freight_Terms");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<PoFreightTermsActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PO_Freight_Terms_Active");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<PoItem>(entity =>
            {
                entity.ToTable("PO_Items");

                entity.HasIndex(e => e.PoId, "IX_PO_Items_PO_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AssetCategoryId).HasColumnName("Asset_Category_ID");

                entity.Property(e => e.AssetTypeId).HasColumnName("Asset_Type_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerCategoryId).HasColumnName("Computer_Category_ID");

                entity.Property(e => e.ComputerTypeId).HasColumnName("Computer_Type_ID");

                entity.Property(e => e.ConsumableCategoryId).HasColumnName("Consumable_Category_ID");

                entity.Property(e => e.ConsumableTypeId).HasColumnName("Consumable_Type_ID");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion_Factor");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.HardwareCategoryId).HasColumnName("Hardware_Category_ID");

                entity.Property(e => e.HardwareTypeId).HasColumnName("Hardware_Type_ID");

                entity.Property(e => e.LinePrice)
                    .HasColumnType("money")
                    .HasColumnName("Line_Price");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoId).HasColumnName("PO_ID");

                entity.Property(e => e.ProductClassId).HasColumnName("Product_Class_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchasingUomId).HasColumnName("Purchasing_UOM_ID");

                entity.Property(e => e.QtyReceived).HasColumnName("Qty_Received");

                entity.Property(e => e.ReturnPeriod).HasColumnName("Return_Period");

                entity.Property(e => e.ReturnPolicy).HasColumnName("Return_Policy");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.SoftwareLicenseCategoryId).HasColumnName("Software_License_Category_ID");

                entity.Property(e => e.SoftwareLicenseTypeId).HasColumnName("Software_License_Type_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Price");

                entity.HasOne(d => d.AssetCategory)
                    .WithMany(p => p.PoItemAssetCategories)
                    .HasForeignKey(d => d.AssetCategoryId)
                    .HasConstraintName("Asset_Category_PO_Items_FK1");

                entity.HasOne(d => d.AssetType)
                    .WithMany(p => p.PoItemAssetTypes)
                    .HasForeignKey(d => d.AssetTypeId)
                    .HasConstraintName("Asset_Type_PO_Items_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.PoItemCategories)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_PO_Items_FK1");

                entity.HasOne(d => d.ComputerCategory)
                    .WithMany(p => p.PoItemComputerCategories)
                    .HasForeignKey(d => d.ComputerCategoryId)
                    .HasConstraintName("Computer_Category_PO_Items_FK1");

                entity.HasOne(d => d.ComputerType)
                    .WithMany(p => p.PoItemComputerTypes)
                    .HasForeignKey(d => d.ComputerTypeId)
                    .HasConstraintName("Computer_Type_PO_Items_FK1");

                entity.HasOne(d => d.ConsumableCategory)
                    .WithMany(p => p.PoItemConsumableCategories)
                    .HasForeignKey(d => d.ConsumableCategoryId)
                    .HasConstraintName("Consumable_Category_PO_Items_FK1");

                entity.HasOne(d => d.ConsumableType)
                    .WithMany(p => p.PoItemConsumableTypes)
                    .HasForeignKey(d => d.ConsumableTypeId)
                    .HasConstraintName("Consumable_Type_PO_Items_FK1");

                entity.HasOne(d => d.HardwareCategory)
                    .WithMany(p => p.PoItemHardwareCategories)
                    .HasForeignKey(d => d.HardwareCategoryId)
                    .HasConstraintName("Hardware_Category_PO_Items_FK1");

                entity.HasOne(d => d.HardwareType)
                    .WithMany(p => p.PoItemHardwareTypes)
                    .HasForeignKey(d => d.HardwareTypeId)
                    .HasConstraintName("Hardware_Type_PO_Items_FK1");

                entity.HasOne(d => d.Po)
                    .WithMany(p => p.PoItems)
                    .HasForeignKey(d => d.PoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PO_PO_Items_FK1");

                entity.HasOne(d => d.ProductClass)
                    .WithMany(p => p.PoItems)
                    .HasForeignKey(d => d.ProductClassId)
                    .HasConstraintName("Object_Class_PO_Items_FK1");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PoItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("Products_PO_Items_FK1");

                entity.HasOne(d => d.PurchasingUom)
                    .WithMany(p => p.PoItemPurchasingUoms)
                    .HasForeignKey(d => d.PurchasingUomId)
                    .HasConstraintName("Units_of_Measure_PO_Items_FK1");

                entity.HasOne(d => d.SoftwareLicenseCategory)
                    .WithMany(p => p.PoItemSoftwareLicenseCategories)
                    .HasForeignKey(d => d.SoftwareLicenseCategoryId)
                    .HasConstraintName("Software_License_Category_PO_Items_FK1");

                entity.HasOne(d => d.SoftwareLicenseType)
                    .WithMany(p => p.PoItemSoftwareLicenseTypes)
                    .HasForeignKey(d => d.SoftwareLicenseTypeId)
                    .HasConstraintName("Software_License_Type_PO_Items_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PoItems)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_PO_Items_FK1");

                entity.HasOne(d => d.StockRoom)
                    .WithMany(p => p.PoItems)
                    .HasForeignKey(d => d.StockRoomId)
                    .HasConstraintName("Stock_Rooms_PO_Items_FK1");

                entity.HasOne(d => d.StockingUom)
                    .WithMany(p => p.PoItemStockingUoms)
                    .HasForeignKey(d => d.StockingUomId)
                    .HasConstraintName("Units_of_Measure_PO_Items_FK2");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.PoItemTypes)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_PO_Items_FK1");
            });

            modelBuilder.Entity<PoItemList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PO_Item_List");

                entity.Property(e => e.AssetCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Asset_Category");

                entity.Property(e => e.AssetCategoryId).HasColumnName("Asset_Category_ID");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(50)
                    .HasColumnName("Asset_Type");

                entity.Property(e => e.AssetTypeId).HasColumnName("Asset_Type_ID");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Category");

                entity.Property(e => e.ComputerCategoryId).HasColumnName("Computer_Category_ID");

                entity.Property(e => e.ComputerType)
                    .HasMaxLength(50)
                    .HasColumnName("Computer_Type");

                entity.Property(e => e.ComputerTypeId).HasColumnName("Computer_Type_ID");

                entity.Property(e => e.ConsumableCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Consumable_Category");

                entity.Property(e => e.ConsumableCategoryId).HasColumnName("Consumable_Category_ID");

                entity.Property(e => e.ConsumableType)
                    .HasMaxLength(50)
                    .HasColumnName("Consumable_Type");

                entity.Property(e => e.ConsumableTypeId).HasColumnName("Consumable_Type_ID");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion_Factor");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.HardwareCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Hardware_Category");

                entity.Property(e => e.HardwareCategoryId).HasColumnName("Hardware_Category_ID");

                entity.Property(e => e.HardwareType)
                    .HasMaxLength(50)
                    .HasColumnName("Hardware_Type");

                entity.Property(e => e.HardwareTypeId).HasColumnName("Hardware_Type_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinePrice)
                    .HasColumnType("money")
                    .HasColumnName("Line_Price");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoId).HasColumnName("PO_ID");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductClass)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Class");

                entity.Property(e => e.ProductClassId).HasColumnName("Product_Class_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchasingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Purchasing_UOM");

                entity.Property(e => e.PurchasingUomId).HasColumnName("Purchasing_UOM_ID");

                entity.Property(e => e.QtyReceived).HasColumnName("Qty_Received");

                entity.Property(e => e.ReturnPeriod).HasColumnName("Return_Period");

                entity.Property(e => e.ReturnPolicy).HasColumnName("Return_Policy");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.SoftwareLicenseCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Software_License_Category");

                entity.Property(e => e.SoftwareLicenseCategoryId).HasColumnName("Software_License_Category_ID");

                entity.Property(e => e.SoftwareLicenseType)
                    .HasMaxLength(50)
                    .HasColumnName("Software_License_Type");

                entity.Property(e => e.SoftwareLicenseTypeId).HasColumnName("Software_License_Type_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.StockingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Stocking_UOM");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Price");
            });

            modelBuilder.Entity<PoItemListAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PO_Item_List_All");

                entity.Property(e => e.AssetCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Asset_Category");

                entity.Property(e => e.AssetCategoryId).HasColumnName("Asset_Category_ID");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(50)
                    .HasColumnName("Asset_Type");

                entity.Property(e => e.AssetTypeId).HasColumnName("Asset_Type_ID");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Category");

                entity.Property(e => e.ComputerCategoryId).HasColumnName("Computer_Category_ID");

                entity.Property(e => e.ComputerType)
                    .HasMaxLength(50)
                    .HasColumnName("Computer_Type");

                entity.Property(e => e.ComputerTypeId).HasColumnName("Computer_Type_ID");

                entity.Property(e => e.ConsumableCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Consumable_Category");

                entity.Property(e => e.ConsumableCategoryId).HasColumnName("Consumable_Category_ID");

                entity.Property(e => e.ConsumableType)
                    .HasMaxLength(50)
                    .HasColumnName("Consumable_Type");

                entity.Property(e => e.ConsumableTypeId).HasColumnName("Consumable_Type_ID");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion_Factor");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.HardwareCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Hardware_Category");

                entity.Property(e => e.HardwareCategoryId).HasColumnName("Hardware_Category_ID");

                entity.Property(e => e.HardwareType)
                    .HasMaxLength(50)
                    .HasColumnName("Hardware_Type");

                entity.Property(e => e.HardwareTypeId).HasColumnName("Hardware_Type_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinePrice)
                    .HasColumnType("money")
                    .HasColumnName("Line_Price");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Date");

                entity.Property(e => e.PoId).HasColumnName("PO_ID");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(25)
                    .HasColumnName("PO_Number");

                entity.Property(e => e.PoRequester)
                    .HasMaxLength(276)
                    .HasColumnName("PO_Requester");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(50)
                    .HasColumnName("PO_Status");

                entity.Property(e => e.PoStatusId).HasColumnName("PO_Status_ID");

                entity.Property(e => e.PoTitle)
                    .HasMaxLength(200)
                    .HasColumnName("PO_Title");

                entity.Property(e => e.PoVendor)
                    .HasMaxLength(100)
                    .HasColumnName("PO_Vendor");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductClass)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Class");

                entity.Property(e => e.ProductClassId).HasColumnName("Product_Class_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchasingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Purchasing_UOM");

                entity.Property(e => e.PurchasingUomId).HasColumnName("Purchasing_UOM_ID");

                entity.Property(e => e.QtyReceived).HasColumnName("Qty_Received");

                entity.Property(e => e.ReturnPeriod).HasColumnName("Return_Period");

                entity.Property(e => e.ReturnPolicy).HasColumnName("Return_Policy");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.SoftwareLicenseCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Software_License_Category");

                entity.Property(e => e.SoftwareLicenseCategoryId).HasColumnName("Software_License_Category_ID");

                entity.Property(e => e.SoftwareLicenseType)
                    .HasMaxLength(50)
                    .HasColumnName("Software_License_Type");

                entity.Property(e => e.SoftwareLicenseTypeId).HasColumnName("Software_License_Type_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.StockingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Stocking_UOM");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Price");
            });

            modelBuilder.Entity<PoItemListAllActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PO_Item_List_All_Active");

                entity.Property(e => e.AssetCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Asset_Category");

                entity.Property(e => e.AssetCategoryId).HasColumnName("Asset_Category_ID");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(50)
                    .HasColumnName("Asset_Type");

                entity.Property(e => e.AssetTypeId).HasColumnName("Asset_Type_ID");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Category");

                entity.Property(e => e.ComputerCategoryId).HasColumnName("Computer_Category_ID");

                entity.Property(e => e.ComputerType)
                    .HasMaxLength(50)
                    .HasColumnName("Computer_Type");

                entity.Property(e => e.ComputerTypeId).HasColumnName("Computer_Type_ID");

                entity.Property(e => e.ConsumableCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Consumable_Category");

                entity.Property(e => e.ConsumableCategoryId).HasColumnName("Consumable_Category_ID");

                entity.Property(e => e.ConsumableType)
                    .HasMaxLength(50)
                    .HasColumnName("Consumable_Type");

                entity.Property(e => e.ConsumableTypeId).HasColumnName("Consumable_Type_ID");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion_Factor");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.HardwareCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Hardware_Category");

                entity.Property(e => e.HardwareCategoryId).HasColumnName("Hardware_Category_ID");

                entity.Property(e => e.HardwareType)
                    .HasMaxLength(50)
                    .HasColumnName("Hardware_Type");

                entity.Property(e => e.HardwareTypeId).HasColumnName("Hardware_Type_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinePrice)
                    .HasColumnType("money")
                    .HasColumnName("Line_Price");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Date");

                entity.Property(e => e.PoId).HasColumnName("PO_ID");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(25)
                    .HasColumnName("PO_Number");

                entity.Property(e => e.PoRequester)
                    .HasMaxLength(276)
                    .HasColumnName("PO_Requester");

                entity.Property(e => e.PoStatus)
                    .HasMaxLength(50)
                    .HasColumnName("PO_Status");

                entity.Property(e => e.PoStatusId).HasColumnName("PO_Status_ID");

                entity.Property(e => e.PoTitle)
                    .HasMaxLength(200)
                    .HasColumnName("PO_Title");

                entity.Property(e => e.PoVendor)
                    .HasMaxLength(100)
                    .HasColumnName("PO_Vendor");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductClass)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Class");

                entity.Property(e => e.ProductClassId).HasColumnName("Product_Class_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchasingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Purchasing_UOM");

                entity.Property(e => e.PurchasingUomId).HasColumnName("Purchasing_UOM_ID");

                entity.Property(e => e.QtyReceived).HasColumnName("Qty_Received");

                entity.Property(e => e.ReturnPeriod).HasColumnName("Return_Period");

                entity.Property(e => e.ReturnPolicy).HasColumnName("Return_Policy");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.SoftwareLicenseCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Software_License_Category");

                entity.Property(e => e.SoftwareLicenseCategoryId).HasColumnName("Software_License_Category_ID");

                entity.Property(e => e.SoftwareLicenseType)
                    .HasMaxLength(50)
                    .HasColumnName("Software_License_Type");

                entity.Property(e => e.SoftwareLicenseTypeId).HasColumnName("Software_License_Type_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.StockingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Stocking_UOM");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Price");
            });

            modelBuilder.Entity<PoItemsSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PO_Items_Summary");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.QtyReceived).HasColumnName("Qty_Received");

                entity.Property(e => e.SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Sub_Total");
            });

            modelBuilder.Entity<PoList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PO_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AuthorizedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Authorized_by");

                entity.Property(e => e.AuthorizedById).HasColumnName("Authorized_by_ID");

                entity.Property(e => e.BillTo)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to");

                entity.Property(e => e.BillToAddress).HasColumnName("Bill_to_Address");

                entity.Property(e => e.BillToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Contact");

                entity.Property(e => e.BillToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Email");

                entity.Property(e => e.BillToFax)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Fax");

                entity.Property(e => e.BillToPhone)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Phone");

                entity.Property(e => e.Budget).HasMaxLength(50);

                entity.Property(e => e.BudgetId).HasColumnName("Budget_ID");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.DateRequired)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Required");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.FreightTerms)
                    .HasMaxLength(100)
                    .HasColumnName("Freight_Terms");

                entity.Property(e => e.FreightTermsId).HasColumnName("Freight_Terms_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment_Terms");

                entity.Property(e => e.PaymentTermsId).HasColumnName("Payment_Terms_ID");

                entity.Property(e => e.PoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Date");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(25)
                    .HasColumnName("PO_Number");

                entity.Property(e => e.PriceAdjustment)
                    .HasColumnType("money")
                    .HasColumnName("Price_Adjustment");

                entity.Property(e => e.QtyReceived).HasColumnName("Qty_Received");

                entity.Property(e => e.QtyRemaining).HasColumnName("Qty_Remaining");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.SalesTax)
                    .HasColumnType("money")
                    .HasColumnName("Sales_Tax");

                entity.Property(e => e.ShipTo)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to");

                entity.Property(e => e.ShipToAddress).HasColumnName("Ship_to_Address");

                entity.Property(e => e.ShipToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Contact");

                entity.Property(e => e.ShipToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Email");

                entity.Property(e => e.ShipToFax)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Fax");

                entity.Property(e => e.ShipToPhone)
                    .HasMaxLength(20)
                    .HasColumnName("Ship_to_Phone");

                entity.Property(e => e.Shipping).HasMaxLength(50);

                entity.Property(e => e.ShippingId).HasColumnName("Shipping_ID");

                entity.Property(e => e.ShippingPrice)
                    .HasColumnType("money")
                    .HasColumnName("Shipping_Price");

                entity.Property(e => e.ShippingTaxRate).HasColumnName("Shipping_Tax_Rate");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Sub_Total");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total_Amount");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorAddress).HasColumnName("Vendor_Address");

                entity.Property(e => e.VendorContact)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Contact");

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(255)
                    .HasColumnName("Vendor_Email");

                entity.Property(e => e.VendorFax)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Fax");

                entity.Property(e => e.VendorFein)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_FEIN");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(100)
                    .HasColumnName("Vendor_Name");

                entity.Property(e => e.VendorPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Phone");
            });

            modelBuilder.Entity<PoListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PO_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AuthorizedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Authorized_by");

                entity.Property(e => e.AuthorizedById).HasColumnName("Authorized_by_ID");

                entity.Property(e => e.BillTo)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to");

                entity.Property(e => e.BillToAddress).HasColumnName("Bill_to_Address");

                entity.Property(e => e.BillToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Contact");

                entity.Property(e => e.BillToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Email");

                entity.Property(e => e.BillToFax)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Fax");

                entity.Property(e => e.BillToPhone)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Phone");

                entity.Property(e => e.Budget).HasMaxLength(50);

                entity.Property(e => e.BudgetId).HasColumnName("Budget_ID");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.DateRequired)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Required");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.FreightTerms)
                    .HasMaxLength(100)
                    .HasColumnName("Freight_Terms");

                entity.Property(e => e.FreightTermsId).HasColumnName("Freight_Terms_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment_Terms");

                entity.Property(e => e.PaymentTermsId).HasColumnName("Payment_Terms_ID");

                entity.Property(e => e.PoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Date");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(25)
                    .HasColumnName("PO_Number");

                entity.Property(e => e.PriceAdjustment)
                    .HasColumnType("money")
                    .HasColumnName("Price_Adjustment");

                entity.Property(e => e.QtyReceived).HasColumnName("Qty_Received");

                entity.Property(e => e.QtyRemaining).HasColumnName("Qty_Remaining");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.SalesTax)
                    .HasColumnType("money")
                    .HasColumnName("Sales_Tax");

                entity.Property(e => e.ShipTo)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to");

                entity.Property(e => e.ShipToAddress).HasColumnName("Ship_to_Address");

                entity.Property(e => e.ShipToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Contact");

                entity.Property(e => e.ShipToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Email");

                entity.Property(e => e.ShipToFax)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Fax");

                entity.Property(e => e.ShipToPhone)
                    .HasMaxLength(20)
                    .HasColumnName("Ship_to_Phone");

                entity.Property(e => e.Shipping).HasMaxLength(50);

                entity.Property(e => e.ShippingId).HasColumnName("Shipping_ID");

                entity.Property(e => e.ShippingPrice)
                    .HasColumnType("money")
                    .HasColumnName("Shipping_Price");

                entity.Property(e => e.ShippingTaxRate).HasColumnName("Shipping_Tax_Rate");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Sub_Total");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total_Amount");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorAddress).HasColumnName("Vendor_Address");

                entity.Property(e => e.VendorContact)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Contact");

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(255)
                    .HasColumnName("Vendor_Email");

                entity.Property(e => e.VendorFax)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Fax");

                entity.Property(e => e.VendorFein)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_FEIN");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(100)
                    .HasColumnName("Vendor_Name");

                entity.Property(e => e.VendorPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Phone");
            });

            modelBuilder.Entity<PoOverdueList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PO_Overdue_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AuthorizedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Authorized_by");

                entity.Property(e => e.AuthorizedById).HasColumnName("Authorized_by_ID");

                entity.Property(e => e.BillTo)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to");

                entity.Property(e => e.BillToAddress).HasColumnName("Bill_to_Address");

                entity.Property(e => e.BillToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Contact");

                entity.Property(e => e.BillToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Email");

                entity.Property(e => e.BillToFax)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Fax");

                entity.Property(e => e.BillToPhone)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Phone");

                entity.Property(e => e.Budget).HasMaxLength(50);

                entity.Property(e => e.BudgetId).HasColumnName("Budget_ID");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.DateRequired)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Required");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.FreightTerms)
                    .HasMaxLength(100)
                    .HasColumnName("Freight_Terms");

                entity.Property(e => e.FreightTermsId).HasColumnName("Freight_Terms_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment_Terms");

                entity.Property(e => e.PaymentTermsId).HasColumnName("Payment_Terms_ID");

                entity.Property(e => e.PoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Date");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(25)
                    .HasColumnName("PO_Number");

                entity.Property(e => e.PriceAdjustment)
                    .HasColumnType("money")
                    .HasColumnName("Price_Adjustment");

                entity.Property(e => e.QtyReceived).HasColumnName("Qty_Received");

                entity.Property(e => e.QtyRemaining).HasColumnName("Qty_Remaining");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.SalesTax)
                    .HasColumnType("money")
                    .HasColumnName("Sales_Tax");

                entity.Property(e => e.ShipTo)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to");

                entity.Property(e => e.ShipToAddress).HasColumnName("Ship_to_Address");

                entity.Property(e => e.ShipToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Contact");

                entity.Property(e => e.ShipToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Email");

                entity.Property(e => e.ShipToFax)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Fax");

                entity.Property(e => e.ShipToPhone)
                    .HasMaxLength(20)
                    .HasColumnName("Ship_to_Phone");

                entity.Property(e => e.Shipping).HasMaxLength(50);

                entity.Property(e => e.ShippingId).HasColumnName("Shipping_ID");

                entity.Property(e => e.ShippingPrice)
                    .HasColumnType("money")
                    .HasColumnName("Shipping_Price");

                entity.Property(e => e.ShippingTaxRate).HasColumnName("Shipping_Tax_Rate");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Sub_Total");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total_Amount");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorAddress).HasColumnName("Vendor_Address");

                entity.Property(e => e.VendorContact)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Contact");

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(255)
                    .HasColumnName("Vendor_Email");

                entity.Property(e => e.VendorFax)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Fax");

                entity.Property(e => e.VendorFein)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_FEIN");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(100)
                    .HasColumnName("Vendor_Name");

                entity.Property(e => e.VendorPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Phone");
            });

            modelBuilder.Entity<PoPaymentTerm>(entity =>
            {
                entity.ToTable("PO_Payment_Terms");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Terms)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PoShipping>(entity =>
            {
                entity.ToTable("PO_Shipping");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Shipping)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<PriorityCalculation>(entity =>
            {
                entity.ToTable("Priority_Calculation");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ServiceLevelId).HasColumnName("Service_Level_ID");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.HasOne(d => d.Impact)
                    .WithMany(p => p.PriorityCalculations)
                    .HasForeignKey(d => d.ImpactId)
                    .HasConstraintName("Ticket_Impact_Priority_Calculation_FK1");

                entity.HasOne(d => d.Priority)
                    .WithMany(p => p.PriorityCalculations)
                    .HasForeignKey(d => d.PriorityId)
                    .HasConstraintName("Ticket_Priority_Priority_Calculation_FK1");

                entity.HasOne(d => d.ServiceLevel)
                    .WithMany(p => p.PriorityCalculations)
                    .HasForeignKey(d => d.ServiceLevelId)
                    .HasConstraintName("Service_Level_Priority_Calculation_FK1");

                entity.HasOne(d => d.Urgency)
                    .WithMany(p => p.PriorityCalculations)
                    .HasForeignKey(d => d.UrgencyId)
                    .HasConstraintName("Ticket_Urgency_Priority_Calculation_FK1");
            });

            modelBuilder.Entity<PriorityCalculationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Priority_Calculation_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ServiceLevelId).HasColumnName("Service_Level_ID");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<Problem>(entity =>
            {
                entity.HasIndex(e => e.RelatedCiId, "IX_Problems_Related_CI");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.HasOne(d => d.AssigneeGroup)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.AssigneeGroupId)
                    .HasConstraintName("User_Groups_Problems_FK1");

                entity.HasOne(d => d.Assignee)
                    .WithMany(p => p.ProblemAssignees)
                    .HasForeignKey(d => d.AssigneeId)
                    .HasConstraintName("Persons_Problems_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Problems_FK1");

                entity.HasOne(d => d.ChangeRequest)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.ChangeRequestId)
                    .HasConstraintName("Change_Requests_Problems_FK1");

                entity.HasOne(d => d.ClosureCode)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.ClosureCodeId)
                    .HasConstraintName("Ticket_Closure_Code_Problems_FK1");

                entity.HasOne(d => d.Impact)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.ImpactId)
                    .HasConstraintName("Ticket_Impact_Problems_FK1");

                entity.HasOne(d => d.Medium)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.MediumId)
                    .HasConstraintName("Ticket_Medium_Problems_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Problems_FK1");

                entity.HasOne(d => d.Priority)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.PriorityId)
                    .HasConstraintName("Ticket_Priority_Problems_FK1");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("Projects_Problems_FK1");

                entity.HasOne(d => d.RelatedCi)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.RelatedCiId)
                    .HasConstraintName("Object_Index_Problems_FK1");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.ProblemRequesters)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("Persons_Problems_FK2");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("Services_Problems_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Problems_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Problems_FK1");

                entity.HasOne(d => d.Urgency)
                    .WithMany(p => p.Problems)
                    .HasForeignKey(d => d.UrgencyId)
                    .HasConstraintName("Ticket_Urgency_Problems_FK1");
            });

            modelBuilder.Entity<ProblemList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Problem_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ChangeRequest)
                    .HasMaxLength(25)
                    .HasColumnName("Change_Request");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedIncidentsCount).HasColumnName("Related_Incidents_Count");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<ProblemListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Problem_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ChangeRequest)
                    .HasMaxLength(25)
                    .HasColumnName("Change_Request");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedIncidentsCount).HasColumnName("Related_Incidents_Count");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<ProblemsByCrSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Problems_By_CR_Summary");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AssetCategoryId).HasColumnName("Asset_Category_ID");

                entity.Property(e => e.AssetTypeId).HasColumnName("Asset_Type_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerCategoryId).HasColumnName("Computer_Category_ID");

                entity.Property(e => e.ComputerTypeId).HasColumnName("Computer_Type_ID");

                entity.Property(e => e.ConsumableCategoryId).HasColumnName("Consumable_Category_ID");

                entity.Property(e => e.ConsumableTypeId).HasColumnName("Consumable_Type_ID");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion_Factor");

                entity.Property(e => e.HardwareCategoryId).HasColumnName("Hardware_Category_ID");

                entity.Property(e => e.HardwareTypeId).HasColumnName("Hardware_Type_ID");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Msrp)
                    .HasColumnType("money")
                    .HasColumnName("MSRP");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.ProductClassId).HasColumnName("Product_Class_ID");

                entity.Property(e => e.PurchasingUomId).HasColumnName("Purchasing_UOM_ID");

                entity.Property(e => e.SoftwareLicenseCategoryId).HasColumnName("Software_License_Category_ID");

                entity.Property(e => e.SoftwareLicenseTypeId).HasColumnName("Software_License_Type_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");

                entity.Property(e => e.WarrantyPeriod).HasColumnName("Warranty_Period");

                entity.HasOne(d => d.AssetCategory)
                    .WithMany(p => p.ProductAssetCategories)
                    .HasForeignKey(d => d.AssetCategoryId)
                    .HasConstraintName("Asset_Category_Products_FK1");

                entity.HasOne(d => d.AssetType)
                    .WithMany(p => p.ProductAssetTypes)
                    .HasForeignKey(d => d.AssetTypeId)
                    .HasConstraintName("Asset_Type_Products_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ProductCategories)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Products_FK1");

                entity.HasOne(d => d.ComputerCategory)
                    .WithMany(p => p.ProductComputerCategories)
                    .HasForeignKey(d => d.ComputerCategoryId)
                    .HasConstraintName("Computer_Category_Products_FK1");

                entity.HasOne(d => d.ComputerType)
                    .WithMany(p => p.ProductComputerTypes)
                    .HasForeignKey(d => d.ComputerTypeId)
                    .HasConstraintName("Computer_Type_Products_FK1");

                entity.HasOne(d => d.ConsumableCategory)
                    .WithMany(p => p.ProductConsumableCategories)
                    .HasForeignKey(d => d.ConsumableCategoryId)
                    .HasConstraintName("Consumable_Category_Products_FK1");

                entity.HasOne(d => d.ConsumableType)
                    .WithMany(p => p.ProductConsumableTypes)
                    .HasForeignKey(d => d.ConsumableTypeId)
                    .HasConstraintName("Consumable_Type_Products_FK1");

                entity.HasOne(d => d.HardwareCategory)
                    .WithMany(p => p.ProductHardwareCategories)
                    .HasForeignKey(d => d.HardwareCategoryId)
                    .HasConstraintName("Hardware_Category_Products_FK1");

                entity.HasOne(d => d.HardwareType)
                    .WithMany(p => p.ProductHardwareTypes)
                    .HasForeignKey(d => d.HardwareTypeId)
                    .HasConstraintName("Hardware_Type_Products_FK1");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("Brands_Products_FK1");

                entity.HasOne(d => d.ProductClass)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductClassId)
                    .HasConstraintName("Object_Class_Products_FK1");

                entity.HasOne(d => d.PurchasingUom)
                    .WithMany(p => p.ProductPurchasingUoms)
                    .HasForeignKey(d => d.PurchasingUomId)
                    .HasConstraintName("Units_of_Measure_Products_FK1");

                entity.HasOne(d => d.SoftwareLicenseCategory)
                    .WithMany(p => p.ProductSoftwareLicenseCategories)
                    .HasForeignKey(d => d.SoftwareLicenseCategoryId)
                    .HasConstraintName("Software_License_Category_Products_FK1");

                entity.HasOne(d => d.SoftwareLicenseType)
                    .WithMany(p => p.ProductSoftwareLicenseTypes)
                    .HasForeignKey(d => d.SoftwareLicenseTypeId)
                    .HasConstraintName("Software_License_Type_Products_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Products_FK1");

                entity.HasOne(d => d.StockingUom)
                    .WithMany(p => p.ProductStockingUoms)
                    .HasForeignKey(d => d.StockingUomId)
                    .HasConstraintName("Units_of_Measure_Products_FK2");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ProductTypes)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Products_FK1");
            });

            modelBuilder.Entity<ProductList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Product_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AssetCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Asset_Category");

                entity.Property(e => e.AssetCategoryId).HasColumnName("Asset_Category_ID");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(50)
                    .HasColumnName("Asset_Type");

                entity.Property(e => e.AssetTypeId).HasColumnName("Asset_Type_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Category");

                entity.Property(e => e.ComputerCategoryId).HasColumnName("Computer_Category_ID");

                entity.Property(e => e.ComputerType)
                    .HasMaxLength(50)
                    .HasColumnName("Computer_Type");

                entity.Property(e => e.ComputerTypeId).HasColumnName("Computer_Type_ID");

                entity.Property(e => e.ConsumableCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Consumable_Category");

                entity.Property(e => e.ConsumableCategoryId).HasColumnName("Consumable_Category_ID");

                entity.Property(e => e.ConsumableType)
                    .HasMaxLength(50)
                    .HasColumnName("Consumable_Type");

                entity.Property(e => e.ConsumableTypeId).HasColumnName("Consumable_Type_ID");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion_Factor");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.HardwareCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Hardware_Category");

                entity.Property(e => e.HardwareCategoryId).HasColumnName("Hardware_Category_ID");

                entity.Property(e => e.HardwareType)
                    .HasMaxLength(50)
                    .HasColumnName("Hardware_Type");

                entity.Property(e => e.HardwareTypeId).HasColumnName("Hardware_Type_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Msrp)
                    .HasColumnType("money")
                    .HasColumnName("MSRP");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.ProductClass)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Class");

                entity.Property(e => e.ProductClassId).HasColumnName("Product_Class_ID");

                entity.Property(e => e.PurchasingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Purchasing_UOM");

                entity.Property(e => e.PurchasingUomId).HasColumnName("Purchasing_UOM_ID");

                entity.Property(e => e.SoftwareLicenseCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Software_License_Category");

                entity.Property(e => e.SoftwareLicenseCategoryId).HasColumnName("Software_License_Category_ID");

                entity.Property(e => e.SoftwareLicenseType)
                    .HasMaxLength(50)
                    .HasColumnName("Software_License_Type");

                entity.Property(e => e.SoftwareLicenseTypeId).HasColumnName("Software_License_Type_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Stocking_UOM");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");

                entity.Property(e => e.WarrantyPeriod).HasColumnName("Warranty_Period");
            });

            modelBuilder.Entity<ProductListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Product_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AssetCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Asset_Category");

                entity.Property(e => e.AssetCategoryId).HasColumnName("Asset_Category_ID");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(50)
                    .HasColumnName("Asset_Type");

                entity.Property(e => e.AssetTypeId).HasColumnName("Asset_Type_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Category");

                entity.Property(e => e.ComputerCategoryId).HasColumnName("Computer_Category_ID");

                entity.Property(e => e.ComputerType)
                    .HasMaxLength(50)
                    .HasColumnName("Computer_Type");

                entity.Property(e => e.ComputerTypeId).HasColumnName("Computer_Type_ID");

                entity.Property(e => e.ConsumableCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Consumable_Category");

                entity.Property(e => e.ConsumableCategoryId).HasColumnName("Consumable_Category_ID");

                entity.Property(e => e.ConsumableType)
                    .HasMaxLength(50)
                    .HasColumnName("Consumable_Type");

                entity.Property(e => e.ConsumableTypeId).HasColumnName("Consumable_Type_ID");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion_Factor");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.HardwareCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Hardware_Category");

                entity.Property(e => e.HardwareCategoryId).HasColumnName("Hardware_Category_ID");

                entity.Property(e => e.HardwareType)
                    .HasMaxLength(50)
                    .HasColumnName("Hardware_Type");

                entity.Property(e => e.HardwareTypeId).HasColumnName("Hardware_Type_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Msrp)
                    .HasColumnType("money")
                    .HasColumnName("MSRP");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.ProductClass)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Class");

                entity.Property(e => e.ProductClassId).HasColumnName("Product_Class_ID");

                entity.Property(e => e.PurchasingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Purchasing_UOM");

                entity.Property(e => e.PurchasingUomId).HasColumnName("Purchasing_UOM_ID");

                entity.Property(e => e.SoftwareLicenseCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Software_License_Category");

                entity.Property(e => e.SoftwareLicenseCategoryId).HasColumnName("Software_License_Category_ID");

                entity.Property(e => e.SoftwareLicenseType)
                    .HasMaxLength(50)
                    .HasColumnName("Software_License_Type");

                entity.Property(e => e.SoftwareLicenseTypeId).HasColumnName("Software_License_Type_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Stocking_UOM");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");

                entity.Property(e => e.WarrantyPeriod).HasColumnName("Warranty_Period");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.HasIndex(e => e.ParentId, "IX_Projects_Parent");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Placement)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfBusinessCase).HasColumnName("UDF_Business_Case");

                entity.Property(e => e.UdfDescription).HasColumnName("UDF_Description");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfImpactedAreas).HasColumnName("UDF_Impacted_Areas");

                entity.Property(e => e.UdfImpactedSystems).HasColumnName("UDF_Impacted_Systems");

                entity.Property(e => e.UdfPriority).HasColumnName("UDF_Priority");

                entity.Property(e => e.UdfProjectContact)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Contact");

                entity.Property(e => e.UdfProjectContactId).HasColumnName("UDF_Project_Contact_ID");

                entity.Property(e => e.UdfProjectSponsor)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Sponsor");

                entity.Property(e => e.UdfProjectSponsorId).HasColumnName("UDF_Project_Sponsor_ID");

                entity.Property(e => e.UdfRequester)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Requester");

                entity.Property(e => e.UdfRequesterId).HasColumnName("UDF_Requester_ID");

                entity.Property(e => e.UdfResourceCost).HasColumnName("UDF_Resource_Cost");

                entity.Property(e => e.UdfSpaInd).HasColumnName("UDF_SPA_Ind");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.ProjectManagers)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("Persons_Projects_FK1");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("Projects_Projects_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Projects_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Projects_FK1");

                entity.HasOne(d => d.UdfProjectContactNavigation)
                    .WithMany(p => p.ProjectUdfProjectContactNavigations)
                    .HasForeignKey(d => d.UdfProjectContactId)
                    .HasConstraintName("Projects_Persons_UDF_Project_Contact_FK");

                entity.HasOne(d => d.UdfProjectSponsorNavigation)
                    .WithMany(p => p.ProjectUdfProjectSponsorNavigations)
                    .HasForeignKey(d => d.UdfProjectSponsorId)
                    .HasConstraintName("Projects_Persons_UDF_Project_Sponsor_FK");

                entity.HasOne(d => d.UdfRequesterNavigation)
                    .WithMany(p => p.ProjectUdfRequesterNavigations)
                    .HasForeignKey(d => d.UdfRequesterId)
                    .HasConstraintName("Projects_Persons_UDF_Requester_FK");
            });

            modelBuilder.Entity<ProjectList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Project_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Placement)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfBusinessCase).HasColumnName("UDF_Business_Case");

                entity.Property(e => e.UdfDescription).HasColumnName("UDF_Description");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfImpactedAreas).HasColumnName("UDF_Impacted_Areas");

                entity.Property(e => e.UdfImpactedSystems).HasColumnName("UDF_Impacted_Systems");

                entity.Property(e => e.UdfPriority).HasColumnName("UDF_Priority");

                entity.Property(e => e.UdfProjectContact)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Contact");

                entity.Property(e => e.UdfProjectContactId).HasColumnName("UDF_Project_Contact_ID");

                entity.Property(e => e.UdfProjectSponsor)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Sponsor");

                entity.Property(e => e.UdfProjectSponsorId).HasColumnName("UDF_Project_Sponsor_ID");

                entity.Property(e => e.UdfRequester)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Requester");

                entity.Property(e => e.UdfRequesterId).HasColumnName("UDF_Requester_ID");

                entity.Property(e => e.UdfResourceCost).HasColumnName("UDF_Resource_Cost");

                entity.Property(e => e.UdfSpaInd).HasColumnName("UDF_SPA_Ind");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");
            });

            modelBuilder.Entity<ProjectListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Project_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Placement)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfBusinessCase).HasColumnName("UDF_Business_Case");

                entity.Property(e => e.UdfDescription).HasColumnName("UDF_Description");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfImpactedAreas).HasColumnName("UDF_Impacted_Areas");

                entity.Property(e => e.UdfImpactedSystems).HasColumnName("UDF_Impacted_Systems");

                entity.Property(e => e.UdfPriority).HasColumnName("UDF_Priority");

                entity.Property(e => e.UdfProjectContact)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Contact");

                entity.Property(e => e.UdfProjectContactId).HasColumnName("UDF_Project_Contact_ID");

                entity.Property(e => e.UdfProjectSponsor)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Sponsor");

                entity.Property(e => e.UdfProjectSponsorId).HasColumnName("UDF_Project_Sponsor_ID");

                entity.Property(e => e.UdfRequester)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Requester");

                entity.Property(e => e.UdfRequesterId).HasColumnName("UDF_Requester_ID");

                entity.Property(e => e.UdfResourceCost).HasColumnName("UDF_Resource_Cost");

                entity.Property(e => e.UdfSpaInd).HasColumnName("UDF_SPA_Ind");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");
            });

            modelBuilder.Entity<PurchaseHistoryList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Purchase_History_List");

                entity.Property(e => e.AssetCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Asset_Category");

                entity.Property(e => e.AssetCategoryId).HasColumnName("Asset_Category_ID");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(50)
                    .HasColumnName("Asset_Type");

                entity.Property(e => e.AssetTypeId).HasColumnName("Asset_Type_ID");

                entity.Property(e => e.AuthorizedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Authorized_by");

                entity.Property(e => e.Budget).HasMaxLength(50);

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Category");

                entity.Property(e => e.ComputerCategoryId).HasColumnName("Computer_Category_ID");

                entity.Property(e => e.ComputerType)
                    .HasMaxLength(50)
                    .HasColumnName("Computer_Type");

                entity.Property(e => e.ComputerTypeId).HasColumnName("Computer_Type_ID");

                entity.Property(e => e.ConsumableCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Consumable_Category");

                entity.Property(e => e.ConsumableCategoryId).HasColumnName("Consumable_Category_ID");

                entity.Property(e => e.ConsumableType)
                    .HasMaxLength(50)
                    .HasColumnName("Consumable_Type");

                entity.Property(e => e.ConsumableTypeId).HasColumnName("Consumable_Type_ID");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion_Factor");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.HardwareCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Hardware_Category");

                entity.Property(e => e.HardwareCategoryId).HasColumnName("Hardware_Category_ID");

                entity.Property(e => e.HardwareType)
                    .HasMaxLength(50)
                    .HasColumnName("Hardware_Type");

                entity.Property(e => e.HardwareTypeId).HasColumnName("Hardware_Type_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LinePrice)
                    .HasColumnType("money")
                    .HasColumnName("Line_Price");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(50)
                    .HasColumnName("Payment_Terms");

                entity.Property(e => e.PoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Date");

                entity.Property(e => e.PoId).HasColumnName("PO_ID");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(25)
                    .HasColumnName("PO_Number");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductClass)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Class");

                entity.Property(e => e.ProductClassId).HasColumnName("Product_Class_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchasingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Purchasing_UOM");

                entity.Property(e => e.PurchasingUomId).HasColumnName("Purchasing_UOM_ID");

                entity.Property(e => e.QtyReceived).HasColumnName("Qty_Received");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.ReturnPeriod).HasColumnName("Return_Period");

                entity.Property(e => e.ReturnPolicy).HasColumnName("Return_Policy");

                entity.Property(e => e.Shipping).HasMaxLength(50);

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.SoftwareLicenseCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Software_License_Category");

                entity.Property(e => e.SoftwareLicenseCategoryId).HasColumnName("Software_License_Category_ID");

                entity.Property(e => e.SoftwareLicenseType)
                    .HasMaxLength(50)
                    .HasColumnName("Software_License_Type");

                entity.Property(e => e.SoftwareLicenseTypeId).HasColumnName("Software_License_Type_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.StockingUom)
                    .HasMaxLength(50)
                    .HasColumnName("Stocking_UOM");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Price");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");
            });

            modelBuilder.Entity<Receiver>(entity =>
            {
                entity.HasIndex(e => e.SlaId, "IX_Receivers_SLA");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ReceiverOrganizationId).HasColumnName("Receiver_Organization_ID");

                entity.Property(e => e.SlaId).HasColumnName("SLA_ID");

                entity.HasOne(d => d.ReceiverOrganization)
                    .WithMany(p => p.Receivers)
                    .HasForeignKey(d => d.ReceiverOrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organizational_Units_Receivers_FK1");

                entity.HasOne(d => d.Sla)
                    .WithMany(p => p.Receivers)
                    .HasForeignKey(d => d.SlaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SLA_Receivers_FK1");
            });

            modelBuilder.Entity<ReceiversSlaList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Receivers_SLA_List");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ReceiverOrganizationId).HasColumnName("Receiver_Organization_ID");

                entity.Property(e => e.ServiceCategory)
                    .HasMaxLength(2048)
                    .HasColumnName("Service_Category");

                entity.Property(e => e.ServiceLevel)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Level");

                entity.Property(e => e.ServiceManager)
                    .HasMaxLength(276)
                    .HasColumnName("Service_Manager");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.ServiceProviderOrganization)
                    .HasMaxLength(2048)
                    .HasColumnName("Service_Provider_Organization");

                entity.Property(e => e.ServiceStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Service_Status");

                entity.Property(e => e.ServiceSupportGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Support_Group");

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(50)
                    .HasColumnName("Service_Type");

                entity.Property(e => e.SlaId).HasColumnName("SLA_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<RecurrentObjectList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RecurrentObjectList");

                entity.Property(e => e.Action).HasMaxLength(200);

                entity.Property(e => e.Cid).HasColumnName("CID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobDescription).HasColumnName("Job_Description");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasMaxLength(310)
                    .HasColumnName("Job_Name");

                entity.Property(e => e.JobType).HasColumnName("Job_Type");

                entity.Property(e => e.LastRunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Run_Date");

                entity.Property(e => e.LastRunStatus)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("Last_Run_Status");

                entity.Property(e => e.LceventId).HasColumnName("LCEvent_ID");

                entity.Property(e => e.NextRunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Next_Run_Date");

                entity.Property(e => e.Object)
                    .IsRequired()
                    .HasMaxLength(276);

                entity.Property(e => e.Schedule).HasMaxLength(1024);
            });

            modelBuilder.Entity<RecurrentTicketLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Recurrent_Ticket_Log");

                entity.Property(e => e.ActionName)
                    .HasMaxLength(310)
                    .HasColumnName("Action_Name");

                entity.Property(e => e.Comments).HasMaxLength(1024);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(256)
                    .HasColumnName("Created_by");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.LceventsId).HasColumnName("LCEvents_ID");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.TicketNum)
                    .HasMaxLength(256)
                    .HasColumnName("Ticket_Num");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Upload_Date");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.OriginalId).HasColumnName("Original_ID");

                entity.Property(e => e.ParentForm)
                    .HasMaxLength(50)
                    .HasColumnName("Parent_Form");

                entity.Property(e => e.Report1).HasColumnName("Report");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(512)
                    .HasColumnName("Updated_by");
            });

            modelBuilder.Entity<ReportCategory>(entity =>
            {
                entity.ToTable("Report_Categories");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ReportCategoryId).HasColumnName("Report_Category_ID");

                entity.Property(e => e.ReportId).HasColumnName("Report_ID");
            });

            modelBuilder.Entity<ReportCategoryList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Report_Category_List");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ReportCategoryId).HasColumnName("Report_Category_ID");

                entity.Property(e => e.ReportId).HasColumnName("Report_ID");
            });

            modelBuilder.Entity<ReportList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Report_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.OriginalId).HasColumnName("Original_ID");

                entity.Property(e => e.ReportEngine)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Report_Engine");

                entity.Property(e => e.Updated).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(512)
                    .HasColumnName("Updated_by");
            });

            modelBuilder.Entity<ReportListCategory>(entity =>
            {
                entity.ToTable("Report_List_Category");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AutoAdded).HasColumnName("Auto_Added");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<ReportListCategoryAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Report_List_Category_All");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<ReportingLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Reporting_Log");

                entity.Property(e => e.Comments).HasMaxLength(1024);

                entity.Property(e => e.FileName)
                    .HasMaxLength(256)
                    .HasColumnName("File_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.JobName)
                    .HasMaxLength(310)
                    .HasColumnName("Job_Name");

                entity.Property(e => e.ReportName)
                    .HasMaxLength(256)
                    .HasColumnName("Report_Name");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Upload_Date");
            });

            modelBuilder.Entity<Reservation>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LibraryItemId).HasColumnName("Library_Item_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ReservationDateFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("Reservation_Date_From");

                entity.Property(e => e.ReservationDateTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Reservation_Date_To");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.LibraryItem)
                    .WithMany(p => p.Reservations)
                    .HasForeignKey(d => d.LibraryItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Library_Reservations_FK1");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.Reservations)
                    .HasForeignKey(d => d.RequesterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_Reservations_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Reservations)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Reservations_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Reservations)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Reservations_FK1");
            });

            modelBuilder.Entity<ReservationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Reservation_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LibraryItem)
                    .HasMaxLength(100)
                    .HasColumnName("Library_Item");

                entity.Property(e => e.LibraryItemId).HasColumnName("Library_Item_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ReservationDateFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("Reservation_Date_From");

                entity.Property(e => e.ReservationDateTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Reservation_Date_To");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ReservationListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Reservation_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LibraryItem)
                    .HasMaxLength(100)
                    .HasColumnName("Library_Item");

                entity.Property(e => e.LibraryItemId).HasColumnName("Library_Item_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ReservationDateFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("Reservation_Date_From");

                entity.Property(e => e.ReservationDateTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Reservation_Date_To");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ResponseTime>(entity =>
            {
                entity.ToTable("Response_Time");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ResponseTime1).HasColumnName("Response_Time");

                entity.Property(e => e.ServiceLevelId).HasColumnName("Service_Level_ID");

                entity.Property(e => e.TargetResolutionTime).HasColumnName("Target_Resolution_Time");

                entity.HasOne(d => d.Priority)
                    .WithMany(p => p.ResponseTimes)
                    .HasForeignKey(d => d.PriorityId)
                    .HasConstraintName("Ticket_Priority_Response_Time_FK1");

                entity.HasOne(d => d.ServiceLevel)
                    .WithMany(p => p.ResponseTimes)
                    .HasForeignKey(d => d.ServiceLevelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Service_Level_Response_Time_FK1");
            });

            modelBuilder.Entity<ResponseTimeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Response_Time_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.PriorityRank).HasColumnName("Priority_Rank");

                entity.Property(e => e.ResponseTime).HasColumnName("Response_Time");

                entity.Property(e => e.ServiceLevelId).HasColumnName("Service_Level_ID");

                entity.Property(e => e.TargetResolutionTime).HasColumnName("Target_Resolution_Time");
            });

            modelBuilder.Entity<RightObjectRelationClass>(entity =>
            {
                entity.ToTable("Right_Object_Relation_Classes");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.RelationTypeId).HasColumnName("Relation_Type_ID");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.RightObjectRelationClasses)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Class_Right_Object_Relation_Classes_FK1");

                entity.HasOne(d => d.RelationType)
                    .WithMany(p => p.RightObjectRelationClasses)
                    .HasForeignKey(d => d.RelationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Relation_Type_Right_Object_Relation_Classes_FK1");
            });

            modelBuilder.Entity<ScCategory>(entity =>
            {
                entity.ToTable("SC_Category");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("SC_Category_SC_Category_FK1");
            });

            modelBuilder.Entity<ScCategoryItemsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SC_Category_Items_List");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ScCategoryId).HasColumnName("SC_Category_ID");

                entity.Property(e => e.ScItemId).HasColumnName("SC_Item_ID");
            });

            modelBuilder.Entity<ScCategoryList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SC_Category_List");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<ScCategoryListAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SC_Category_List_All");

                entity.Property(e => e.FullName)
                    .HasMaxLength(2048)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<ScItemCategoriesList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SC_Item_Categories_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ScCategoryId).HasColumnName("SC_Category_ID");

                entity.Property(e => e.ScItemId).HasColumnName("SC_Item_ID");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ScItemCategory>(entity =>
            {
                entity.ToTable("SC_Item_Categories");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ScCategoryId).HasColumnName("SC_Category_ID");

                entity.Property(e => e.ScItemId).HasColumnName("SC_Item_ID");

                entity.HasOne(d => d.ScCategory)
                    .WithMany(p => p.ScItemCategories)
                    .HasForeignKey(d => d.ScCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SC_Category_SC_Item_Categories_FK1");

                entity.HasOne(d => d.ScItem)
                    .WithMany(p => p.ScItemCategories)
                    .HasForeignKey(d => d.ScItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Service_Catalog_SC_Item_Categories_FK1");
            });

            modelBuilder.Entity<ScItemListWithCategoryId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SC_Item_List_With_Category_ID");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.RequestCount).HasColumnName("Request_Count");

                entity.Property(e => e.RequestFulfillment)
                    .HasMaxLength(100)
                    .HasColumnName("Request_Fulfillment");

                entity.Property(e => e.RequestFulfillmentId).HasColumnName("Request_Fulfillment_ID");

                entity.Property(e => e.ScCategoryId).HasColumnName("SC_Category_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SearchForSolution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Search_For_Solution");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.Title).HasMaxLength(128);
            });

            modelBuilder.Entity<SecApprovalRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secApproval_Requests");

                entity.Property(e => e.ApprovalStageId).HasColumnName("Approval_Stage_ID");

                entity.Property(e => e.ApproverId).HasColumnName("Approver_ID");

                entity.Property(e => e.DecisionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Decision_Date");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecApprovalStage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secApproval_Stages");

                entity.Property(e => e.ApprovalDeadline)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Deadline");

                entity.Property(e => e.ApprovalGroupId).HasColumnName("Approval_Group_ID");

                entity.Property(e => e.ApprovalStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Start_Time");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MinimumVotePercentage).HasColumnName("Minimum_Vote_Percentage");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.SingleVoteTimeframe).HasColumnName("Single_Vote_Timeframe");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecAsset>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secAssets");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AssociatedCiId).HasColumnName("Associated_CI_ID");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethodId).HasColumnName("Depreciation_Method_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoItemId).HasColumnName("PO_Item_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<SecChangeRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secChange_Requests");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.ApprovalDeadline)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Deadline");

                entity.Property(e => e.ApprovalStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Start_Time");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.MinimumVotePercentage).HasColumnName("Minimum_Vote_Percentage");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.SingleVoteTimeframe).HasColumnName("Single_Vote_Timeframe");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.VotingMethodId).HasColumnName("Voting_Method_ID");
            });

            modelBuilder.Entity<SecCiActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secCI_Active");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecCiAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secCI_All");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecComputer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secComputers");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Audit_Date");

                entity.Property(e => e.AuditId)
                    .HasMaxLength(80)
                    .HasColumnName("Audit_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerName)
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Name");

                entity.Property(e => e.Cpu)
                    .HasMaxLength(50)
                    .HasColumnName("CPU");

                entity.Property(e => e.CpuCount).HasColumnName("CPU_Count");

                entity.Property(e => e.CpuSpeed).HasColumnName("CPU_Speed");

                entity.Property(e => e.DisplayAdapter)
                    .HasMaxLength(100)
                    .HasColumnName("Display_Adapter");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.Hdd).HasColumnName("HDD");

                entity.Property(e => e.HddFree).HasColumnName("HDD_Free");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImportId).HasColumnName("Import_ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.LanCard)
                    .HasMaxLength(80)
                    .HasColumnName("Lan_Card");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Mac)
                    .HasMaxLength(25)
                    .HasColumnName("MAC");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Monitor).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OsName)
                    .HasMaxLength(255)
                    .HasColumnName("OS_Name");

                entity.Property(e => e.OsServicePack)
                    .HasMaxLength(80)
                    .HasColumnName("OS_ServicePack");

                entity.Property(e => e.OsVersion)
                    .HasMaxLength(30)
                    .HasColumnName("OS_Version");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PrimaryIpAddress)
                    .HasMaxLength(50)
                    .HasColumnName("Primary_IP_Address");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.Ram).HasColumnName("RAM");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0007)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0007");

                entity.Property(e => e.UdfLegacyWarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Legacy_Warranty_Exp");

                entity.Property(e => e.Workgroup).HasMaxLength(25);
            });

            modelBuilder.Entity<SecConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secConfigurations");

                entity.Property(e => e.AssociatedCiId).HasColumnName("Associated_CI_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfShortName)
                    .HasMaxLength(15)
                    .HasColumnName("UDF_Short_Name");

                entity.Property(e => e.UdfSupportGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Support_Group");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");
            });

            modelBuilder.Entity<SecConsumable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secConsumables");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OriginalCost)
                    .HasColumnType("money")
                    .HasColumnName("Original_Cost");

                entity.Property(e => e.OriginalQty).HasColumnName("Original_Qty");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PoItemId).HasColumnName("PO_Item_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<SecContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secContracts");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ContractNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Contract_Number");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ProviderId).HasColumnName("Provider_ID");

                entity.Property(e => e.ReceiverId).HasColumnName("Receiver_ID");

                entity.Property(e => e.RenewalOption).HasColumnName("Renewal_Option");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfLocation)
                    .HasMaxLength(255)
                    .HasColumnName("UDF_Location");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");
            });

            modelBuilder.Entity<SecDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secDocuments");

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Keywords).HasMaxLength(100);

                entity.Property(e => e.LastReviewed)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Reviewed");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<SecHardware>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secHardware");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Audit_Date");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImportId).HasColumnName("Import_ID");

                entity.Property(e => e.InstallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Install_Date");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NetworkId).HasColumnName("Network_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PrimaryIpAddress)
                    .HasMaxLength(50)
                    .HasColumnName("Primary_IP_Address");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0007)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0007");

                entity.Property(e => e.UdfImei)
                    .HasMaxLength(15)
                    .HasColumnName("UDF_IMEI");

                entity.Property(e => e.UdfLegacyWarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Legacy_Warranty_Exp");

                entity.Property(e => e.UdfPhoneNumber)
                    .HasMaxLength(64)
                    .HasColumnName("UDF_Phone_Number");
            });

            modelBuilder.Entity<SecIncident>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secIncidents");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FirstTimeResolved).HasColumnName("First_Time_Resolved");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedProblemId).HasColumnName("Related_Problem_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResolutionOverdue).HasColumnName("Resolution_Overdue");

                entity.Property(e => e.ResolutionTime).HasColumnName("Resolution_Time");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ResponseOverdue).HasColumnName("Response_Overdue");

                entity.Property(e => e.ResponseTime).HasColumnName("Response_Time");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002).HasColumnName("UDF0002");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<SecKbArticle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secKB_Articles");

                entity.Property(e => e.ApprovedById).HasColumnName("Approved_by_ID");

                entity.Property(e => e.AuthorId).HasColumnName("Author_ID");

                entity.Property(e => e.ContentText).HasColumnName("Content_Text");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(50)
                    .HasColumnName("OID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<SecLibrary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secLibrary");

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.CheckOutDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Check_Out_Date");

                entity.Property(e => e.CheckedOutToId).HasColumnName("Checked_Out_to_ID");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.SharedWithEveryone).HasColumnName("Shared_with_Everyone");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecNetwork>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secNetworks");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Domain).HasMaxLength(256);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IpFrom)
                    .HasMaxLength(15)
                    .HasColumnName("IP_from");

                entity.Property(e => e.IpTo)
                    .HasMaxLength(15)
                    .HasColumnName("IP_to");

                entity.Property(e => e.Ipv6From)
                    .HasMaxLength(50)
                    .HasColumnName("IPv6_From");

                entity.Property(e => e.Ipv6To)
                    .HasMaxLength(50)
                    .HasColumnName("IPv6_To");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecOrganizationalUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secOrganizational_Units");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Placement).HasMaxLength(2048);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<SecPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secPersons");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Address3).HasColumnName("Address_3");

                entity.Property(e => e.AdimportId).HasColumnName("ADImport_ID");

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.BusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Business_Phone");

                entity.Property(e => e.CalendarId).HasColumnName("Calendar_ID");

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.GenderId).HasColumnName("Gender_ID");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Home_Phone");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("money")
                    .HasColumnName("Hourly_Rate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImAddress)
                    .HasMaxLength(50)
                    .HasColumnName("IM_Address");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(64)
                    .HasColumnName("Job_Title");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(64)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Mobile_Phone");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Pager).HasMaxLength(50);

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("Primary_Email");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("Primary_Login");

                entity.Property(e => e.SkillLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Skill_Level");

                entity.Property(e => e.SmsEmail)
                    .HasMaxLength(100)
                    .HasColumnName("SMS_Email");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(64);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0003)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0003");

                entity.Property(e => e.Udf0005).HasColumnName("UDF0005");

                entity.Property(e => e.Udf0006)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF0006");

                entity.Property(e => e.UdfBadgeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Badge_Number");

                entity.Property(e => e.UdfDistinguishedName)
                    .HasMaxLength(500)
                    .HasColumnName("UDF_Distinguished_Name");

                entity.Property(e => e.UdfEmployeeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Employee_Number");

                entity.Property(e => e.UdfLunchPeriod)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Lunch_Period");

                entity.Property(e => e.UdfPrimaryGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Primary_Group");

                entity.Property(e => e.UdfVehicleColor)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Color");

                entity.Property(e => e.UdfVehicleMake)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Make");

                entity.Property(e => e.UdfVehicleModel)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Model");

                entity.Property(e => e.UdfVehicleYear)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Vehicle_Year");
            });

            modelBuilder.Entity<SecPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secPO");

                entity.Property(e => e.AuthorizedById).HasColumnName("Authorized_by_ID");

                entity.Property(e => e.BillTo)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to");

                entity.Property(e => e.BillToAddress).HasColumnName("Bill_to_Address");

                entity.Property(e => e.BillToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Contact");

                entity.Property(e => e.BillToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Bill_to_Email");

                entity.Property(e => e.BillToFax)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Fax");

                entity.Property(e => e.BillToPhone)
                    .HasMaxLength(25)
                    .HasColumnName("Bill_to_Phone");

                entity.Property(e => e.BudgetId).HasColumnName("Budget_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Received");

                entity.Property(e => e.DateRequired)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Required");

                entity.Property(e => e.FreightTermsId).HasColumnName("Freight_Terms_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PaymentTermsId).HasColumnName("Payment_Terms_ID");

                entity.Property(e => e.PoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Date");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(25)
                    .HasColumnName("PO_Number");

                entity.Property(e => e.PriceAdjustment)
                    .HasColumnType("money")
                    .HasColumnName("Price_Adjustment");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.SalesTax)
                    .HasColumnType("money")
                    .HasColumnName("Sales_Tax");

                entity.Property(e => e.ShipTo)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to");

                entity.Property(e => e.ShipToAddress).HasColumnName("Ship_to_Address");

                entity.Property(e => e.ShipToContact)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Contact");

                entity.Property(e => e.ShipToEmail)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Email");

                entity.Property(e => e.ShipToFax)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_to_Fax");

                entity.Property(e => e.ShipToPhone)
                    .HasMaxLength(20)
                    .HasColumnName("Ship_to_Phone");

                entity.Property(e => e.ShippingId).HasColumnName("Shipping_ID");

                entity.Property(e => e.ShippingPrice)
                    .HasColumnType("money")
                    .HasColumnName("Shipping_Price");

                entity.Property(e => e.ShippingTaxRate).HasColumnName("Shipping_Tax_Rate");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");

                entity.Property(e => e.VendorAddress).HasColumnName("Vendor_Address");

                entity.Property(e => e.VendorContact)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Contact");

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(255)
                    .HasColumnName("Vendor_Email");

                entity.Property(e => e.VendorFax)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Fax");

                entity.Property(e => e.VendorFein)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_FEIN");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(100)
                    .HasColumnName("Vendor_Name");

                entity.Property(e => e.VendorPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Phone");
            });

            modelBuilder.Entity<SecProblem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secProblems");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<SecProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secProducts");

                entity.Property(e => e.AssetCategoryId).HasColumnName("Asset_Category_ID");

                entity.Property(e => e.AssetTypeId).HasColumnName("Asset_Type_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ComputerCategoryId).HasColumnName("Computer_Category_ID");

                entity.Property(e => e.ComputerTypeId).HasColumnName("Computer_Type_ID");

                entity.Property(e => e.ConsumableCategoryId).HasColumnName("Consumable_Category_ID");

                entity.Property(e => e.ConsumableTypeId).HasColumnName("Consumable_Type_ID");

                entity.Property(e => e.ConversionFactor).HasColumnName("Conversion_Factor");

                entity.Property(e => e.HardwareCategoryId).HasColumnName("Hardware_Category_ID");

                entity.Property(e => e.HardwareTypeId).HasColumnName("Hardware_Type_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Msrp)
                    .HasColumnType("money")
                    .HasColumnName("MSRP");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.ProductClassId).HasColumnName("Product_Class_ID");

                entity.Property(e => e.PurchasingUomId).HasColumnName("Purchasing_UOM_ID");

                entity.Property(e => e.SoftwareLicenseCategoryId).HasColumnName("Software_License_Category_ID");

                entity.Property(e => e.SoftwareLicenseTypeId).HasColumnName("Software_License_Type_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockingUomId).HasColumnName("Stocking_UOM_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");

                entity.Property(e => e.WarrantyPeriod).HasColumnName("Warranty_Period");
            });

            modelBuilder.Entity<SecProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secProjects");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Placement)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfBusinessCase).HasColumnName("UDF_Business_Case");

                entity.Property(e => e.UdfDescription).HasColumnName("UDF_Description");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfImpactedAreas).HasColumnName("UDF_Impacted_Areas");

                entity.Property(e => e.UdfImpactedSystems).HasColumnName("UDF_Impacted_Systems");

                entity.Property(e => e.UdfPriority).HasColumnName("UDF_Priority");

                entity.Property(e => e.UdfProjectContact)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Contact");

                entity.Property(e => e.UdfProjectContactId).HasColumnName("UDF_Project_Contact_ID");

                entity.Property(e => e.UdfProjectSponsor)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Sponsor");

                entity.Property(e => e.UdfProjectSponsorId).HasColumnName("UDF_Project_Sponsor_ID");

                entity.Property(e => e.UdfRequester)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Requester");

                entity.Property(e => e.UdfRequesterId).HasColumnName("UDF_Requester_ID");

                entity.Property(e => e.UdfResourceCost).HasColumnName("UDF_Resource_Cost");

                entity.Property(e => e.UdfSpaInd).HasColumnName("UDF_SPA_Ind");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");
            });

            modelBuilder.Entity<SecReservation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secReservations");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LibraryItemId).HasColumnName("Library_Item_ID");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ReservationDateFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("Reservation_Date_From");

                entity.Property(e => e.ReservationDateTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Reservation_Date_To");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secServices");

                entity.Property(e => e.AvailabilityHoursId).HasColumnName("Availability_Hours_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ServiceManagerId).HasColumnName("Service_Manager_ID");

                entity.Property(e => e.ServiceProviderId).HasColumnName("Service_Provider_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SupportGroupId).HasColumnName("Support_Group_ID");

                entity.Property(e => e.TicketClassId).HasColumnName("Ticket_Class_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");
            });

            modelBuilder.Entity<SecServiceCatalogItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secService_Catalog_Items");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.RequestFulfillmentId).HasColumnName("Request_Fulfillment_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecServiceRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secService_Requests");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceCatalogItemId).HasColumnName("Service_Catalog_Item_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<SecSla>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secSLA");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceLevelId).HasColumnName("Service_Level_ID");

                entity.Property(e => e.ServiceProviderId).HasColumnName("Service_Provider_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");
            });

            modelBuilder.Entity<SecSoftwareLicense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secSoftware_Licenses");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.LicenseQty).HasColumnName("License_Qty");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.MasterLicense).HasColumnName("Master_License");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PolicyId).HasColumnName("Policy_ID");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfLegacyMedia)
                    .HasMaxLength(154)
                    .HasColumnName("UDF_Legacy_Media");

                entity.Property(e => e.UpgradeForId).HasColumnName("Upgrade_for_ID");
            });

            modelBuilder.Entity<SecStockRule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secStock_Rules");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.ReorderQuantity1).HasColumnName("Reorder_Quantity_1");

                entity.Property(e => e.ReorderQuantity2).HasColumnName("Reorder_Quantity_2");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.Threshold1).HasColumnName("Threshold_1");

                entity.Property(e => e.Threshold2).HasColumnName("Threshold_2");

                entity.Property(e => e.ThresholdAction1Id).HasColumnName("Threshold_Action_1_ID");

                entity.Property(e => e.ThresholdAction2Id).HasColumnName("Threshold_Action_2_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecTrackedSoftware>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secTracked_Software");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SecVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secVendors");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Contact).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Fein)
                    .HasMaxLength(50)
                    .HasColumnName("FEIN");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<SecWorkOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("secWork_Orders");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002).HasColumnName("UDF0002");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AvailabilityHoursId).HasColumnName("Availability_Hours_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ServiceManagerId).HasColumnName("Service_Manager_ID");

                entity.Property(e => e.ServiceProviderId).HasColumnName("Service_Provider_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SupportGroupId).HasColumnName("Support_Group_ID");

                entity.Property(e => e.TicketClassId).HasColumnName("Ticket_Class_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.HasOne(d => d.AvailabilityHours)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.AvailabilityHoursId)
                    .HasConstraintName("Work_Calendars_Services_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Services_FK1");

                entity.HasOne(d => d.ServiceManager)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.ServiceManagerId)
                    .HasConstraintName("Persons_Services_FK1");

                entity.HasOne(d => d.ServiceProvider)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.ServiceProviderId)
                    .HasConstraintName("Organizational_Units_Services_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Services_FK1");

                entity.HasOne(d => d.SupportGroup)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.SupportGroupId)
                    .HasConstraintName("User_Groups_Services_FK1");

                entity.HasOne(d => d.TicketClass)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.TicketClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Class_Services_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Services_FK1");
            });

            modelBuilder.Entity<ServiceCatalogItem>(entity =>
            {
                entity.ToTable("Service_Catalog_Items");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.RequestFulfillmentId).HasColumnName("Request_Fulfillment_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.RequestFulfillment)
                    .WithMany(p => p.ServiceCatalogItems)
                    .HasForeignKey(d => d.RequestFulfillmentId)
                    .HasConstraintName("Service_Request_Fulfillment_Service_Catalog_Items_FK1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceCatalogItems)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("Services_Service_Catalog_Items_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ServiceCatalogItems)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Service_Catalog_Items_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ServiceCatalogItems)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Service_Catalog_Items_FK1");
            });

            modelBuilder.Entity<ServiceCatalogItemList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service_Catalog_Item_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.RequestCount).HasColumnName("Request_Count");

                entity.Property(e => e.RequestFulfillment)
                    .HasMaxLength(100)
                    .HasColumnName("Request_Fulfillment");

                entity.Property(e => e.RequestFulfillmentId).HasColumnName("Request_Fulfillment_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ServiceCatalogItemListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service_Catalog_Item_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.RequestCount).HasColumnName("Request_Count");

                entity.Property(e => e.RequestFulfillment)
                    .HasMaxLength(100)
                    .HasColumnName("Request_Fulfillment");

                entity.Property(e => e.RequestFulfillmentId).HasColumnName("Request_Fulfillment_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<ServiceLevel>(entity =>
            {
                entity.ToTable("Service_Level");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceLevel1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Service_Level");

                entity.Property(e => e.SupportHoursId).HasColumnName("Support_Hours_ID");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceLevels)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Services_Service_Level_FK1");

                entity.HasOne(d => d.SupportHours)
                    .WithMany(p => p.ServiceLevels)
                    .HasForeignKey(d => d.SupportHoursId)
                    .HasConstraintName("Work_Calendars_Service_Level_FK1");
            });

            modelBuilder.Entity<ServiceList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AvailabilityHours)
                    .HasMaxLength(100)
                    .HasColumnName("Availability_Hours");

                entity.Property(e => e.AvailabilityHoursId).HasColumnName("Availability_Hours_ID");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ServiceManager)
                    .HasMaxLength(276)
                    .HasColumnName("Service_Manager");

                entity.Property(e => e.ServiceManagerId).HasColumnName("Service_Manager_ID");

                entity.Property(e => e.ServiceProvider)
                    .HasMaxLength(2048)
                    .HasColumnName("Service_Provider");

                entity.Property(e => e.ServiceProviderId).HasColumnName("Service_Provider_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SupportGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Support_Group");

                entity.Property(e => e.SupportGroupId).HasColumnName("Support_Group_ID");

                entity.Property(e => e.TicketClass)
                    .HasMaxLength(50)
                    .HasColumnName("Ticket_Class");

                entity.Property(e => e.TicketClassId).HasColumnName("Ticket_Class_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");
            });

            modelBuilder.Entity<ServiceListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AvailabilityHours)
                    .HasMaxLength(100)
                    .HasColumnName("Availability_Hours");

                entity.Property(e => e.AvailabilityHoursId).HasColumnName("Availability_Hours_ID");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ServiceManager)
                    .HasMaxLength(276)
                    .HasColumnName("Service_Manager");

                entity.Property(e => e.ServiceManagerId).HasColumnName("Service_Manager_ID");

                entity.Property(e => e.ServiceProvider)
                    .HasMaxLength(2048)
                    .HasColumnName("Service_Provider");

                entity.Property(e => e.ServiceProviderId).HasColumnName("Service_Provider_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SupportGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Support_Group");

                entity.Property(e => e.SupportGroupId).HasColumnName("Support_Group_ID");

                entity.Property(e => e.TicketClass)
                    .HasMaxLength(50)
                    .HasColumnName("Ticket_Class");

                entity.Property(e => e.TicketClassId).HasColumnName("Ticket_Class_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");
            });

            modelBuilder.Entity<ServiceReceiversList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service_Receivers_List");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Placement).HasMaxLength(2048);

                entity.Property(e => e.ReceiverName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Receiver_Name");

                entity.Property(e => e.ReceiverOrganizationId).HasColumnName("Receiver_Organization_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.SlaId).HasColumnName("SLA_ID");

                entity.Property(e => e.SlaName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("SLA_Name");

                entity.Property(e => e.SlaServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("SLA_Service_Name");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<ServiceRequest>(entity =>
            {
                entity.ToTable("Service_Requests");

                entity.HasIndex(e => e.RelatedCiId, "IX_Service_Requests_Related_CI");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceCatalogItemId).HasColumnName("Service_Catalog_Item_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.HasOne(d => d.AssigneeGroup)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.AssigneeGroupId)
                    .HasConstraintName("User_Groups_Service_Requests_FK1");

                entity.HasOne(d => d.Assignee)
                    .WithMany(p => p.ServiceRequestAssignees)
                    .HasForeignKey(d => d.AssigneeId)
                    .HasConstraintName("Persons_Service_Requests_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Service_Requests_FK1");

                entity.HasOne(d => d.ClosureCode)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.ClosureCodeId)
                    .HasConstraintName("Ticket_Closure_Code_Service_Requests_FK1");

                entity.HasOne(d => d.Impact)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.ImpactId)
                    .HasConstraintName("Ticket_Impact_Service_Requests_FK1");

                entity.HasOne(d => d.Medium)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.MediumId)
                    .HasConstraintName("Ticket_Medium_Service_Requests_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Service_Requests_FK1");

                entity.HasOne(d => d.Priority)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.PriorityId)
                    .HasConstraintName("Ticket_Priority_Service_Requests_FK1");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("Projects_Service_Requests_FK1");

                entity.HasOne(d => d.RelatedCi)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.RelatedCiId)
                    .HasConstraintName("Object_Index_Service_Requests_FK1");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.ServiceRequestRequesters)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("Persons_Service_Requests_FK2");

                entity.HasOne(d => d.ServiceCatalogItem)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.ServiceCatalogItemId)
                    .HasConstraintName("Service_Catalog_Items_Service_Requests_FK1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("Services_Service_Requests_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Service_Requests_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Service_Requests_FK1");

                entity.HasOne(d => d.Urgency)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.UrgencyId)
                    .HasConstraintName("Ticket_Urgency_Service_Requests_FK1");
            });

            modelBuilder.Entity<ServiceRequestFulfillment>(entity =>
            {
                entity.ToTable("Service_Request_Fulfillment");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.RequestCreateActionId).HasColumnName("Request_Create_Action_ID");
            });

            modelBuilder.Entity<ServiceRequestFulfillmentList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service_Request_Fulfillment_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.RequestCreateActionId).HasColumnName("Request_Create_Action_ID");
            });

            modelBuilder.Entity<ServiceRequestFulfillmentListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service_Request_Fulfillment_List_Active");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.RequestCreateActionId).HasColumnName("Request_Create_Action_ID");
            });

            modelBuilder.Entity<ServiceRequestList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service_Request_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingComment).HasColumnName("Rating_Comment");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceCatalogItem)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Catalog_Item");

                entity.Property(e => e.ServiceCatalogItemId).HasColumnName("Service_Catalog_Item_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<ServiceRequestListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service_Request_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingComment).HasColumnName("Rating_Comment");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceCatalogItem)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Catalog_Item");

                entity.Property(e => e.ServiceCatalogItemId).HasColumnName("Service_Catalog_Item_ID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UdfXmlData).HasColumnName("UDF_XML_Data");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<SharedViewListSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Shared_View_List_Summary");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.RoleCount).HasColumnName("Role_Count");
            });

            modelBuilder.Entity<Sla>(entity =>
            {
                entity.ToTable("SLA");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceLevelId).HasColumnName("Service_Level_ID");

                entity.Property(e => e.ServiceProviderId).HasColumnName("Service_Provider_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Slas)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_SLA_FK1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Slas)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("Services_SLA_FK1");

                entity.HasOne(d => d.ServiceLevel)
                    .WithMany(p => p.Slas)
                    .HasForeignKey(d => d.ServiceLevelId)
                    .HasConstraintName("Service_Level_SLA_FK1");

                entity.HasOne(d => d.ServiceProvider)
                    .WithMany(p => p.Slas)
                    .HasForeignKey(d => d.ServiceProviderId)
                    .HasConstraintName("Organizational_Units_SLA_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Slas)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_SLA_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Slas)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_SLA_FK1");
            });

            modelBuilder.Entity<SlaList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLA_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ServiceAvailabilityHours)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Availability_Hours");

                entity.Property(e => e.ServiceCategory)
                    .HasMaxLength(2048)
                    .HasColumnName("Service_Category");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceLevel)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Level");

                entity.Property(e => e.ServiceLevelId).HasColumnName("Service_Level_ID");

                entity.Property(e => e.ServiceManager)
                    .HasMaxLength(276)
                    .HasColumnName("Service_Manager");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.ServiceProviderId).HasColumnName("Service_Provider_ID");

                entity.Property(e => e.ServiceProviderOrganization)
                    .HasMaxLength(2048)
                    .HasColumnName("Service_Provider_Organization");

                entity.Property(e => e.ServiceStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Service_Status");

                entity.Property(e => e.ServiceSupportGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Support_Group");

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(50)
                    .HasColumnName("Service_Type");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SupportHours)
                    .HasMaxLength(100)
                    .HasColumnName("Support_Hours");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");
            });

            modelBuilder.Entity<SlaListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLA_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ServiceAvailabilityHours)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Availability_Hours");

                entity.Property(e => e.ServiceCategory)
                    .HasMaxLength(2048)
                    .HasColumnName("Service_Category");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceLevel)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Level");

                entity.Property(e => e.ServiceLevelId).HasColumnName("Service_Level_ID");

                entity.Property(e => e.ServiceManager)
                    .HasMaxLength(276)
                    .HasColumnName("Service_Manager");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.ServiceProviderId).HasColumnName("Service_Provider_ID");

                entity.Property(e => e.ServiceProviderOrganization)
                    .HasMaxLength(2048)
                    .HasColumnName("Service_Provider_Organization");

                entity.Property(e => e.ServiceStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Service_Status");

                entity.Property(e => e.ServiceSupportGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Support_Group");

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(50)
                    .HasColumnName("Service_Type");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SupportHours)
                    .HasMaxLength(100)
                    .HasColumnName("Support_Hours");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");
            });

            modelBuilder.Entity<SlaReceiversList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLA_Receivers_List");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Placement).HasMaxLength(2048);

                entity.Property(e => e.ReceiverOrganizationId).HasColumnName("Receiver_Organization_ID");

                entity.Property(e => e.SlaId).HasColumnName("SLA_ID");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<SoftPlatform>(entity =>
            {
                entity.ToTable("Soft_Platforms");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Platform)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<SoftProduct>(entity =>
            {
                entity.ToTable("Soft_Products");

                entity.HasIndex(e => e.PartOfSuiteId, "Index_Soft_Products_Suite");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PartOfSuiteId).HasColumnName("Part_of_Suite_ID");

                entity.Property(e => e.PlatformId).HasColumnName("Platform_ID");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.SoftProducts)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Software_Product_Category_Soft_Products_FK1");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.SoftProducts)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("Software_Product_Groups_Soft_Products_FK1");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.SoftProducts)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("Brands_Soft_Products_FK1");

                entity.HasOne(d => d.PartOfSuite)
                    .WithMany(p => p.InversePartOfSuite)
                    .HasForeignKey(d => d.PartOfSuiteId)
                    .HasConstraintName("Soft_Products_Soft_Products_FK1");

                entity.HasOne(d => d.Platform)
                    .WithMany(p => p.SoftProducts)
                    .HasForeignKey(d => d.PlatformId)
                    .HasConstraintName("Soft_Platforms_Soft_Products_FK1");
            });

            modelBuilder.Entity<SoftProductList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Soft_Product_List");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Group).HasMaxLength(100);

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.GroupIgnored).HasColumnName("Group_Ignored");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PartOfSuite)
                    .HasMaxLength(100)
                    .HasColumnName("Part_of_Suite");

                entity.Property(e => e.PartOfSuiteId).HasColumnName("Part_of_Suite_ID");

                entity.Property(e => e.Platform).HasMaxLength(25);

                entity.Property(e => e.PlatformId).HasColumnName("Platform_ID");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.TrackedSoftware)
                    .HasMaxLength(100)
                    .HasColumnName("Tracked_Software");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<SoftProductListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Soft_Product_List_Active");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Group).HasMaxLength(100);

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.GroupIgnored).HasColumnName("Group_Ignored");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.PartOfSuite)
                    .HasMaxLength(100)
                    .HasColumnName("Part_of_Suite");

                entity.Property(e => e.PartOfSuiteId).HasColumnName("Part_of_Suite_ID");

                entity.Property(e => e.Platform).HasMaxLength(25);

                entity.Property(e => e.PlatformId).HasColumnName("Platform_ID");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.TrackedSoftware)
                    .HasMaxLength(100)
                    .HasColumnName("Tracked_Software");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<SoftProductSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Soft_Product_Summary");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");
            });

            modelBuilder.Entity<SoftwareLicense>(entity =>
            {
                entity.ToTable("Software_Licenses");

                entity.HasIndex(e => e.TrackedSoftwareId, "IDX_Software_Licenses_TS");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.LicenseQty).HasColumnName("License_Qty");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.MasterLicense).HasColumnName("Master_License");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.PolicyId).HasColumnName("Policy_ID");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfLegacyMedia)
                    .HasMaxLength(154)
                    .HasColumnName("UDF_Legacy_Media");

                entity.Property(e => e.UpgradeForId).HasColumnName("Upgrade_for_ID");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.SoftwareLicenses)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Software_Licenses_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.SoftwareLicenses)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Software_Licenses_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.SoftwareLicenses)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Software_Licenses_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.SoftwareLicenses)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Software_Licenses_FK1");

                entity.HasOne(d => d.Policy)
                    .WithMany(p => p.SoftwareLicenses)
                    .HasForeignKey(d => d.PolicyId)
                    .HasConstraintName("Software_License_Policy_Software_Licenses_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.SoftwareLicenses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Software_Licenses_FK1");

                entity.HasOne(d => d.TrackedSoftware)
                    .WithMany(p => p.SoftwareLicenses)
                    .HasForeignKey(d => d.TrackedSoftwareId)
                    .HasConstraintName("Tracked_Software_Software_Licenses_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.SoftwareLicenses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Software_Licenses_FK1");

                entity.HasOne(d => d.UpgradeFor)
                    .WithMany(p => p.InverseUpgradeFor)
                    .HasForeignKey(d => d.UpgradeForId)
                    .HasConstraintName("Software_Licenses_Software_Licenses_FK1");
            });

            modelBuilder.Entity<SoftwareLicenseComputer>(entity =>
            {
                entity.ToTable("Software_License_Computers");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ComputerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Computer_Name");

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");

                entity.HasOne(d => d.SoftwareLicense)
                    .WithMany(p => p.SoftwareLicenseComputers)
                    .HasForeignKey(d => d.SoftwareLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Software_Licenses_Software_License_Computers_FK1");
            });

            modelBuilder.Entity<SoftwareLicenseList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Software_License_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(128);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Conformance)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LicenseQty).HasColumnName("License_Qty");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.MasterLicense).HasColumnName("Master_License");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Policy).HasMaxLength(50);

                entity.Property(e => e.PolicyId).HasColumnName("Policy_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.TrackedSoftware)
                    .HasMaxLength(100)
                    .HasColumnName("Tracked_Software");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");

                entity.Property(e => e.TrackingId).HasColumnName("Tracking_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfLegacyMedia)
                    .HasMaxLength(154)
                    .HasColumnName("UDF_Legacy_Media");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.UnreconciledAllocations).HasColumnName("Unreconciled_Allocations");

                entity.Property(e => e.UpgradeFor)
                    .HasMaxLength(100)
                    .HasColumnName("Upgrade_for");

                entity.Property(e => e.UpgradeForId).HasColumnName("Upgrade_for_ID");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<SoftwareLicenseListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Software_License_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Asset).HasMaxLength(128);

                entity.Property(e => e.AssetId).HasColumnName("Asset_ID");

                entity.Property(e => e.AssetTag)
                    .HasMaxLength(80)
                    .HasColumnName("Asset_Tag");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Conformance)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("money")
                    .HasColumnName("Current_Value");

                entity.Property(e => e.DepreciationMethod)
                    .HasMaxLength(50)
                    .HasColumnName("Depreciation_Method");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Expiration_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InstallKey)
                    .HasMaxLength(100)
                    .HasColumnName("Install_Key");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(25)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.LastDepreciation)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Depreciation");

                entity.Property(e => e.LeaseReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lease_Return_Date");

                entity.Property(e => e.LicenseQty).HasColumnName("License_Qty");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.MasterLicense).HasColumnName("Master_License");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Policy).HasMaxLength(50);

                entity.Property(e => e.PolicyId).HasColumnName("Policy_ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(100)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RetirementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retirement_Date");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasColumnName("Salvage_Value");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(100)
                    .HasColumnName("Serial_Num");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.TrackedSoftware)
                    .HasMaxLength(100)
                    .HasColumnName("Tracked_Software");

                entity.Property(e => e.TrackedSoftwareId).HasColumnName("Tracked_Software_ID");

                entity.Property(e => e.TrackingId).HasColumnName("Tracking_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfLegacyMedia)
                    .HasMaxLength(154)
                    .HasColumnName("UDF_Legacy_Media");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Cost");

                entity.Property(e => e.UnreconciledAllocations).HasColumnName("Unreconciled_Allocations");

                entity.Property(e => e.UpgradeFor)
                    .HasMaxLength(100)
                    .HasColumnName("Upgrade_for");

                entity.Property(e => e.UpgradeForId).HasColumnName("Upgrade_for_ID");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.WarrantyExp)
                    .HasColumnType("datetime")
                    .HasColumnName("Warranty_Exp");
            });

            modelBuilder.Entity<SoftwareLicenseLocation>(entity =>
            {
                entity.ToTable("Software_License_Locations");

                entity.HasIndex(e => new { e.SoftwareLicenseId, e.LocationId }, "IDX_Software_License_Locations_Unique")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.IncludeSubLocations).HasColumnName("Include_Sub_Locations");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.SoftwareLicenseLocations)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Software_License_Locations_FK1");

                entity.HasOne(d => d.SoftwareLicense)
                    .WithMany(p => p.SoftwareLicenseLocations)
                    .HasForeignKey(d => d.SoftwareLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Software_Licenses_Software_License_Locations_FK1");
            });

            modelBuilder.Entity<SoftwareLicenseOrganization>(entity =>
            {
                entity.ToTable("Software_License_Organizations");

                entity.HasIndex(e => new { e.SoftwareLicenseId, e.OrganizationId }, "IDX_Software_License_Organizations_Unique")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.IncludeSubOrganizations).HasColumnName("Include_Sub_Organizations");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.SoftwareLicenseOrganizations)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Software_License_Organizations_FK1");

                entity.HasOne(d => d.SoftwareLicense)
                    .WithMany(p => p.SoftwareLicenseOrganizations)
                    .HasForeignKey(d => d.SoftwareLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Software_Licenses_Software_License_Organizations_FK1");
            });

            modelBuilder.Entity<SoftwareLicensePolicy>(entity =>
            {
                entity.ToTable("Software_License_Policy");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Policy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.TrackingId).HasColumnName("Tracking_ID");

                entity.HasOne(d => d.Tracking)
                    .WithMany(p => p.SoftwareLicensePolicies)
                    .HasForeignKey(d => d.TrackingId)
                    .HasConstraintName("License_Tracking_Types_Software_License_Policy_FK1");
            });

            modelBuilder.Entity<SoftwareLicenseRule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Software_License_Rules");

                entity.Property(e => e.Description).HasMaxLength(126);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Rule)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.RuleType).HasColumnName("Rule_Type");

                entity.Property(e => e.SoftwareLicenseId).HasColumnName("Software_License_ID");
            });

            modelBuilder.Entity<SoftwareProductCategory>(entity =>
            {
                entity.ToTable("Software_Product_Category");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Category).HasMaxLength(100);
            });

            modelBuilder.Entity<SoftwareProductGroup>(entity =>
            {
                entity.ToTable("Software_Product_Groups");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<SoftwareVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Software_Vendors");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");
            });

            modelBuilder.Entity<SolutionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Solution_List");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(276);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SolutionListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Solution_List_Active");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(276)
                    .HasColumnName("OID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SolutionRating>(entity =>
            {
                entity.ToTable("Solution_Ratings");

                entity.HasIndex(e => e.ObjectId, "IDX_Solution_Ratings_Object");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.SolutionRatings)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Index_Solution_Ratings_FK1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.SolutionRatings)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_Solution_Ratings_FK1");
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("Status_PK")
                    .IsClustered(false);

                entity.ToTable("Status");

                entity.HasIndex(e => e.ClassId, "IX_Status_Class");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.Status1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Status");

                entity.Property(e => e.Tags).IsRequired();

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.Statuses)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Class_Status_FK1");

                entity.HasOne(d => d.Image)
                    .WithMany(p => p.Statuses)
                    .HasForeignKey(d => d.ImageId)
                    .HasConstraintName("cfgLCImages_Status_FK1");
            });

            modelBuilder.Entity<StatusView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Status_View");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StatusFullName)
                    .IsRequired()
                    .HasMaxLength(103)
                    .HasColumnName("Status_Full_Name");

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<StockMovement>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("Stock_Movements_PK")
                    .IsClustered(false);

                entity.ToTable("Stock_Movements");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.PoId).HasColumnName("PO_ID");

                entity.Property(e => e.PoName)
                    .HasMaxLength(100)
                    .HasColumnName("PO_Name");

                entity.Property(e => e.PoOid)
                    .HasMaxLength(25)
                    .HasColumnName("PO_OID");

                entity.Property(e => e.ReasonId).HasColumnName("Reason_ID");

                entity.Property(e => e.SourceAssetId).HasColumnName("Source_Asset_ID");

                entity.Property(e => e.SourceAssetName)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Asset_Name");

                entity.Property(e => e.SourceAssetOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Asset_OID");

                entity.Property(e => e.SourceBalance).HasColumnName("Source_Balance");

                entity.Property(e => e.SourceConsumableId).HasColumnName("Source_Consumable_ID");

                entity.Property(e => e.SourcePersonId).HasColumnName("Source_Person_ID");

                entity.Property(e => e.SourcePersonName)
                    .HasMaxLength(276)
                    .HasColumnName("Source_Person_Name");

                entity.Property(e => e.SourcePersonOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Person_OID");

                entity.Property(e => e.SourceStockRoomId).HasColumnName("Source_Stock_Room_ID");

                entity.Property(e => e.SourceStockRoomName)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Stock_Room_Name");

                entity.Property(e => e.StockManagerId).HasColumnName("Stock_Manager_ID");

                entity.Property(e => e.StockManagerName)
                    .HasMaxLength(276)
                    .HasColumnName("Stock_Manager_Name");

                entity.Property(e => e.StockManagerOid)
                    .HasMaxLength(25)
                    .HasColumnName("Stock_Manager_OID");

                entity.Property(e => e.TargetAssetId).HasColumnName("Target_Asset_ID");

                entity.Property(e => e.TargetAssetName)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Asset_Name");

                entity.Property(e => e.TargetAssetOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Asset_OID");

                entity.Property(e => e.TargetBalance).HasColumnName("Target_Balance");

                entity.Property(e => e.TargetConsumableId).HasColumnName("Target_Consumable_ID");

                entity.Property(e => e.TargetConsumableName)
                    .HasMaxLength(10)
                    .HasColumnName("Target_Consumable_Name");

                entity.Property(e => e.TargetConsumableOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Consumable_OID");

                entity.Property(e => e.TargetPersonId).HasColumnName("Target_Person_ID");

                entity.Property(e => e.TargetPersonName)
                    .HasMaxLength(276)
                    .HasColumnName("Target_Person_Name");

                entity.Property(e => e.TargetPersonOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Person_OID");

                entity.Property(e => e.TargetStockRoomId).HasColumnName("Target_Stock_Room_ID");

                entity.Property(e => e.TargetStockRoomName)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Stock_Room_Name");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.StockMovements)
                    .HasForeignKey(d => d.ReasonId)
                    .HasConstraintName("Stock_Movement_Reasons_Stock_Movements_FK1");

                entity.HasOne(d => d.SourceConsumable)
                    .WithMany(p => p.StockMovements)
                    .HasForeignKey(d => d.SourceConsumableId)
                    .HasConstraintName("Consumables_Stock_Movements_FK1");
            });

            modelBuilder.Entity<StockMovementList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Stock_Movement_List");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Direction)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PoId).HasColumnName("PO_ID");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(200)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.PurchaseOrderOid)
                    .HasMaxLength(25)
                    .HasColumnName("Purchase_Order_OID");

                entity.Property(e => e.Reason).HasMaxLength(100);

                entity.Property(e => e.SourceAsset)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Asset");

                entity.Property(e => e.SourceAssetId).HasColumnName("Source_Asset_ID");

                entity.Property(e => e.SourceAssetOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Asset_OID");

                entity.Property(e => e.SourceBalance).HasColumnName("Source_Balance");

                entity.Property(e => e.SourceConsumable)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Consumable");

                entity.Property(e => e.SourceConsumableId).HasColumnName("Source_Consumable_ID");

                entity.Property(e => e.SourceConsumableOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Consumable_OID");

                entity.Property(e => e.SourcePerson)
                    .HasMaxLength(276)
                    .HasColumnName("Source_Person");

                entity.Property(e => e.SourcePersonId).HasColumnName("Source_Person_ID");

                entity.Property(e => e.SourcePersonOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Person_OID");

                entity.Property(e => e.SourceStockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Stock_Room");

                entity.Property(e => e.SourceStockRoomId).HasColumnName("Source_Stock_Room_ID");

                entity.Property(e => e.StockManager)
                    .HasMaxLength(276)
                    .HasColumnName("Stock_Manager");

                entity.Property(e => e.StockManagerId).HasColumnName("Stock_Manager_ID");

                entity.Property(e => e.TargetAsset)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Asset");

                entity.Property(e => e.TargetAssetId).HasColumnName("Target_Asset_ID");

                entity.Property(e => e.TargetAssetOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Asset_OID");

                entity.Property(e => e.TargetBalance).HasColumnName("Target_Balance");

                entity.Property(e => e.TargetConsumable)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Consumable");

                entity.Property(e => e.TargetConsumableId).HasColumnName("Target_Consumable_ID");

                entity.Property(e => e.TargetConsumableOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Consumable_OID");

                entity.Property(e => e.TargetPerson)
                    .HasMaxLength(276)
                    .HasColumnName("Target_Person");

                entity.Property(e => e.TargetPersonId).HasColumnName("Target_Person_ID");

                entity.Property(e => e.TargetPersonOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Person_OID");

                entity.Property(e => e.TargetStockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Stock_Room");

                entity.Property(e => e.TargetStockRoomId).HasColumnName("Target_Stock_Room_ID");
            });

            modelBuilder.Entity<StockMovementReason>(entity =>
            {
                entity.ToTable("Stock_Movement_Reasons");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Direction)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<StockMovementReasonsActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Stock_Movement_Reasons_Active");

                entity.Property(e => e.Direction)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<StockRoom>(entity =>
            {
                entity.ToTable("Stock_Rooms");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.StockRooms)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Stock_Rooms_FK1");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.StockRooms)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("Persons_Stock_Rooms_FK1");
            });

            modelBuilder.Entity<StockRoomList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Stock_Room_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<StockRoomMovementList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Stock_Room_Movement_List");

                entity.Property(e => e.Class)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Direction)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PoId).HasColumnName("PO_ID");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.PurchaseOrder)
                    .HasMaxLength(200)
                    .HasColumnName("Purchase_Order");

                entity.Property(e => e.PurchaseOrderOid)
                    .HasMaxLength(25)
                    .HasColumnName("Purchase_Order_OID");

                entity.Property(e => e.Reason).HasMaxLength(100);

                entity.Property(e => e.SourceAsset)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Asset");

                entity.Property(e => e.SourceAssetId).HasColumnName("Source_Asset_ID");

                entity.Property(e => e.SourceAssetOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Asset_OID");

                entity.Property(e => e.SourceBalance).HasColumnName("Source_Balance");

                entity.Property(e => e.SourceConsumable)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Consumable");

                entity.Property(e => e.SourceConsumableId).HasColumnName("Source_Consumable_ID");

                entity.Property(e => e.SourceConsumableOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Consumable_OID");

                entity.Property(e => e.SourcePerson)
                    .HasMaxLength(276)
                    .HasColumnName("Source_Person");

                entity.Property(e => e.SourcePersonId).HasColumnName("Source_Person_ID");

                entity.Property(e => e.SourcePersonOid)
                    .HasMaxLength(25)
                    .HasColumnName("Source_Person_OID");

                entity.Property(e => e.SourceStockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Source_Stock_Room");

                entity.Property(e => e.SourceStockRoomId).HasColumnName("Source_Stock_Room_ID");

                entity.Property(e => e.StockItem)
                    .HasMaxLength(127)
                    .HasColumnName("Stock_Item");

                entity.Property(e => e.StockItemId).HasColumnName("Stock_Item_ID");

                entity.Property(e => e.StockManager)
                    .HasMaxLength(276)
                    .HasColumnName("Stock_Manager");

                entity.Property(e => e.StockManagerId).HasColumnName("Stock_Manager_ID");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.TargetAsset)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Asset");

                entity.Property(e => e.TargetAssetId).HasColumnName("Target_Asset_ID");

                entity.Property(e => e.TargetAssetOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Asset_OID");

                entity.Property(e => e.TargetBalance).HasColumnName("Target_Balance");

                entity.Property(e => e.TargetConsumable)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Consumable");

                entity.Property(e => e.TargetConsumableId).HasColumnName("Target_Consumable_ID");

                entity.Property(e => e.TargetConsumableOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Consumable_OID");

                entity.Property(e => e.TargetPerson)
                    .HasMaxLength(276)
                    .HasColumnName("Target_Person");

                entity.Property(e => e.TargetPersonId).HasColumnName("Target_Person_ID");

                entity.Property(e => e.TargetPersonOid)
                    .HasMaxLength(25)
                    .HasColumnName("Target_Person_OID");

                entity.Property(e => e.TargetStockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Target_Stock_Room");

                entity.Property(e => e.TargetStockRoomId).HasColumnName("Target_Stock_Room_ID");
            });

            modelBuilder.Entity<StockRule>(entity =>
            {
                entity.ToTable("Stock_Rules");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.ReorderQuantity1).HasColumnName("Reorder_Quantity_1");

                entity.Property(e => e.ReorderQuantity2).HasColumnName("Reorder_Quantity_2");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.Threshold1).HasColumnName("Threshold_1");

                entity.Property(e => e.Threshold2).HasColumnName("Threshold_2");

                entity.Property(e => e.ThresholdAction1Id).HasColumnName("Threshold_Action_1_ID");

                entity.Property(e => e.ThresholdAction2Id).HasColumnName("Threshold_Action_2_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.StockRules)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Stock_Rules_FK1");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.StockRules)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("Products_Stock_Rules_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.StockRules)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Stock_Rules_FK1");

                entity.HasOne(d => d.StockRoom)
                    .WithMany(p => p.StockRules)
                    .HasForeignKey(d => d.StockRoomId)
                    .HasConstraintName("Stock_Rooms_Stock_Rules_FK1");

                entity.HasOne(d => d.ThresholdAction1)
                    .WithMany(p => p.StockRuleThresholdAction1s)
                    .HasForeignKey(d => d.ThresholdAction1Id)
                    .HasConstraintName("Threshold_Actions_Stock_Rules_FK1");

                entity.HasOne(d => d.ThresholdAction2)
                    .WithMany(p => p.StockRuleThresholdAction2s)
                    .HasForeignKey(d => d.ThresholdAction2Id)
                    .HasConstraintName("Threshold_Actions_Stock_Rules_FK2");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.StockRules)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Stock_Rules_FK1");
            });

            modelBuilder.Entity<StockRuleList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Stock_Rule_List");

                entity.Property(e => e.ActualQuantity).HasColumnName("Actual_Quantity");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.ReorderQuantity1).HasColumnName("Reorder_Quantity_1");

                entity.Property(e => e.ReorderQuantity2).HasColumnName("Reorder_Quantity_2");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.Threshold1).HasColumnName("Threshold_1");

                entity.Property(e => e.Threshold2).HasColumnName("Threshold_2");

                entity.Property(e => e.ThresholdAction1)
                    .HasMaxLength(100)
                    .HasColumnName("Threshold_Action_1");

                entity.Property(e => e.ThresholdAction1Id).HasColumnName("Threshold_Action_1_ID");

                entity.Property(e => e.ThresholdAction2)
                    .HasMaxLength(100)
                    .HasColumnName("Threshold_Action_2");

                entity.Property(e => e.ThresholdAction2Id).HasColumnName("Threshold_Action_2_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<StockRuleListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Stock_Rule_List_Active");

                entity.Property(e => e.ActualQuantity).HasColumnName("Actual_Quantity");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.ReorderQuantity1).HasColumnName("Reorder_Quantity_1");

                entity.Property(e => e.ReorderQuantity2).HasColumnName("Reorder_Quantity_2");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StockRoom)
                    .HasMaxLength(100)
                    .HasColumnName("Stock_Room");

                entity.Property(e => e.StockRoomId).HasColumnName("Stock_Room_ID");

                entity.Property(e => e.Threshold1).HasColumnName("Threshold_1");

                entity.Property(e => e.Threshold2).HasColumnName("Threshold_2");

                entity.Property(e => e.ThresholdAction1)
                    .HasMaxLength(100)
                    .HasColumnName("Threshold_Action_1");

                entity.Property(e => e.ThresholdAction1Id).HasColumnName("Threshold_Action_1_ID");

                entity.Property(e => e.ThresholdAction2)
                    .HasMaxLength(100)
                    .HasColumnName("Threshold_Action_2");

                entity.Property(e => e.ThresholdAction2Id).HasColumnName("Threshold_Action_2_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<SubWorkOrderSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sub_Work_Order_Summary");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            });

            modelBuilder.Entity<SystemImage>(entity =>
            {
                entity.ToTable("System_Images");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TechnicianList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Technician_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Address3).HasColumnName("Address_3");

                entity.Property(e => e.AdimportId).HasColumnName("ADImport_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.AvailableNow)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Available_Now");

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.BusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Business_Phone");

                entity.Property(e => e.Calendar).HasMaxLength(100);

                entity.Property(e => e.CalendarId).HasColumnName("Calendar_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.GenderId).HasColumnName("Gender_ID");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Home_Phone");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("money")
                    .HasColumnName("Hourly_Rate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImAddress)
                    .HasMaxLength(50)
                    .HasColumnName("IM_Address");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(64)
                    .HasColumnName("Job_Title");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(64)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Mobile_Phone");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Pager).HasMaxLength(50);

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("Primary_Email");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("Primary_Login");

                entity.Property(e => e.SkillLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Skill_Level");

                entity.Property(e => e.SmsEmail)
                    .HasMaxLength(100)
                    .HasColumnName("SMS_Email");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Title).HasMaxLength(64);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0003)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0003");

                entity.Property(e => e.Udf0005).HasColumnName("UDF0005");

                entity.Property(e => e.Udf0006)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF0006");

                entity.Property(e => e.UdfBadgeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Badge_Number");

                entity.Property(e => e.UdfDistinguishedName)
                    .HasMaxLength(500)
                    .HasColumnName("UDF_Distinguished_Name");

                entity.Property(e => e.UdfEmployeeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Employee_Number");

                entity.Property(e => e.UdfLunchPeriod)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Lunch_Period");

                entity.Property(e => e.UdfPrimaryGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Primary_Group");

                entity.Property(e => e.UdfVehicleColor)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Color");

                entity.Property(e => e.UdfVehicleMake)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Make");

                entity.Property(e => e.UdfVehicleModel)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Model");

                entity.Property(e => e.UdfVehicleYear)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Vehicle_Year");
            });

            modelBuilder.Entity<ThresholdAction>(entity =>
            {
                entity.ToTable("Threshold_Actions");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<TicketClosureCode>(entity =>
            {
                entity.ToTable("Ticket_Closure_Code");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClosureCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.Tags).IsRequired();

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.TicketClosureCodes)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Class_Ticket_Closure_Code_FK1");
            });

            modelBuilder.Entity<TicketClosureCodeActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ticket_Closure_Code_Active");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClosureCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<TicketClosureCodeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ticket_Closure_Code_View");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClosureCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeFullName)
                    .IsRequired()
                    .HasMaxLength(103)
                    .HasColumnName("Closure_Code_Full_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<TicketImpact>(entity =>
            {
                entity.ToTable("Ticket_Impact");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Impact)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tags).IsRequired();

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.TicketImpacts)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("Object_Class_Ticket_Impact_FK1");
            });

            modelBuilder.Entity<TicketImpactActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ticket_Impact_Active");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<TicketList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ticket_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<TicketListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ticket_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<TicketMedium>(entity =>
            {
                entity.ToTable("Ticket_Medium");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Medium)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<TicketMediumActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ticket_Medium_Active");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Medium)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<TicketOverdueList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ticket_Overdue_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<TicketPriority>(entity =>
            {
                entity.ToTable("Ticket_Priority");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tags).IsRequired();

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.TicketPriorities)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("Object_Class_Ticket_Priority_FK1");

                entity.HasOne(d => d.Image)
                    .WithMany(p => p.TicketPriorities)
                    .HasForeignKey(d => d.ImageId)
                    .HasConstraintName("cfgLCImages_Ticket_Priority_FK1");
            });

            modelBuilder.Entity<TicketPriorityActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ticket_Priority_Active");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tags).IsRequired();
            });

            modelBuilder.Entity<TicketUrgency>(entity =>
            {
                entity.ToTable("Ticket_Urgency");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Urgency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.TicketUrgencies)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("Object_Class_Ticket_Urgency_FK1");
            });

            modelBuilder.Entity<TicketUrgencyActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ticket_Urgency_Active");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Urgency)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TicketsAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Tickets_All");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<TicketsByRelatedCiSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Tickets_By_Related_CI_Summary");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");
            });

            modelBuilder.Entity<TicketsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Tickets_View");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<TicketsViewActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Tickets_View_Active");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<Title>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Title1)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("Title");
            });

            modelBuilder.Entity<TrackedSoftware>(entity =>
            {
                entity.ToTable("Tracked_Software");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.TrackedSoftwares)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Tracked_Software_FK1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.TrackedSoftwares)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Locations_Tracked_Software_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.TrackedSoftwares)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Tracked_Software_FK1");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.TrackedSoftwares)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("Persons_Tracked_Software_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.TrackedSoftwares)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Tracked_Software_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.TrackedSoftwares)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Tracked_Software_FK1");
            });

            modelBuilder.Entity<TrackedSoftwareList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Tracked_Software_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Conformance)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LicensesCount).HasColumnName("Licenses_Count");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NonAllocated).HasColumnName("Non_Allocated");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.TotalLicenseQty).HasColumnName("Total_License_Qty");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnreconciledInstallations).HasColumnName("Unreconciled_Installations");
            });

            modelBuilder.Entity<TrackedSoftwareListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Tracked_Software_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Conformance)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LicensesCount).HasColumnName("Licenses_Count");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NonAllocated).HasColumnName("Non_Allocated");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Owner).HasMaxLength(276);

                entity.Property(e => e.OwnerId).HasColumnName("Owner_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketCount).HasColumnName("Ticket_Count");

                entity.Property(e => e.TotalLicenseQty).HasColumnName("Total_License_Qty");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnreconciledInstallations).HasColumnName("Unreconciled_Installations");
            });

            modelBuilder.Entity<TriggerOnConditionLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Trigger_OnCondition_Log");

                entity.Property(e => e.Comments).HasMaxLength(1024);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Run_Date");

                entity.Property(e => e.TriggerName)
                    .HasMaxLength(310)
                    .HasColumnName("Trigger_Name");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Upload_Date");
            });

            modelBuilder.Entity<UnitOfMeasureListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Unit_of_Measure_List_Active");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<UnitsOfMeasure>(entity =>
            {
                entity.ToTable("Units_of_Measure");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<UnitsOfMeasureActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Units_of_Measure_Active");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<UnitsOfMeasureList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Units_of_Measure_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Tags).IsRequired();

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<UserAccount>(entity =>
            {
                entity.ToTable("User_Accounts");

                entity.HasIndex(e => e.Login, "IX_User_Accounts_Login")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AccessLevel).HasColumnName("Access_Level");

                entity.Property(e => e.AccountPolicy)
                    .HasMaxLength(1)
                    .HasColumnName("Account_Policy")
                    .IsFixedLength(true);

                entity.Property(e => e.AccountType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("Account_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.LastActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Activity");

                entity.Property(e => e.LastIp)
                    .HasMaxLength(40)
                    .HasColumnName("Last_IP");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Password).HasMaxLength(255);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.PlainPassword)
                    .HasMaxLength(255)
                    .HasColumnName("Plain_Password");

                entity.Property(e => e.PswdLastChange)
                    .HasColumnType("datetime")
                    .HasColumnName("Pswd_LastChange");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.UserAccounts)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Persons_User_Accounts_FK1");
            });

            modelBuilder.Entity<UserAccountList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_List");

                entity.Property(e => e.AccessLevel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Access_Level");

                entity.Property(e => e.AccountPolicy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Account_Policy");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type");

                entity.Property(e => e.AuthenticationType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Authentication_Type");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Person)
                    .IsRequired()
                    .HasMaxLength(276);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.ToTable("User_Groups");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TechniciansOnly).HasColumnName("Technicians_Only");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.UserGroups)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("Persons_User_Groups_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.UserGroups)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_User_Groups_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.UserGroups)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_User_Groups_FK1");
            });

            modelBuilder.Entity<UserGroupList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("User_Group_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MembersCount).HasColumnName("Members_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TechniciansOnly).HasColumnName("Technicians_Only");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<UserGroupListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("User_Group_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MembersCount).HasColumnName("Members_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TechniciansOnly).HasColumnName("Technicians_Only");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<UserGroupListTechnician>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("User_Group_List_Technician");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MembersCount).HasColumnName("Members_Count");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TechniciansOnly).HasColumnName("Technicians_Only");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");
            });

            modelBuilder.Entity<UserGroupMemberList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("User_Group_Member_List");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.GroupMemberId).HasColumnName("Group_Member_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");
            });

            modelBuilder.Entity<UserSession>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("User_Sessions_PK")
                    .IsClustered(false);

                entity.ToTable("User_Sessions");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AccountId).HasColumnName("Account_ID");

                entity.Property(e => e.AccountPolicy)
                    .HasMaxLength(1)
                    .HasColumnName("Account_Policy")
                    .IsFixedLength(true);

                entity.Property(e => e.LastActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Activity");

                entity.Property(e => e.LastResponse)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Response");

                entity.Property(e => e.LogonTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Logon_Time");

                entity.Property(e => e.LogoutTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Logout_Time");

                entity.Property(e => e.ModuleType).HasColumnName("Module_Type");

                entity.Property(e => e.SessionKey)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Session_Key");

                entity.Property(e => e.TerminatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("Terminated_by");

                entity.Property(e => e.UserIp)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("User_IP");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.UserSessions)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("User_Accounts_User_Sessions_FK1");
            });

            modelBuilder.Entity<UserSessionLog>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("User_Session_Log_PK")
                    .IsClustered(false);

                entity.ToTable("User_Session_Log");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AccountPolicy)
                    .HasMaxLength(1)
                    .HasColumnName("Account_Policy")
                    .IsFixedLength(true);

                entity.Property(e => e.ConcurrentSessionCount).HasColumnName("Concurrent_Session_Count");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.LogonTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Logon_Time");

                entity.Property(e => e.LogoutTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Logout_Time");

                entity.Property(e => e.ModuleType).HasColumnName("Module_Type");

                entity.Property(e => e.NamedSessionCount).HasColumnName("Named_Session_Count");

                entity.Property(e => e.TerminationReason)
                    .HasMaxLength(1)
                    .HasColumnName("Termination_Reason")
                    .IsFixedLength(true);

                entity.Property(e => e.UserFullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("User_Full_Name");

                entity.Property(e => e.UserIp)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("User_IP");
            });

            modelBuilder.Entity<UserSessionLogView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserSessionLogView");

                entity.Property(e => e.ConcurrentSessionCount).HasColumnName("Concurrent_Session_Count");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LastActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Activity");

                entity.Property(e => e.LastResponse)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Response");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.LogonTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Logon_Time");

                entity.Property(e => e.LogoutTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Logout_Time");

                entity.Property(e => e.ModuleName)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Module_Name");

                entity.Property(e => e.NamedSessionCount).HasColumnName("Named_Session_Count");

                entity.Property(e => e.SessionCount).HasColumnName("Session_Count");

                entity.Property(e => e.SessionType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Session_Type");

                entity.Property(e => e.TerminationReason)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Termination_Reason");

                entity.Property(e => e.UserFullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("User_Full_Name");

                entity.Property(e => e.UserIp)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("User_IP");
            });

            modelBuilder.Entity<UserSessionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserSessionsView");

                entity.Property(e => e.AccountId).HasColumnName("Account_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LastActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Activity");

                entity.Property(e => e.LastResponse)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Response");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.LogonTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Logon_Time");

                entity.Property(e => e.ModuleName)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Module_Name");

                entity.Property(e => e.ModuleType).HasColumnName("Module_Type");

                entity.Property(e => e.SessionKey)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Session_Key");

                entity.Property(e => e.SessionType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Session_Type");

                entity.Property(e => e.UserFullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("User_Full_Name");

                entity.Property(e => e.UserIp)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("User_IP");
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Contact).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Fein)
                    .HasMaxLength(50)
                    .HasColumnName("FEIN");

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Vendors)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Vendors_FK1");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.Vendors)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("Persons_Vendors_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Vendors)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Vendors_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Vendors)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Vendors_FK1");
            });

            modelBuilder.Entity<VendorList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vendor_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Contact).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Fein)
                    .HasMaxLength(50)
                    .HasColumnName("FEIN");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<VendorListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vendor_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Contact).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Fein)
                    .HasMaxLength(50)
                    .HasColumnName("FEIN");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0001)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0001");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<VendorProduct>(entity =>
            {
                entity.ToTable("Vendor_Products");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.ReturnPeriod).HasColumnName("Return_Period");

                entity.Property(e => e.ReturnPolicy).HasColumnName("Return_Policy");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.VendorProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Products_Vendor_Products_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.VendorProducts)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Vendor_Products_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.VendorProducts)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Vendor_Products_FK1");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.VendorProducts)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Vendors_Vendor_Products_FK1");
            });

            modelBuilder.Entity<VendorProductList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vendor_Product_List");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Msrp)
                    .HasColumnType("money")
                    .HasColumnName("MSRP");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductAndPrice)
                    .HasMaxLength(123)
                    .HasColumnName("Product_and_Price");

                entity.Property(e => e.ProductCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Product_Category");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.ProductOid)
                    .HasMaxLength(25)
                    .HasColumnName("Product_OID");

                entity.Property(e => e.ProductStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Status");

                entity.Property(e => e.ProductStatusId).HasColumnName("Product_Status_ID");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Type");

                entity.Property(e => e.ReturnPeriod).HasColumnName("Return_Period");

                entity.Property(e => e.ReturnPolicy).HasColumnName("Return_Policy");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorAndPrice)
                    .HasMaxLength(124)
                    .HasColumnName("Vendor_and_Price");

                entity.Property(e => e.VendorCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Vendor_Category");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.VendorOid)
                    .HasMaxLength(25)
                    .HasColumnName("Vendor_OID");

                entity.Property(e => e.VendorStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Status");

                entity.Property(e => e.VendorStatusId).HasColumnName("Vendor_Status_ID");

                entity.Property(e => e.VendorType)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Type");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");

                entity.Property(e => e.WarrantyPeriod).HasColumnName("Warranty_Period");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<VendorProductListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vendor_Product_List_Active");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Msrp)
                    .HasColumnType("money")
                    .HasColumnName("MSRP");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Product).HasMaxLength(100);

                entity.Property(e => e.ProductAndPrice)
                    .HasMaxLength(123)
                    .HasColumnName("Product_and_Price");

                entity.Property(e => e.ProductCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Product_Category");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.ProductOid)
                    .HasMaxLength(25)
                    .HasColumnName("Product_OID");

                entity.Property(e => e.ProductStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Status");

                entity.Property(e => e.ProductStatusId).HasColumnName("Product_Status_ID");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Type");

                entity.Property(e => e.ReturnPeriod).HasColumnName("Return_Period");

                entity.Property(e => e.ReturnPolicy).HasColumnName("Return_Policy");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorAndPrice)
                    .HasMaxLength(124)
                    .HasColumnName("Vendor_and_Price");

                entity.Property(e => e.VendorCategory)
                    .HasMaxLength(100)
                    .HasColumnName("Vendor_Category");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_ID");

                entity.Property(e => e.VendorOid)
                    .HasMaxLength(25)
                    .HasColumnName("Vendor_OID");

                entity.Property(e => e.VendorStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Status");

                entity.Property(e => e.VendorStatusId).HasColumnName("Vendor_Status_ID");

                entity.Property(e => e.VendorType)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Type");

                entity.Property(e => e.WarrantyDetails)
                    .HasMaxLength(255)
                    .HasColumnName("Warranty_Details");

                entity.Property(e => e.WarrantyPeriod).HasColumnName("Warranty_Period");

                entity.Property(e => e.WebPage)
                    .HasMaxLength(255)
                    .HasColumnName("Web_Page");
            });

            modelBuilder.Entity<VotingMethod>(entity =>
            {
                entity.ToTable("Voting_Method");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(255);
            });

            modelBuilder.Entity<WorkCalendar>(entity =>
            {
                entity.ToTable("Work_Calendars");

                entity.HasIndex(e => e.Default, "IDX_Work_Calendars_Default");

                entity.HasIndex(e => e.PersonId, "IDX_Work_Calendars_Person");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CalendarType).HasColumnName("Calendar_Type");

                entity.Property(e => e.DayFrequency).HasColumnName("Day_Frequency");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.WorkCalendars)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("Persons_Work_Calendars_FK1");
            });

            modelBuilder.Entity<WorkCalendarExcList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Work_Calendar_Exc_List");

                entity.Property(e => e.AllDay).HasColumnName("All_Day");

                entity.Property(e => e.DtFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_from");

                entity.Property(e => e.DtTo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_to");

                entity.Property(e => e.ExceptionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exception_Date");

                entity.Property(e => e.ExceptionType).HasColumnName("Exception_Type");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsWorkingTime).HasColumnName("Is_Working_Time");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.WorkCalendarId).HasColumnName("Work_Calendar_ID");
            });

            modelBuilder.Entity<WorkCalendarExcPersonal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Work_Calendar_Exc_Personal");

                entity.Property(e => e.AllDay).HasColumnName("All_Day");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.FromTime)
                    .HasColumnType("datetime")
                    .HasColumnName("From_Time");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsWorkTime).HasColumnName("Is_Work_Time");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.ToTime)
                    .HasColumnType("datetime")
                    .HasColumnName("To_Time");

                entity.Property(e => e.WorkCalendarId).HasColumnName("Work_Calendar_ID");
            });

            modelBuilder.Entity<WorkCalendarException>(entity =>
            {
                entity.ToTable("Work_Calendar_Exceptions");

                entity.HasIndex(e => e.WorkCalendarId, "IDX_Work_Calendar_Exceptions_Calendar");

                entity.HasIndex(e => new { e.WorkCalendarId, e.ExceptionType }, "IDX_Work_Calendar_Exceptions_Type");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AllDay).HasColumnName("All_Day");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.DateType).HasColumnName("Date_Type");

                entity.Property(e => e.DayNumber).HasColumnName("Day_Number");

                entity.Property(e => e.ExceptionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Exception_Date");

                entity.Property(e => e.ExceptionType).HasColumnName("Exception_Type");

                entity.Property(e => e.MonthNumber).HasColumnName("Month_Number");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Time");

                entity.Property(e => e.StopTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Stop_Time");

                entity.Property(e => e.WeekNumber).HasColumnName("Week_Number");

                entity.Property(e => e.WorkCalendarId).HasColumnName("Work_Calendar_ID");

                entity.Property(e => e.WorkingHoursId).HasColumnName("Working_Hours_ID");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.WorkCalendarExceptions)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Work_Calendar_Exception_Categories_Work_Calendar_Exceptions_FK1");

                entity.HasOne(d => d.WorkCalendar)
                    .WithMany(p => p.WorkCalendarExceptions)
                    .HasForeignKey(d => d.WorkCalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Work_Calendars_Work_Calendar_Exceptions_FK1");

                entity.HasOne(d => d.WorkingHours)
                    .WithMany(p => p.WorkCalendarExceptions)
                    .HasForeignKey(d => d.WorkingHoursId)
                    .HasConstraintName("Work_Calendar_Hours_Work_Calendar_Exceptions_FK1");
            });

            modelBuilder.Entity<WorkCalendarExceptionCategory>(entity =>
            {
                entity.ToTable("Work_Calendar_Exception_Categories");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AllDay).HasColumnName("All_Day");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IsWorkingTime).HasColumnName("Is_Working_Time");
            });

            modelBuilder.Entity<WorkCalendarHour>(entity =>
            {
                entity.ToTable("Work_Calendar_Hours");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TimeFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("Time_from");

                entity.Property(e => e.TimeTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Time_to");
            });

            modelBuilder.Entity<WorkCalendarItem>(entity =>
            {
                entity.ToTable("Work_Calendar_Items");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DayNumber).HasColumnName("Day_Number");

                entity.Property(e => e.WorkCalendarId).HasColumnName("Work_Calendar_ID");

                entity.Property(e => e.WorkingHoursId).HasColumnName("Working_Hours_ID");

                entity.HasOne(d => d.WorkCalendar)
                    .WithMany(p => p.WorkCalendarItems)
                    .HasForeignKey(d => d.WorkCalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Work_Calendars_Work_Calendar_Items_FK1");

                entity.HasOne(d => d.WorkingHours)
                    .WithMany(p => p.WorkCalendarItems)
                    .HasForeignKey(d => d.WorkingHoursId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Work_Calendar_Hours_Work_Calendar_Items_FK1");
            });

            modelBuilder.Entity<WorkCalendarItemList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Work_Calendar_Item_List");

                entity.Property(e => e.DayNumber).HasColumnName("Day_Number");

                entity.Property(e => e.DtFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_from");

                entity.Property(e => e.DtTo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_to");

                entity.Property(e => e.IsWorkingTime).HasColumnName("Is_Working_Time");

                entity.Property(e => e.WorkCalendarId).HasColumnName("Work_Calendar_ID");

                entity.Property(e => e.WorkingHoursId).HasColumnName("Working_Hours_ID");
            });

            modelBuilder.Entity<WorkCalendarParent>(entity =>
            {
                entity.ToTable("Work_Calendar_Parents");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.WorkCalendarId).HasColumnName("Work_Calendar_ID");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.WorkCalendarParentParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Work_Calendars_Work_Calendar_Parents_FK2");

                entity.HasOne(d => d.WorkCalendar)
                    .WithMany(p => p.WorkCalendarParentWorkCalendars)
                    .HasForeignKey(d => d.WorkCalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Work_Calendars_Work_Calendar_Parents_FK1");
            });

            modelBuilder.Entity<WorkOrder>(entity =>
            {
                entity.ToTable("Work_Orders");

                entity.HasIndex(e => e.ParentId, "IDX_Work_Orders_Parent");

                entity.HasIndex(e => e.RelatedCiId, "IX_Work_Orders_Related_CI");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002).HasColumnName("UDF0002");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.HasOne(d => d.AssigneeGroup)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.AssigneeGroupId)
                    .HasConstraintName("User_Groups_Work_Orders_FK1");

                entity.HasOne(d => d.Assignee)
                    .WithMany(p => p.WorkOrderAssignees)
                    .HasForeignKey(d => d.AssigneeId)
                    .HasConstraintName("Persons_Work_Orders_FK1");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Object_Category_Work_Orders_FK1");

                entity.HasOne(d => d.ClosureCode)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.ClosureCodeId)
                    .HasConstraintName("Ticket_Closure_Code_Work_Orders_FK1");

                entity.HasOne(d => d.Impact)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.ImpactId)
                    .HasConstraintName("Ticket_Impact_Work_Orders_FK1");

                entity.HasOne(d => d.Medium)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.MediumId)
                    .HasConstraintName("Ticket_Medium_Work_Orders_FK1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Organizational_Units_Work_Orders_FK1");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.WorkOrderParents)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("Object_Index_Work_Orders_FK1");

                entity.HasOne(d => d.Priority)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.PriorityId)
                    .HasConstraintName("Ticket_Priority_Work_Orders_FK1");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("Projects_Work_Orders_FK1");

                entity.HasOne(d => d.RelatedCi)
                    .WithMany(p => p.WorkOrderRelatedCis)
                    .HasForeignKey(d => d.RelatedCiId)
                    .HasConstraintName("Object_Index_Work_Orders_FK2");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.WorkOrderRequesters)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("Persons_Work_Orders_FK2");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("Services_Work_Orders_FK1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("Status_Work_Orders_FK1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("Object_Type_Work_Orders_FK1");

                entity.HasOne(d => d.Urgency)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.UrgencyId)
                    .HasConstraintName("Ticket_Urgency_Work_Orders_FK1");
            });

            modelBuilder.Entity<WorkOrderChildList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Work_Order_Child_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.ParentTicket)
                    .HasMaxLength(276)
                    .HasColumnName("Parent_Ticket");

                entity.Property(e => e.ParentTicketStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Parent_Ticket_Status");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.RootId).HasColumnName("Root_ID");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002).HasColumnName("UDF0002");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<WorkOrderList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Work_Order_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.ParentTicket)
                    .HasMaxLength(276)
                    .HasColumnName("Parent_Ticket");

                entity.Property(e => e.ParentTicketStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Parent_Ticket_Status");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002).HasColumnName("UDF0002");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<WorkOrderListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Work_Order_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.ParentTicket)
                    .HasMaxLength(276)
                    .HasColumnName("Parent_Ticket");

                entity.Property(e => e.ParentTicketStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Parent_Ticket_Status");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RatingEnabled).HasColumnName("Rating_Enabled");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.RelatedObjectsCount).HasColumnName("Related_Objects_Count");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002).HasColumnName("UDF0002");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<XxActivityCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_ActivityCount");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");
            });

            modelBuilder.Entity<XxAlloyTimeCheckReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Alloy_TimeCheck_Report");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Organization)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.Requester)
                    .IsRequired()
                    .HasMaxLength(276);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(9)
                    .HasColumnName("ticket");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxIncidentWorkorderActivityList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incident_Workorder_Activity_List");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.Category).HasMaxLength(80);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details).HasMaxLength(250);

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");
            });

            modelBuilder.Entity<XxIncidentWorkorderActivityListDetails250>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incident_Workorder_Activity_List_Details250");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Details).HasMaxLength(250);

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");
            });

            modelBuilder.Entity<XxIncidentWorkorderActivityListV6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incident_Workorder_Activity_List_V6");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details).HasMaxLength(90);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxIncidentWorkorderActivityListV61>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incident_Workorder_Activity_List_V6_1");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details).HasMaxLength(90);

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxIncidentWorkorderActivityListV62>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incident_Workorder_Activity_List_V6_2");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details).HasMaxLength(90);

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(9)
                    .HasColumnName("ticket");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxIncidentWorkorderActivityListV63>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incident_Workorder_Activity_List_V6_3");

                entity.Property(e => e.Category).HasMaxLength(80);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Organization)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.Requester)
                    .IsRequired()
                    .HasMaxLength(276);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(9);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxIncidentWorkorderActivityListV6320170510>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incident_Workorder_Activity_List_V6_3_20170510");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Organization)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.Requester)
                    .IsRequired()
                    .HasMaxLength(276);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(9);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxIncidentWorkorderActivityListWithNotesV1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incident_Workorder_Activity_ListWithNotes_V1");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Details).HasMaxLength(90);

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.SubmitTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Time");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxIncidentsWorkOrdersAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incidents_WorkOrders_All");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Organization).HasMaxLength(4000);

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.Udf0002)
                    .HasColumnType("ntext")
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");

                entity.Property(e => e.UdfTimeEstimate).HasColumnName("UDF_Time_Estimate");
            });

            modelBuilder.Entity<XxIncidentsWorkOrdersAllV1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Incidents_WorkOrders_All_V1");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Organization).HasMaxLength(4000);

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.Udf0002)
                    .HasColumnType("ntext")
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");
            });

            modelBuilder.Entity<XxItDepartmentReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_IT_Department_Report");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details).HasMaxLength(90);

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(9)
                    .HasColumnName("ticket");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxItPersonListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_IT_Person_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("activity_count");

                entity.Property(e => e.Address).HasColumnName("address");

                entity.Property(e => e.Address2).HasColumnName("address_2");

                entity.Property(e => e.Address3).HasColumnName("address_3");

                entity.Property(e => e.AdimportId).HasColumnName("adimport_id");

                entity.Property(e => e.Attachments).HasColumnName("attachments");

                entity.Property(e => e.AttachmentsCount).HasColumnName("attachments_count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("attachments_total_size");

                entity.Property(e => e.AvailableNow)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("available_now");

                entity.Property(e => e.Birthday)
                    .HasColumnType("datetime")
                    .HasColumnName("birthday");

                entity.Property(e => e.BusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("business_phone");

                entity.Property(e => e.Calendar)
                    .HasMaxLength(100)
                    .HasColumnName("calendar");

                entity.Property(e => e.CalendarId).HasColumnName("calendar_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date");

                entity.Property(e => e.Fax)
                    .HasMaxLength(64)
                    .HasColumnName("fax");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("first_name");

                entity.Property(e => e.FlagStatus).HasColumnName("flag_status");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("full_name");

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .HasColumnName("gender");

                entity.Property(e => e.GenderId).HasColumnName("gender_id");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(64)
                    .HasColumnName("home_phone");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("money")
                    .HasColumnName("hourly_rate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImAddress)
                    .HasMaxLength(50)
                    .HasColumnName("im_address");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(64)
                    .HasColumnName("job_title");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("last_name");

                entity.Property(e => e.LinksCount).HasColumnName("links_count");

                entity.Property(e => e.Location)
                    .HasMaxLength(2048)
                    .HasColumnName("location");

                entity.Property(e => e.LocationId).HasColumnName("location_id");

                entity.Property(e => e.Manager)
                    .HasMaxLength(276)
                    .HasColumnName("manager");

                entity.Property(e => e.ManagerId).HasColumnName("manager_id");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(64)
                    .HasColumnName("middle_name");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(64)
                    .HasColumnName("mobile_phone");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modified_date");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("oid");

                entity.Property(e => e.Organization)
                    .HasMaxLength(2048)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationId).HasColumnName("organization_id");

                entity.Property(e => e.Pager)
                    .HasMaxLength(50)
                    .HasColumnName("pager");

                entity.Property(e => e.Picture).HasColumnName("picture");

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("primary_email");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("primary_login");

                entity.Property(e => e.Service).HasColumnName("service");

                entity.Property(e => e.SkillLevel)
                    .HasMaxLength(50)
                    .HasColumnName("skill_level");

                entity.Property(e => e.SmsEmail)
                    .HasMaxLength(100)
                    .HasColumnName("sms_email");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasColumnName("status");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.Technician).HasColumnName("technician");

                entity.Property(e => e.TicketsCount).HasColumnName("tickets_count");

                entity.Property(e => e.Title)
                    .HasMaxLength(64)
                    .HasColumnName("title");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasColumnName("type");

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("udf0002");

                entity.Property(e => e.Udf0003)
                    .HasMaxLength(50)
                    .HasColumnName("udf0003");

                entity.Property(e => e.Udf0005).HasColumnName("udf0005");

                entity.Property(e => e.Udf0006)
                    .HasColumnType("datetime")
                    .HasColumnName("udf0006");

                entity.Property(e => e.UdfDistinguishedName)
                    .HasMaxLength(500)
                    .HasColumnName("udf_distinguished_name");

                entity.Property(e => e.UdfPrimaryGroup)
                    .HasMaxLength(50)
                    .HasColumnName("udf_primary_group");

                entity.Property(e => e.UdfVehicleColor)
                    .HasMaxLength(50)
                    .HasColumnName("udf_vehicle_color");

                entity.Property(e => e.UdfVehicleMake)
                    .HasMaxLength(50)
                    .HasColumnName("udf_vehicle_make");

                entity.Property(e => e.UdfVehicleModel)
                    .HasMaxLength(50)
                    .HasColumnName("udf_vehicle_model");

                entity.Property(e => e.UdfVehicleYear)
                    .HasColumnType("datetime")
                    .HasColumnName("udf_vehicle_year");
            });

            modelBuilder.Entity<XxItSpPrReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_IT_SP_PR_REPORT");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Expr1).HasMaxLength(4000);

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(4000);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.Udf0002)
                    .HasColumnType("ntext")
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");
            });

            modelBuilder.Entity<XxItSpPrReportTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_IT_SP_PR_REPORT_Test");

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedHours).HasColumnName("Estimated_Hours");

                entity.Property(e => e.Manager)
                    .HasMaxLength(276)
                    .HasColumnName("manager");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.OrganizationName).HasMaxLength(4000);

                entity.Property(e => e.Project)
                    .HasMaxLength(128)
                    .HasColumnName("project");

                entity.Property(e => e.ReqPriority).HasMaxLength(50);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(4000)
                    .HasColumnName("status");

                entity.Property(e => e.StatusUpdate)
                    .HasColumnType("ntext")
                    .HasColumnName("Status_Update");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.TimeSpent).HasColumnName("time_spent");

                entity.Property(e => e.TimeSpentSt)
                    .HasMaxLength(97)
                    .IsUnicode(false)
                    .HasColumnName("time_spent_st");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<XxPeopleList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_People_List");

                entity.Property(e => e.Address2).HasColumnName("Address_2");

                entity.Property(e => e.Address3).HasColumnName("Address_3");

                entity.Property(e => e.AdimportId).HasColumnName("ADImport_ID");

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.BusinessPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Business_Phone");

                entity.Property(e => e.CalendarId).HasColumnName("Calendar_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Fax).HasMaxLength(64);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("First_Name");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.GenderId).HasColumnName("Gender_ID");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Home_Phone");

                entity.Property(e => e.HourlyRate)
                    .HasColumnType("money")
                    .HasColumnName("Hourly_Rate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImAddress)
                    .HasMaxLength(50)
                    .HasColumnName("IM_Address");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(64)
                    .HasColumnName("Job_Title");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.Location).HasMaxLength(2048);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(64)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(64)
                    .HasColumnName("Mobile_Phone");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Pager).HasMaxLength(50);

                entity.Property(e => e.PrimaryEmail)
                    .HasMaxLength(256)
                    .HasColumnName("Primary_Email");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("Primary_Login");

                entity.Property(e => e.SkillLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Skill_Level");

                entity.Property(e => e.SmsEmail)
                    .HasMaxLength(100)
                    .HasColumnName("SMS_Email");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Title).HasMaxLength(64);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0003)
                    .HasMaxLength(50)
                    .HasColumnName("UDF0003");

                entity.Property(e => e.Udf0005).HasColumnName("UDF0005");

                entity.Property(e => e.Udf0006)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF0006");

                entity.Property(e => e.UdfDistinguishedName)
                    .HasMaxLength(500)
                    .HasColumnName("UDF_Distinguished_Name");

                entity.Property(e => e.UdfPrimaryGroup)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Primary_Group");

                entity.Property(e => e.UdfVehicleColor)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Color");

                entity.Property(e => e.UdfVehicleMake)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Make");

                entity.Property(e => e.UdfVehicleModel)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Vehicle_Model");

                entity.Property(e => e.UdfVehicleYear)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Vehicle_Year");
            });

            modelBuilder.Entity<XxPoliceTicketLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_police_Ticket_lookup");

                entity.Property(e => e.Num).HasColumnName("num");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Resolution).HasColumnType("ntext");

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");
            });

            modelBuilder.Entity<XxPoliceTicketsLastActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Police_Tickets_Last_Activity");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Details).HasMaxLength(4000);

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Organization).HasMaxLength(4000);

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.Udf0002)
                    .HasColumnType("ntext")
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");
            });

            modelBuilder.Entity<XxPoliceTicketsLastActivityWithResolution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Police_Tickets_Last_Activity_with_Resolution");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Details).HasMaxLength(4000);

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Expr1).HasMaxLength(4000);

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.Resolution).HasMaxLength(4000);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.Udf0002)
                    .HasColumnType("ntext")
                    .HasColumnName("UDF0002");
            });

            modelBuilder.Entity<XxPoliceTicketsLastActivityWithResolutionV6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Police_Tickets_Last_Activity_with_Resolution_V6");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.CreatedDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details).HasMaxLength(4000);

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Expr1).HasMaxLength(4000);

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.Resolution).HasMaxLength(4000);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);
            });

            modelBuilder.Entity<XxPoliceTicketsOlderThan30day>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Police_tickets_older_than_30day");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Details).HasMaxLength(4000);

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Expr1).HasMaxLength(4000);

                entity.Property(e => e.Priority)
                    .HasMaxLength(50)
                    .HasColumnName("priority");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.SortDate)
                    .HasColumnType("datetime")
                    .HasColumnName("sort_date");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.Udf0002)
                    .HasMaxLength(4000)
                    .HasColumnName("UDF0002");

                entity.Property(e => e.Udf0004).HasColumnName("UDF0004");
            });

            modelBuilder.Entity<XxProjectList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Project_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.BusinessCase)
                    .HasColumnType("ntext")
                    .HasColumnName("Business_Case");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedHours).HasColumnName("Estimated_Hours");

                entity.Property(e => e.GroupMembership)
                    .HasMaxLength(50)
                    .HasColumnName("Group_Membership");

                entity.Property(e => e.ImpactedAreas)
                    .HasColumnType("ntext")
                    .HasColumnName("Impacted_Areas");

                entity.Property(e => e.ImpactedSystems)
                    .HasColumnType("ntext")
                    .HasColumnName("Impacted_Systems");

                entity.Property(e => e.IwEstimatedHours).HasColumnName("IW_EstimatedHours");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(25)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.RecType)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Requester).HasMaxLength(552);

                entity.Property(e => e.ResourceCost)
                    .HasColumnType("ntext")
                    .HasColumnName("Resource_Cost");

                entity.Property(e => e.SponsoringOrgs)
                    .IsUnicode(false)
                    .HasColumnName("Sponsoring_Orgs");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StatusUpdate)
                    .HasColumnType("ntext")
                    .HasColumnName("Status_Update");

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TimeSpentSt)
                    .HasMaxLength(97)
                    .IsUnicode(false)
                    .HasColumnName("Time_Spent_st");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<XxProjectListDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Project_List_Detail");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.BusinessCase)
                    .HasColumnType("ntext")
                    .HasColumnName("Business_Case");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedHours).HasColumnName("Estimated_Hours");

                entity.Property(e => e.GroupMembership)
                    .HasMaxLength(50)
                    .HasColumnName("Group_Membership");

                entity.Property(e => e.ImpactedAreas)
                    .HasColumnType("ntext")
                    .HasColumnName("Impacted_Areas");

                entity.Property(e => e.ImpactedSystems)
                    .HasColumnType("ntext")
                    .HasColumnName("Impacted_Systems");

                entity.Property(e => e.IwEstimatedHours).HasColumnName("IW_EstimatedHours");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(25)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.RecType)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Requester).HasMaxLength(552);

                entity.Property(e => e.ResourceCost)
                    .HasColumnType("ntext")
                    .HasColumnName("Resource_Cost");

                entity.Property(e => e.SponsoringOrgs)
                    .IsUnicode(false)
                    .HasColumnName("Sponsoring_Orgs");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StatusUpdate)
                    .HasColumnType("ntext")
                    .HasColumnName("Status_Update");

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TimeSpentSt)
                    .HasMaxLength(97)
                    .IsUnicode(false)
                    .HasColumnName("Time_Spent_st");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<XxProjectListOpen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Project_List_Open");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.BusinessCase)
                    .HasColumnType("ntext")
                    .HasColumnName("Business_Case");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedHours).HasColumnName("Estimated_Hours");

                entity.Property(e => e.GroupMembership)
                    .HasMaxLength(50)
                    .HasColumnName("Group_Membership");

                entity.Property(e => e.ImpactedAreas)
                    .HasColumnType("ntext")
                    .HasColumnName("Impacted_Areas");

                entity.Property(e => e.ImpactedSystems)
                    .HasColumnType("ntext")
                    .HasColumnName("Impacted_Systems");

                entity.Property(e => e.IwEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("IW_EndDate");

                entity.Property(e => e.IwEstimatedHours).HasColumnName("IW_EstimatedHours");

                entity.Property(e => e.IwStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("IW_Start_Date");

                entity.Property(e => e.IwTimeSpent).HasColumnName("IW_TimeSpent");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(25)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.RecType)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Requester).HasMaxLength(552);

                entity.Property(e => e.ResourceCost)
                    .HasColumnType("ntext")
                    .HasColumnName("Resource_Cost");

                entity.Property(e => e.SponsoringOrgs)
                    .IsUnicode(false)
                    .HasColumnName("Sponsoring_Orgs");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StatusUpdate)
                    .HasColumnType("ntext")
                    .HasColumnName("Status_Update");

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TimeSpentSt)
                    .HasMaxLength(97)
                    .IsUnicode(false)
                    .HasColumnName("Time_Spent_st");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<XxProjectListOpenDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Project_List_Open_Detail");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.BusinessCase)
                    .HasColumnType("ntext")
                    .HasColumnName("Business_Case");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedHours).HasColumnName("Estimated_Hours");

                entity.Property(e => e.GroupMembership)
                    .HasMaxLength(50)
                    .HasColumnName("Group_Membership");

                entity.Property(e => e.ImpactedAreas)
                    .HasColumnType("ntext")
                    .HasColumnName("Impacted_Areas");

                entity.Property(e => e.ImpactedSystems)
                    .HasColumnType("ntext")
                    .HasColumnName("Impacted_Systems");

                entity.Property(e => e.IwEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("IW_EndDate");

                entity.Property(e => e.IwEstimatedHours).HasColumnName("IW_EstimatedHours");

                entity.Property(e => e.IwStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("IW_Start_Date");

                entity.Property(e => e.IwTimeSpent).HasColumnName("IW_TimeSpent");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(25)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.RecType)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Requester).HasMaxLength(552);

                entity.Property(e => e.ResourceCost)
                    .HasColumnType("ntext")
                    .HasColumnName("Resource_Cost");

                entity.Property(e => e.SponsoringOrgs)
                    .IsUnicode(false)
                    .HasColumnName("Sponsoring_Orgs");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StatusUpdate)
                    .HasColumnType("ntext")
                    .HasColumnName("Status_Update");

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TimeSpentSt)
                    .HasMaxLength(97)
                    .IsUnicode(false)
                    .HasColumnName("Time_Spent_st");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<XxProjectListOpenNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Project_List_Open_New");

                entity.Property(e => e.BusinessCase).HasColumnName("Business_Case");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedHours).HasColumnName("Estimated_Hours");

                entity.Property(e => e.GroupMembership)
                    .HasMaxLength(50)
                    .HasColumnName("group_membership");

                entity.Property(e => e.ImpactedAreas).HasColumnName("Impacted_Areas");

                entity.Property(e => e.ImpactedSystems).HasColumnName("Impacted_Systems");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ParentMgrName).HasMaxLength(276);

                entity.Property(e => e.ParentProjectId)
                    .HasMaxLength(25)
                    .HasColumnName("ParentProject_ID");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(25)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.RecType)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Requester).HasMaxLength(552);

                entity.Property(e => e.ResourceCost).HasColumnName("Resource_Cost");

                entity.Property(e => e.SponsoringOrgs)
                    .IsUnicode(false)
                    .HasColumnName("Sponsoring_Orgs");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TimeSpentSt)
                    .HasMaxLength(97)
                    .IsUnicode(false)
                    .HasColumnName("Time_Spent_st");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<XxTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_test");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details).HasMaxLength(60);

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");
            });

            modelBuilder.Entity<XxTicketLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Ticket_lookup");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Details).HasColumnType("ntext");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");
            });

            modelBuilder.Entity<XxTicketSummaryNoActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Ticket_Summary_NoActivity");

                entity.Property(e => e.AMaxCreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("a_max_CreateDate");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationTitle).HasMaxLength(4000);

                entity.Property(e => e.PTimeSpentMins).HasColumnName("p_timeSpent_mins");

                entity.Property(e => e.PTimespent).HasColumnName("p_timespent");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectNumber).HasMaxLength(25);

                entity.Property(e => e.ProjectStatus).HasMaxLength(50);

                entity.Property(e => e.ProjectTitle).HasMaxLength(50);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.TStatus)
                    .HasMaxLength(50)
                    .HasColumnName("t_Status");

                entity.Property(e => e.TTimespent).HasColumnName("t_timespent");

                entity.Property(e => e.TTimespentMins).HasColumnName("t_timespent_mins");

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");

                entity.Property(e => e.Yyyymm).HasColumnName("yyyymm");
            });

            modelBuilder.Entity<XxTicketSummaryWithActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Ticket_Summary_WithActivity");

                entity.Property(e => e.ACreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("a_CreatedBy");

                entity.Property(e => e.ACreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("a_CreatedDate");

                entity.Property(e => e.ATimespentMins).HasColumnName("a_timespent_mins");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationTitle).HasMaxLength(4000);

                entity.Property(e => e.PTimeSpentMins).HasColumnName("p_timeSpent_mins");

                entity.Property(e => e.PTimespent).HasColumnName("p_timespent");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectNumber).HasMaxLength(25);

                entity.Property(e => e.ProjectStatus).HasMaxLength(50);

                entity.Property(e => e.ProjectTitle).HasMaxLength(50);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.TStatus)
                    .HasMaxLength(50)
                    .HasColumnName("t_Status");

                entity.Property(e => e.TTimespent).HasColumnName("t_timespent");

                entity.Property(e => e.TTimespentMins).HasColumnName("t_timespent_mins");

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");

                entity.Property(e => e.Yyyymm).HasColumnName("yyyymm");
            });

            modelBuilder.Entity<XxUltimateTicketLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Ultimate_Ticket_lookup");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Details).HasColumnType("ntext");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxUltimateTicketLookupV6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XX_Ultimate_Ticket_Lookup_V6");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Details).HasColumnType("ntext");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.SubmitTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Time");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<XxsaActivityList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Activity_List");

                entity.Property(e => e.ActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Activity_date");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedById).HasColumnName("Created_by_ID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.HoursClass)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Hours_Class");

                entity.Property(e => e.HoursType)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("Hours_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NewStatus)
                    .HasMaxLength(50)
                    .HasColumnName("New_Status");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.OldStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Old_Status");

                entity.Property(e => e.OtlProject)
                    .HasMaxLength(80)
                    .HasColumnName("OTL_Project");

                entity.Property(e => e.OtlProjectNumber)
                    .HasMaxLength(6)
                    .HasColumnName("OTL_Project_Number");

                entity.Property(e => e.OtlTask)
                    .HasMaxLength(60)
                    .HasColumnName("OTL_Task");

                entity.Property(e => e.OtlTaskNumber)
                    .HasMaxLength(6)
                    .HasColumnName("OTL_Task_Number");

                entity.Property(e => e.ReadOnly).HasColumnName("Read_Only");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.WfActionNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Action_Num");

                entity.Property(e => e.WfItemNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Item_Num");

                entity.Property(e => e.WorkInd).HasColumnName("Work_ind");
            });

            modelBuilder.Entity<XxsaAllTicketList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_All_Ticket_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<XxsaCfgSecurityAction>(entity =>
            {
                entity.ToTable("XXSA_cfgSecurityActions");

                entity.HasIndex(e => e.ActionId, "U_cfgSecurityAction_ID")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ActionId).HasColumnName("Action_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Module)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Object)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Priv)
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<XxsaCfgTicketsAllActiveNoSec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_cfgTickets_All_Active_noSec");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.ChangeRequestId).HasColumnName("Change_Request_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedProblemId).HasColumnName("Related_Problem_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.TicketKind).HasColumnName("Ticket_Kind");
            });

            modelBuilder.Entity<XxsaHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_History");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Attribute)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ChangedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Changed_by");

                entity.Property(e => e.ChangedById).HasColumnName("Changed_by_ID");

                entity.Property(e => e.EffectiveEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Effective_End_Date");

                entity.Property(e => e.EffectiveStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Effective_Start_Date");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.RefObjectId).HasColumnName("Ref_Object_ID");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.Property(e => e.WfItemNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Item_Num");
            });

            modelBuilder.Entity<XxsaHistory3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_History3");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Attribute)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ChangedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Changed_by");

                entity.Property(e => e.ChangedById).HasColumnName("Changed_by_ID");

                entity.Property(e => e.EffectiveEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Effective_End_Date");

                entity.Property(e => e.EffectiveStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Effective_Start_Date");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.RefObjectId).HasColumnName("Ref_Object_ID");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.Property(e => e.WfItemNum)
                    .HasMaxLength(30)
                    .HasColumnName("WF_Item_Num");
            });

            modelBuilder.Entity<XxsaObjectCategoryDescendent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Object_Category_Descendents");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.RootId).HasColumnName("Root_ID");
            });

            modelBuilder.Entity<XxsaObjectCategoryDescendentsActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Object_Category_Descendents_Active");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.RootId).HasColumnName("Root_ID");
            });

            modelBuilder.Entity<XxsaOrigRequester>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Orig_Requesters");

                entity.Property(e => e.OrigRequesterId).HasColumnName("Orig_Requester_ID");

                entity.Property(e => e.TicketId).HasColumnName("Ticket_ID");
            });

            modelBuilder.Entity<XxsaPersonHolidays3yrWindow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Person_Holidays_3yr_window");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.ExDtFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("EX_DT_From");

                entity.Property(e => e.ExDtTo)
                    .HasColumnType("datetime")
                    .HasColumnName("EX_DT_to");

                entity.Property(e => e.ExceptionDate)
                    .HasColumnType("date")
                    .HasColumnName("Exception_Date");

                entity.Property(e => e.ExceptionFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("Exception_from");

                entity.Property(e => e.ExceptionId).HasColumnName("Exception_ID");

                entity.Property(e => e.ExceptionTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Exception_to");

                entity.Property(e => e.FullName)
                    .HasMaxLength(276)
                    .HasColumnName("Full_Name");

                entity.Property(e => e.HoursClass)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Hours_Class");

                entity.Property(e => e.HoursType)
                    .HasMaxLength(4000)
                    .HasColumnName("Hours_Type");

                entity.Property(e => e.LunchFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("Lunch_From");

                entity.Property(e => e.LunchTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Lunch_To");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Person).HasMaxLength(25);

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.Property(e => e.PrimaryLogin)
                    .HasMaxLength(520)
                    .HasColumnName("Primary_Login");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.WorkCalendarId).HasColumnName("Work_Calendar_ID");
            });

            modelBuilder.Entity<XxsaPersonLeaveList3yrWindow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Person_Leave_List_3yr_window");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CityHoliday).HasColumnName("City_Holiday");

                entity.Property(e => e.ExceptionId).HasColumnName("Exception_ID");

                entity.Property(e => e.HoursClass)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Hours_Class");

                entity.Property(e => e.HoursType)
                    .HasMaxLength(4000)
                    .HasColumnName("Hours_Type");

                entity.Property(e => e.LeaveDate)
                    .HasColumnType("date")
                    .HasColumnName("Leave_Date");

                entity.Property(e => e.LeaveUsedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Leave_Used_By");

                entity.Property(e => e.LeaveUsedById).HasColumnName("Leave_Used_By_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.PersonalLeave).HasColumnName("Personal_Leave");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.WorkCalendarId).HasColumnName("Work_Calendar_ID");
            });

            modelBuilder.Entity<XxsaProjectListNoSec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Project_List_noSec");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinksCount).HasColumnName("Links_Count");

                entity.Property(e => e.Manager).HasMaxLength(276);

                entity.Property(e => e.ManagerId).HasColumnName("Manager_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Oid)
                    .HasMaxLength(25)
                    .HasColumnName("OID");

                entity.Property(e => e.ParentId).HasColumnName("Parent_ID");

                entity.Property(e => e.Placement)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TicketsCount).HasColumnName("Tickets_Count");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfBusinessCase).HasColumnName("UDF_Business_Case");

                entity.Property(e => e.UdfDescription).HasColumnName("UDF_Description");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfImpactedAreas).HasColumnName("UDF_Impacted_Areas");

                entity.Property(e => e.UdfImpactedSystems).HasColumnName("UDF_Impacted_Systems");

                entity.Property(e => e.UdfPriority).HasColumnName("UDF_Priority");

                entity.Property(e => e.UdfProjectContact)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Contact");

                entity.Property(e => e.UdfProjectContactId).HasColumnName("UDF_Project_Contact_ID");

                entity.Property(e => e.UdfProjectSponsor)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Project_Sponsor");

                entity.Property(e => e.UdfProjectSponsorId).HasColumnName("UDF_Project_Sponsor_ID");

                entity.Property(e => e.UdfRequester)
                    .HasMaxLength(552)
                    .HasColumnName("UDF_Requester");

                entity.Property(e => e.UdfRequesterId).HasColumnName("UDF_Requester_ID");

                entity.Property(e => e.UdfResourceCost).HasColumnName("UDF_Resource_Cost");
            });

            modelBuilder.Entity<XxsaTcData2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_TC_DATA2");

                entity.Property(e => e.Denom).HasColumnName("denom");

                entity.Property(e => e.Fri1).HasColumnName("Fri_1");

                entity.Property(e => e.Fri2).HasColumnName("Fri_2");

                entity.Property(e => e.HoursType)
                    .HasMaxLength(4000)
                    .HasColumnName("Hours_Type");

                entity.Property(e => e.Login)
                    .HasMaxLength(520)
                    .HasColumnName("login");

                entity.Property(e => e.Mon1).HasColumnName("Mon_1");

                entity.Property(e => e.Mon2).HasColumnName("Mon_2");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.PeriodStart)
                    .HasColumnType("date")
                    .HasColumnName("period_start");

                entity.Property(e => e.Project).HasMaxLength(4000);

                entity.Property(e => e.Sat1).HasColumnName("Sat_1");

                entity.Property(e => e.Sat2).HasColumnName("Sat_2");

                entity.Property(e => e.Sun1).HasColumnName("Sun_1");

                entity.Property(e => e.Sun2).HasColumnName("Sun_2");

                entity.Property(e => e.Task).HasMaxLength(4000);

                entity.Property(e => e.Thr1).HasColumnName("Thr_1");

                entity.Property(e => e.Thr2).HasColumnName("Thr_2");

                entity.Property(e => e.Tue1).HasColumnName("Tue_1");

                entity.Property(e => e.Tue2).HasColumnName("Tue_2");

                entity.Property(e => e.Wed1).HasColumnName("Wed_1");

                entity.Property(e => e.Wed2).HasColumnName("Wed_2");
            });

            modelBuilder.Entity<XxsaTcDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_TC_DATA");

                entity.Property(e => e.Fri1).HasColumnName("Fri_1");

                entity.Property(e => e.Fri2).HasColumnName("Fri_2");

                entity.Property(e => e.HoursType)
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("Hours_Type");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("login");

                entity.Property(e => e.Mon1).HasColumnName("Mon_1");

                entity.Property(e => e.Mon2).HasColumnName("Mon_2");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.PeriodStart)
                    .HasColumnType("date")
                    .HasColumnName("period_start");

                entity.Property(e => e.Project).HasMaxLength(29);

                entity.Property(e => e.Sat1).HasColumnName("Sat_1");

                entity.Property(e => e.Sat2).HasColumnName("Sat_2");

                entity.Property(e => e.Sun1).HasColumnName("Sun_1");

                entity.Property(e => e.Sun2).HasColumnName("Sun_2");

                entity.Property(e => e.Task).HasMaxLength(29);

                entity.Property(e => e.Thr1).HasColumnName("Thr_1");

                entity.Property(e => e.Thr2).HasColumnName("Thr_2");

                entity.Property(e => e.Tue1).HasColumnName("Tue_1");

                entity.Property(e => e.Tue2).HasColumnName("Tue_2");

                entity.Property(e => e.Wed1).HasColumnName("Wed_1");

                entity.Property(e => e.Wed2).HasColumnName("Wed_2");
            });

            modelBuilder.Entity<XxsaTcDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_TC_DETAILS");

                entity.Property(e => e.ActTimeRep)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("act_time_rep");

                entity.Property(e => e.ActTimeSpent)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("act_time_spent");

                entity.Property(e => e.ActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("activity_date");

                entity.Property(e => e.HoursType)
                    .HasMaxLength(4000)
                    .HasColumnName("Hours_type");

                entity.Property(e => e.Login)
                    .HasMaxLength(520)
                    .HasColumnName("login");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.PeriodStart)
                    .HasColumnType("date")
                    .HasColumnName("period_start");

                entity.Property(e => e.PpDay).HasColumnName("pp_day");

                entity.Property(e => e.Project).HasMaxLength(4000);

                entity.Property(e => e.RepTime).HasColumnName("rep_time");

                entity.Property(e => e.Summary)
                    .HasMaxLength(128)
                    .HasColumnName("summary");

                entity.Property(e => e.Task).HasMaxLength(4000);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");
            });

            modelBuilder.Entity<XxsaTdxTimeDatum>(entity =>
            {
                entity.HasKey(e => e.TimeId)
                    .HasName("PK__XXSA_TDX__E04ED967773F4282");

                entity.ToTable("XXSA_TDX_Time_Data");

                entity.Property(e => e.TimeId)
                    .ValueGeneratedNever()
                    .HasColumnName("TimeID");

                entity.Property(e => e.ActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Activity_Date");

                entity.Property(e => e.Description)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ItemTitle)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Item_Title");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.UserName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("User_Name");
            });

            modelBuilder.Entity<XxsaTicketDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_TICKET_DETAILS");

                entity.Property(e => e.ActTimeRep)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("act_time_rep");

                entity.Property(e => e.ActTimeSpent)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("act_time_spent");

                entity.Property(e => e.ActTimeTicket)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("act_time_ticket");

                entity.Property(e => e.ActivityDate)
                    .HasColumnType("date")
                    .HasColumnName("activity_date");

                entity.Property(e => e.Details).HasColumnName("details");

                entity.Property(e => e.HoursType)
                    .HasMaxLength(4000)
                    .HasColumnName("Hours_type");

                entity.Property(e => e.Login)
                    .HasMaxLength(520)
                    .HasColumnName("login");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.PeriodStart)
                    .HasColumnType("date")
                    .HasColumnName("period_start");

                entity.Property(e => e.PpDay).HasColumnName("pp_day");

                entity.Property(e => e.Project).HasMaxLength(4000);

                entity.Property(e => e.RepTime).HasColumnName("rep_time");

                entity.Property(e => e.Summary)
                    .HasMaxLength(128)
                    .HasColumnName("summary");

                entity.Property(e => e.Task).HasMaxLength(4000);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .HasColumnName("ticket");

                entity.Property(e => e.TicketTime).HasColumnName("ticket_time");

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");
            });

            modelBuilder.Entity<XxsaTicketList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Ticket_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<XxsaTicketListActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Ticket_List_Active");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<XxsaTicketListWithResolution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Ticket_List_with_Resolution");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<XxsaTicketLookupWithActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Ticket_Lookup_with_Activity");

                entity.Property(e => e.ActCreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("act_create_date");

                entity.Property(e => e.ActTimeSpent).HasColumnName("Act_Time_Spent");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UDF_Activity_Date");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<XxsaTicketOverdueList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Ticket_Overdue_List");

                entity.Property(e => e.ActivityCount).HasColumnName("Activity_Count");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.Assignee).HasMaxLength(276);

                entity.Property(e => e.AssigneeGroup)
                    .HasMaxLength(100)
                    .HasColumnName("Assignee_Group");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.AttachmentsCount).HasColumnName("Attachments_Count");

                entity.Property(e => e.AttachmentsTotalSize).HasColumnName("Attachments_Total_Size");

                entity.Property(e => e.Category).HasMaxLength(2048);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Class)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassIndex).HasColumnName("Class_Index");

                entity.Property(e => e.ClosureCode)
                    .HasMaxLength(50)
                    .HasColumnName("Closure_Code");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.FlagStatus).HasColumnName("Flag_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Impact).HasMaxLength(50);

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.LastestActivity)
                    .HasColumnType("datetime")
                    .HasColumnName("Lastest_Activity");

                entity.Property(e => e.Medium).HasMaxLength(50);

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(276)
                    .HasColumnName("Modified_by");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Modified_Date");

                entity.Property(e => e.Organization).HasMaxLength(2048);

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.Project).HasMaxLength(2048);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RelatedCiName)
                    .HasMaxLength(250)
                    .HasColumnName("Related_CI_Name");

                entity.Property(e => e.Requester).HasMaxLength(276);

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.RequesterLocation)
                    .HasMaxLength(2048)
                    .HasColumnName("Requester_Location");

                entity.Property(e => e.RequesterPhone)
                    .HasMaxLength(64)
                    .HasColumnName("Requester_Phone");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.Urgency).HasMaxLength(50);

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");

                entity.Property(e => e.WorkOrderCount).HasColumnName("Work_Order_Count");
            });

            modelBuilder.Entity<XxsaTicketsAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Tickets_All");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<XxsaTicketsAllWithResolution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Tickets_All_with_Resolution");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<XxsaTicketsByRelatedCiSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Tickets_By_Related_CI_Summary");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");
            });

            modelBuilder.Entity<XxsaTicketsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Tickets_View");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            modelBuilder.Entity<XxsaTicketsViewActive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXSA_Tickets_View_Active");

                entity.Property(e => e.ActualResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Response_Date");

                entity.Property(e => e.AssigneeGroupId).HasColumnName("Assignee_Group_ID");

                entity.Property(e => e.AssigneeId).HasColumnName("Assignee_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ClosureCodeId).HasColumnName("Closure_Code_ID");

                entity.Property(e => e.CompletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Completed_Date");

                entity.Property(e => e.CumulativeTimeSpent).HasColumnName("Cumulative_Time_Spent");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Due_Date");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImpactId).HasColumnName("Impact_ID");

                entity.Property(e => e.MediumId).HasColumnName("Medium_ID");

                entity.Property(e => e.OrganizationId).HasColumnName("Organization_ID");

                entity.Property(e => e.PriorityId).HasColumnName("Priority_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RelatedCiId).HasColumnName("Related_CI_ID");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_ID");

                entity.Property(e => e.ResponseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Response_Date");

                entity.Property(e => e.ScheduledEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_End_Date");

                entity.Property(e => e.ScheduledStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Scheduled_Start_Date");

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Start_Date");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");

                entity.Property(e => e.Summary).HasMaxLength(128);

                entity.Property(e => e.Ticket).HasMaxLength(25);

                entity.Property(e => e.TimeSpent).HasColumnName("Time_Spent");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UdfCustRank).HasColumnName("UDF_Cust_Rank");

                entity.Property(e => e.UdfEstEffort).HasColumnName("UDF_Est_Effort");

                entity.Property(e => e.UdfExpCommit).HasColumnName("UDF_Exp_Commit");

                entity.Property(e => e.UdfPrioritySetManually).HasColumnName("UDF_Priority_Set_Manually");

                entity.Property(e => e.UdfProject)
                    .HasMaxLength(80)
                    .HasColumnName("UDF_Project");

                entity.Property(e => e.UdfProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Project_Code");

                entity.Property(e => e.UdfTask)
                    .HasMaxLength(50)
                    .HasColumnName("UDF_Task");

                entity.Property(e => e.UdfTaskCode)
                    .HasMaxLength(6)
                    .HasColumnName("UDF_Task_Code");

                entity.Property(e => e.UdfTechRank).HasColumnName("UDF_Tech_Rank");

                entity.Property(e => e.UrgencyId).HasColumnName("Urgency_ID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
